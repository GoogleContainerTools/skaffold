// Code generated by "stringer -type astNodeType"; DO NOT EDIT.

package jmespath

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ASTEmpty-0]
	_ = x[ASTComparator-1]
	_ = x[ASTCurrentNode-2]
	_ = x[ASTExpRef-3]
	_ = x[ASTFunctionExpression-4]
	_ = x[ASTField-5]
	_ = x[ASTFilterProjection-6]
	_ = x[ASTFlatten-7]
	_ = x[ASTIdentity-8]
	_ = x[ASTIndex-9]
	_ = x[ASTIndexExpression-10]
	_ = x[ASTKeyValPair-11]
	_ = x[ASTLiteral-12]
	_ = x[ASTMultiSelectHash-13]
	_ = x[ASTMultiSelectList-14]
	_ = x[ASTOrExpression-15]
	_ = x[ASTAndExpression-16]
	_ = x[ASTNotExpression-17]
	_ = x[ASTPipe-18]
	_ = x[ASTProjection-19]
	_ = x[ASTSubexpression-20]
	_ = x[ASTSlice-21]
	_ = x[ASTValueProjection-22]
}

const _astNodeType_name = "ASTEmptyASTComparatorASTCurrentNodeASTExpRefASTFunctionExpressionASTFieldASTFilterProjectionASTFlattenASTIdentityASTIndexASTIndexExpressionASTKeyValPairASTLiteralASTMultiSelectHashASTMultiSelectListASTOrExpressionASTAndExpressionASTNotExpressionASTPipeASTProjectionASTSubexpressionASTSliceASTValueProjection"

var _astNodeType_index = [...]uint16{0, 8, 21, 35, 44, 65, 73, 92, 102, 113, 121, 139, 152, 162, 180, 198, 213, 229, 245, 252, 265, 281, 289, 307}

func (i astNodeType) String() string {
	if i < 0 || i >= astNodeType(len(_astNodeType_index)-1) {
		return "astNodeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _astNodeType_name[_astNodeType_index[i]:_astNodeType_index[i+1]]
}
