// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: v3/skaffold.proto

package v3

import (
	enums "github.com/GoogleContainerTools/skaffold/proto/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of enums/enums.proto.

type BuilderType = enums.BuilderType

const BuilderType_UNKNOWN_BUILDER_TYPE = enums.BuilderType_UNKNOWN_BUILDER_TYPE
const BuilderType_JIB = enums.BuilderType_JIB
const BuilderType_BAZEL = enums.BuilderType_BAZEL
const BuilderType_BUILDPACKS = enums.BuilderType_BUILDPACKS
const BuilderType_CUSTOM = enums.BuilderType_CUSTOM
const BuilderType_KANIKO = enums.BuilderType_KANIKO
const BuilderType_DOCKER = enums.BuilderType_DOCKER

var BuilderType_name = enums.BuilderType_name
var BuilderType_value = enums.BuilderType_value

type BuildType = enums.BuildType

const BuildType_UNKNOWN_BUILD_TYPE = enums.BuildType_UNKNOWN_BUILD_TYPE
const BuildType_CLUSTER = enums.BuildType_CLUSTER
const BuildType_GCB = enums.BuildType_GCB
const BuildType_LOCAL = enums.BuildType_LOCAL

var BuildType_name = enums.BuildType_name
var BuildType_value = enums.BuildType_value

type TesterType = enums.TesterType

const TesterType_UNKNOWN_TEST_TYPE = enums.TesterType_UNKNOWN_TEST_TYPE
const TesterType_UNIT = enums.TesterType_UNIT
const TesterType_CONTAINER_STRUCTURE_TEST = enums.TesterType_CONTAINER_STRUCTURE_TEST

var TesterType_name = enums.TesterType_name
var TesterType_value = enums.TesterType_value

type RenderType = enums.RenderType

const RenderType_UNKNOWN_RENDER_TYPE = enums.RenderType_UNKNOWN_RENDER_TYPE
const RenderType_RAWK8S = enums.RenderType_RAWK8S
const RenderType_KUSTOMIZE_MANIFEST = enums.RenderType_KUSTOMIZE_MANIFEST
const RenderType_HELM_CHART = enums.RenderType_HELM_CHART
const RenderType_KPT_MANIFEST = enums.RenderType_KPT_MANIFEST

var RenderType_name = enums.RenderType_name
var RenderType_value = enums.RenderType_value

type DeployerType = enums.DeployerType

const DeployerType_UNKNOWN_DEPLOYER_TYPE = enums.DeployerType_UNKNOWN_DEPLOYER_TYPE
const DeployerType_HELM = enums.DeployerType_HELM
const DeployerType_KUSTOMIZE = enums.DeployerType_KUSTOMIZE
const DeployerType_KUBECTL = enums.DeployerType_KUBECTL
const DeployerType_KPT = enums.DeployerType_KPT

var DeployerType_name = enums.DeployerType_name
var DeployerType_value = enums.DeployerType_value

type ClusterType = enums.ClusterType

const ClusterType_UNKNOWN_CLUSTER_TYPE = enums.ClusterType_UNKNOWN_CLUSTER_TYPE
const ClusterType_MINIKUBE = enums.ClusterType_MINIKUBE
const ClusterType_GKE = enums.ClusterType_GKE
const ClusterType_OTHER = enums.ClusterType_OTHER

var ClusterType_name = enums.ClusterType_name
var ClusterType_value = enums.ClusterType_value

type LogLevel = enums.LogLevel

const LogLevel_DEBUG = enums.LogLevel_DEBUG
const LogLevel_INFO = enums.LogLevel_INFO
const LogLevel_WARN = enums.LogLevel_WARN
const LogLevel_ERROR = enums.LogLevel_ERROR
const LogLevel_FATAL = enums.LogLevel_FATAL
const LogLevel_PANIC = enums.LogLevel_PANIC
const LogLevel_TRACE = enums.LogLevel_TRACE

var LogLevel_name = enums.LogLevel_name
var LogLevel_value = enums.LogLevel_value

type StatusCode = enums.StatusCode

const StatusCode_OK = enums.StatusCode_OK
const StatusCode_STATUSCHECK_SUCCESS = enums.StatusCode_STATUSCHECK_SUCCESS
const StatusCode_BUILD_SUCCESS = enums.StatusCode_BUILD_SUCCESS
const StatusCode_RENDER_SUCCESS = enums.StatusCode_RENDER_SUCCESS
const StatusCode_DEPLOY_SUCCESS = enums.StatusCode_DEPLOY_SUCCESS
const StatusCode_TEST_SUCCESS = enums.StatusCode_TEST_SUCCESS
const StatusCode_BUILD_PUSH_ACCESS_DENIED = enums.StatusCode_BUILD_PUSH_ACCESS_DENIED
const StatusCode_BUILD_PROJECT_NOT_FOUND = enums.StatusCode_BUILD_PROJECT_NOT_FOUND
const StatusCode_BUILD_DOCKER_DAEMON_NOT_RUNNING = enums.StatusCode_BUILD_DOCKER_DAEMON_NOT_RUNNING
const StatusCode_BUILD_USER_ERROR = enums.StatusCode_BUILD_USER_ERROR
const StatusCode_BUILD_DOCKER_UNAVAILABLE = enums.StatusCode_BUILD_DOCKER_UNAVAILABLE
const StatusCode_BUILD_DOCKER_UNAUTHORIZED = enums.StatusCode_BUILD_DOCKER_UNAUTHORIZED
const StatusCode_BUILD_DOCKER_SYSTEM_ERR = enums.StatusCode_BUILD_DOCKER_SYSTEM_ERR
const StatusCode_BUILD_DOCKER_NOT_MODIFIED_ERR = enums.StatusCode_BUILD_DOCKER_NOT_MODIFIED_ERR
const StatusCode_BUILD_DOCKER_NOT_IMPLEMENTED_ERR = enums.StatusCode_BUILD_DOCKER_NOT_IMPLEMENTED_ERR
const StatusCode_BUILD_DOCKER_DATA_LOSS_ERR = enums.StatusCode_BUILD_DOCKER_DATA_LOSS_ERR
const StatusCode_BUILD_DOCKER_FORBIDDEN_ERR = enums.StatusCode_BUILD_DOCKER_FORBIDDEN_ERR
const StatusCode_BUILD_DOCKER_CONFLICT_ERR = enums.StatusCode_BUILD_DOCKER_CONFLICT_ERR
const StatusCode_BUILD_DOCKER_ERROR_NOT_FOUND = enums.StatusCode_BUILD_DOCKER_ERROR_NOT_FOUND
const StatusCode_BUILD_DOCKER_INVALID_PARAM_ERR = enums.StatusCode_BUILD_DOCKER_INVALID_PARAM_ERR
const StatusCode_BUILD_DOCKERFILE_NOT_FOUND = enums.StatusCode_BUILD_DOCKERFILE_NOT_FOUND
const StatusCode_BUILD_DOCKER_CACHE_FROM_PULL_ERR = enums.StatusCode_BUILD_DOCKER_CACHE_FROM_PULL_ERR
const StatusCode_BUILD_DOCKER_GET_DIGEST_ERR = enums.StatusCode_BUILD_DOCKER_GET_DIGEST_ERR
const StatusCode_BUILD_DOCKER_NO_SPACE_ERR = enums.StatusCode_BUILD_DOCKER_NO_SPACE_ERR
const StatusCode_BUILD_REGISTRY_GET_DIGEST_ERR = enums.StatusCode_BUILD_REGISTRY_GET_DIGEST_ERR
const StatusCode_BUILD_UNKNOWN_JIB_PLUGIN_TYPE = enums.StatusCode_BUILD_UNKNOWN_JIB_PLUGIN_TYPE
const StatusCode_BUILD_JIB_GRADLE_DEP_ERR = enums.StatusCode_BUILD_JIB_GRADLE_DEP_ERR
const StatusCode_BUILD_JIB_MAVEN_DEP_ERR = enums.StatusCode_BUILD_JIB_MAVEN_DEP_ERR
const StatusCode_INIT_DOCKER_NETWORK_LISTING_CONTAINERS = enums.StatusCode_INIT_DOCKER_NETWORK_LISTING_CONTAINERS
const StatusCode_INIT_DOCKER_NETWORK_INVALID_CONTAINER_NAME = enums.StatusCode_INIT_DOCKER_NETWORK_INVALID_CONTAINER_NAME
const StatusCode_INIT_DOCKER_NETWORK_CONTAINER_DOES_NOT_EXIST = enums.StatusCode_INIT_DOCKER_NETWORK_CONTAINER_DOES_NOT_EXIST
const StatusCode_INIT_DOCKER_NETWORK_INVALID_MODE = enums.StatusCode_INIT_DOCKER_NETWORK_INVALID_MODE
const StatusCode_INIT_DOCKER_NETWORK_PARSE_ERR = enums.StatusCode_INIT_DOCKER_NETWORK_PARSE_ERR
const StatusCode_STATUSCHECK_IMAGE_PULL_ERR = enums.StatusCode_STATUSCHECK_IMAGE_PULL_ERR
const StatusCode_STATUSCHECK_CONTAINER_CREATING = enums.StatusCode_STATUSCHECK_CONTAINER_CREATING
const StatusCode_STATUSCHECK_RUN_CONTAINER_ERR = enums.StatusCode_STATUSCHECK_RUN_CONTAINER_ERR
const StatusCode_STATUSCHECK_CONTAINER_TERMINATED = enums.StatusCode_STATUSCHECK_CONTAINER_TERMINATED
const StatusCode_STATUSCHECK_DEPLOYMENT_ROLLOUT_PENDING = enums.StatusCode_STATUSCHECK_DEPLOYMENT_ROLLOUT_PENDING
const StatusCode_STATUSCHECK_CONTAINER_RESTARTING = enums.StatusCode_STATUSCHECK_CONTAINER_RESTARTING
const StatusCode_STATUSCHECK_UNHEALTHY = enums.StatusCode_STATUSCHECK_UNHEALTHY
const StatusCode_STATUSCHECK_CONTAINER_EXEC_ERROR = enums.StatusCode_STATUSCHECK_CONTAINER_EXEC_ERROR
const StatusCode_STATUSCHECK_NODE_MEMORY_PRESSURE = enums.StatusCode_STATUSCHECK_NODE_MEMORY_PRESSURE
const StatusCode_STATUSCHECK_NODE_DISK_PRESSURE = enums.StatusCode_STATUSCHECK_NODE_DISK_PRESSURE
const StatusCode_STATUSCHECK_NODE_NETWORK_UNAVAILABLE = enums.StatusCode_STATUSCHECK_NODE_NETWORK_UNAVAILABLE
const StatusCode_STATUSCHECK_NODE_PID_PRESSURE = enums.StatusCode_STATUSCHECK_NODE_PID_PRESSURE
const StatusCode_STATUSCHECK_NODE_UNSCHEDULABLE = enums.StatusCode_STATUSCHECK_NODE_UNSCHEDULABLE
const StatusCode_STATUSCHECK_NODE_UNREACHABLE = enums.StatusCode_STATUSCHECK_NODE_UNREACHABLE
const StatusCode_STATUSCHECK_NODE_NOT_READY = enums.StatusCode_STATUSCHECK_NODE_NOT_READY
const StatusCode_STATUSCHECK_FAILED_SCHEDULING = enums.StatusCode_STATUSCHECK_FAILED_SCHEDULING
const StatusCode_STATUSCHECK_KUBECTL_CONNECTION_ERR = enums.StatusCode_STATUSCHECK_KUBECTL_CONNECTION_ERR
const StatusCode_STATUSCHECK_KUBECTL_PID_KILLED = enums.StatusCode_STATUSCHECK_KUBECTL_PID_KILLED
const StatusCode_STATUSCHECK_KUBECTL_CLIENT_FETCH_ERR = enums.StatusCode_STATUSCHECK_KUBECTL_CLIENT_FETCH_ERR
const StatusCode_STATUSCHECK_DEPLOYMENT_FETCH_ERR = enums.StatusCode_STATUSCHECK_DEPLOYMENT_FETCH_ERR
const StatusCode_STATUSCHECK_POD_INITIALIZING = enums.StatusCode_STATUSCHECK_POD_INITIALIZING
const StatusCode_UNKNOWN_ERROR = enums.StatusCode_UNKNOWN_ERROR
const StatusCode_STATUSCHECK_UNKNOWN = enums.StatusCode_STATUSCHECK_UNKNOWN
const StatusCode_STATUSCHECK_UNKNOWN_UNSCHEDULABLE = enums.StatusCode_STATUSCHECK_UNKNOWN_UNSCHEDULABLE
const StatusCode_STATUSCHECK_CONTAINER_WAITING_UNKNOWN = enums.StatusCode_STATUSCHECK_CONTAINER_WAITING_UNKNOWN
const StatusCode_STATUSCHECK_UNKNOWN_EVENT = enums.StatusCode_STATUSCHECK_UNKNOWN_EVENT
const StatusCode_DEPLOY_UNKNOWN = enums.StatusCode_DEPLOY_UNKNOWN
const StatusCode_SYNC_UNKNOWN = enums.StatusCode_SYNC_UNKNOWN
const StatusCode_BUILD_UNKNOWN = enums.StatusCode_BUILD_UNKNOWN
const StatusCode_DEVINIT_UNKNOWN = enums.StatusCode_DEVINIT_UNKNOWN
const StatusCode_CLEANUP_UNKNOWN = enums.StatusCode_CLEANUP_UNKNOWN
const StatusCode_INIT_UNKNOWN = enums.StatusCode_INIT_UNKNOWN
const StatusCode_BUILD_DOCKER_UNKNOWN = enums.StatusCode_BUILD_DOCKER_UNKNOWN
const StatusCode_TEST_UNKNOWN = enums.StatusCode_TEST_UNKNOWN
const StatusCode_SYNC_INIT_ERROR = enums.StatusCode_SYNC_INIT_ERROR
const StatusCode_DEVINIT_REGISTER_BUILD_DEPS = enums.StatusCode_DEVINIT_REGISTER_BUILD_DEPS
const StatusCode_DEVINIT_REGISTER_TEST_DEPS = enums.StatusCode_DEVINIT_REGISTER_TEST_DEPS
const StatusCode_DEVINIT_REGISTER_DEPLOY_DEPS = enums.StatusCode_DEVINIT_REGISTER_DEPLOY_DEPS
const StatusCode_DEVINIT_REGISTER_CONFIG_DEP = enums.StatusCode_DEVINIT_REGISTER_CONFIG_DEP
const StatusCode_DEVINIT_UNSUPPORTED_V1_MANIFEST = enums.StatusCode_DEVINIT_UNSUPPORTED_V1_MANIFEST
const StatusCode_STATUSCHECK_USER_CANCELLED = enums.StatusCode_STATUSCHECK_USER_CANCELLED
const StatusCode_STATUSCHECK_DEADLINE_EXCEEDED = enums.StatusCode_STATUSCHECK_DEADLINE_EXCEEDED
const StatusCode_BUILD_CANCELLED = enums.StatusCode_BUILD_CANCELLED
const StatusCode_DEPLOY_CANCELLED = enums.StatusCode_DEPLOY_CANCELLED
const StatusCode_BUILD_DOCKER_CANCELLED = enums.StatusCode_BUILD_DOCKER_CANCELLED
const StatusCode_BUILD_DOCKER_DEADLINE = enums.StatusCode_BUILD_DOCKER_DEADLINE
const StatusCode_INIT_CREATE_TAGGER_ERROR = enums.StatusCode_INIT_CREATE_TAGGER_ERROR
const StatusCode_INIT_MINIKUBE_PAUSED_ERROR = enums.StatusCode_INIT_MINIKUBE_PAUSED_ERROR
const StatusCode_INIT_MINIKUBE_NOT_RUNNING_ERROR = enums.StatusCode_INIT_MINIKUBE_NOT_RUNNING_ERROR
const StatusCode_INIT_CREATE_BUILDER_ERROR = enums.StatusCode_INIT_CREATE_BUILDER_ERROR
const StatusCode_INIT_CREATE_DEPLOYER_ERROR = enums.StatusCode_INIT_CREATE_DEPLOYER_ERROR
const StatusCode_INIT_CREATE_TEST_DEP_ERROR = enums.StatusCode_INIT_CREATE_TEST_DEP_ERROR
const StatusCode_INIT_CACHE_ERROR = enums.StatusCode_INIT_CACHE_ERROR
const StatusCode_INIT_CREATE_WATCH_TRIGGER_ERROR = enums.StatusCode_INIT_CREATE_WATCH_TRIGGER_ERROR
const StatusCode_INIT_CREATE_ARTIFACT_DEP_ERROR = enums.StatusCode_INIT_CREATE_ARTIFACT_DEP_ERROR
const StatusCode_DEPLOY_CLUSTER_CONNECTION_ERR = enums.StatusCode_DEPLOY_CLUSTER_CONNECTION_ERR
const StatusCode_DEPLOY_DEBUG_HELPER_RETRIEVE_ERR = enums.StatusCode_DEPLOY_DEBUG_HELPER_RETRIEVE_ERR
const StatusCode_DEPLOY_CLEANUP_ERR = enums.StatusCode_DEPLOY_CLEANUP_ERR
const StatusCode_DEPLOY_HELM_APPLY_LABELS = enums.StatusCode_DEPLOY_HELM_APPLY_LABELS
const StatusCode_DEPLOY_HELM_USER_ERR = enums.StatusCode_DEPLOY_HELM_USER_ERR
const StatusCode_DEPLOY_NO_MATCHING_BUILD = enums.StatusCode_DEPLOY_NO_MATCHING_BUILD
const StatusCode_DEPLOY_HELM_VERSION_ERR = enums.StatusCode_DEPLOY_HELM_VERSION_ERR
const StatusCode_DEPLOY_HELM_MIN_VERSION_ERR = enums.StatusCode_DEPLOY_HELM_MIN_VERSION_ERR
const StatusCode_DEPLOY_KUBECTL_VERSION_ERR = enums.StatusCode_DEPLOY_KUBECTL_VERSION_ERR
const StatusCode_DEPLOY_KUBECTL_OFFLINE_MODE_ERR = enums.StatusCode_DEPLOY_KUBECTL_OFFLINE_MODE_ERR
const StatusCode_DEPLOY_ERR_WAITING_FOR_DELETION = enums.StatusCode_DEPLOY_ERR_WAITING_FOR_DELETION
const StatusCode_DEPLOY_READ_MANIFEST_ERR = enums.StatusCode_DEPLOY_READ_MANIFEST_ERR
const StatusCode_DEPLOY_READ_REMOTE_MANIFEST_ERR = enums.StatusCode_DEPLOY_READ_REMOTE_MANIFEST_ERR
const StatusCode_DEPLOY_LIST_MANIFEST_ERR = enums.StatusCode_DEPLOY_LIST_MANIFEST_ERR
const StatusCode_DEPLOY_KUBECTL_USER_ERR = enums.StatusCode_DEPLOY_KUBECTL_USER_ERR
const StatusCode_DEPLOY_KUSTOMIZE_USER_ERR = enums.StatusCode_DEPLOY_KUSTOMIZE_USER_ERR
const StatusCode_DEPLOY_REPLACE_IMAGE_ERR = enums.StatusCode_DEPLOY_REPLACE_IMAGE_ERR
const StatusCode_DEPLOY_TRANSFORM_MANIFEST_ERR = enums.StatusCode_DEPLOY_TRANSFORM_MANIFEST_ERR
const StatusCode_DEPLOY_SET_LABEL_ERR = enums.StatusCode_DEPLOY_SET_LABEL_ERR
const StatusCode_DEPLOY_MANIFEST_WRITE_ERR = enums.StatusCode_DEPLOY_MANIFEST_WRITE_ERR
const StatusCode_DEPLOY_PARSE_MANIFEST_IMAGES_ERR = enums.StatusCode_DEPLOY_PARSE_MANIFEST_IMAGES_ERR
const StatusCode_DEPLOY_HELM_CREATE_NS_NOT_AVAILABLE = enums.StatusCode_DEPLOY_HELM_CREATE_NS_NOT_AVAILABLE
const StatusCode_DEPLOY_CLUSTER_INTERNAL_SYSTEM_ERR = enums.StatusCode_DEPLOY_CLUSTER_INTERNAL_SYSTEM_ERR
const StatusCode_DEPLOY_KPTFILE_INIT_ERR = enums.StatusCode_DEPLOY_KPTFILE_INIT_ERR
const StatusCode_TEST_USER_CONFIG_ERR = enums.StatusCode_TEST_USER_CONFIG_ERR
const StatusCode_TEST_CST_USER_ERR = enums.StatusCode_TEST_CST_USER_ERR
const StatusCode_TEST_IMG_PULL_ERR = enums.StatusCode_TEST_IMG_PULL_ERR
const StatusCode_TEST_CUSTOM_CMD_PARSE_ERR = enums.StatusCode_TEST_CUSTOM_CMD_PARSE_ERR
const StatusCode_TEST_CUSTOM_CMD_RUN_NON_ZERO_EXIT_ERR = enums.StatusCode_TEST_CUSTOM_CMD_RUN_NON_ZERO_EXIT_ERR
const StatusCode_TEST_CUSTOM_CMD_RUN_TIMEDOUT_ERR = enums.StatusCode_TEST_CUSTOM_CMD_RUN_TIMEDOUT_ERR
const StatusCode_TEST_CUSTOM_CMD_RUN_CANCELLED_ERR = enums.StatusCode_TEST_CUSTOM_CMD_RUN_CANCELLED_ERR
const StatusCode_TEST_CUSTOM_CMD_RUN_EXECUTION_ERR = enums.StatusCode_TEST_CUSTOM_CMD_RUN_EXECUTION_ERR
const StatusCode_TEST_CUSTOM_CMD_RUN_EXITED_ERR = enums.StatusCode_TEST_CUSTOM_CMD_RUN_EXITED_ERR
const StatusCode_TEST_CUSTOM_CMD_RUN_ERR = enums.StatusCode_TEST_CUSTOM_CMD_RUN_ERR
const StatusCode_TEST_CUSTOM_DEPENDENCIES_CMD_ERR = enums.StatusCode_TEST_CUSTOM_DEPENDENCIES_CMD_ERR
const StatusCode_TEST_CUSTOM_DEPENDENCIES_UNMARSHALL_ERR = enums.StatusCode_TEST_CUSTOM_DEPENDENCIES_UNMARSHALL_ERR
const StatusCode_TEST_CUSTOM_CMD_RETRIEVE_ERR = enums.StatusCode_TEST_CUSTOM_CMD_RETRIEVE_ERR
const StatusCode_RENDER_KPTFILE_INIT_ERR = enums.StatusCode_RENDER_KPTFILE_INIT_ERR
const StatusCode_RENDER_KPTFILE_INVALID_YAML_ERR = enums.StatusCode_RENDER_KPTFILE_INVALID_YAML_ERR
const StatusCode_RENDER_KPTFILE_INVALID_SCHEMA_ERR = enums.StatusCode_RENDER_KPTFILE_INVALID_SCHEMA_ERR
const StatusCode_CONFIG_FILE_PARSING_ERR = enums.StatusCode_CONFIG_FILE_PARSING_ERR
const StatusCode_CONFIG_FILE_NOT_FOUND_ERR = enums.StatusCode_CONFIG_FILE_NOT_FOUND_ERR
const StatusCode_CONFIG_DEPENDENCY_NOT_FOUND_ERR = enums.StatusCode_CONFIG_DEPENDENCY_NOT_FOUND_ERR
const StatusCode_CONFIG_DUPLICATE_NAMES_SAME_FILE_ERR = enums.StatusCode_CONFIG_DUPLICATE_NAMES_SAME_FILE_ERR
const StatusCode_CONFIG_DUPLICATE_NAMES_ACROSS_FILES_ERR = enums.StatusCode_CONFIG_DUPLICATE_NAMES_ACROSS_FILES_ERR
const StatusCode_CONFIG_BAD_FILTER_ERR = enums.StatusCode_CONFIG_BAD_FILTER_ERR
const StatusCode_CONFIG_ZERO_FOUND_ERR = enums.StatusCode_CONFIG_ZERO_FOUND_ERR
const StatusCode_CONFIG_APPLY_PROFILES_ERR = enums.StatusCode_CONFIG_APPLY_PROFILES_ERR
const StatusCode_CONFIG_DEFAULT_VALUES_ERR = enums.StatusCode_CONFIG_DEFAULT_VALUES_ERR
const StatusCode_CONFIG_FILE_PATHS_SUBSTITUTION_ERR = enums.StatusCode_CONFIG_FILE_PATHS_SUBSTITUTION_ERR
const StatusCode_CONFIG_MULTI_IMPORT_PROFILE_CONFLICT_ERR = enums.StatusCode_CONFIG_MULTI_IMPORT_PROFILE_CONFLICT_ERR
const StatusCode_CONFIG_PROFILES_NOT_FOUND_ERR = enums.StatusCode_CONFIG_PROFILES_NOT_FOUND_ERR
const StatusCode_CONFIG_UNKNOWN_API_VERSION_ERR = enums.StatusCode_CONFIG_UNKNOWN_API_VERSION_ERR
const StatusCode_CONFIG_UNKNOWN_VALIDATOR = enums.StatusCode_CONFIG_UNKNOWN_VALIDATOR
const StatusCode_CONFIG_UNKNOWN_TRANSFORMER = enums.StatusCode_CONFIG_UNKNOWN_TRANSFORMER
const StatusCode_CONFIG_MISSING_MANIFEST_FILE_ERR = enums.StatusCode_CONFIG_MISSING_MANIFEST_FILE_ERR
const StatusCode_CONFIG_REMOTE_REPO_CACHE_NOT_FOUND_ERR = enums.StatusCode_CONFIG_REMOTE_REPO_CACHE_NOT_FOUND_ERR
const StatusCode_INSPECT_UNKNOWN_ERR = enums.StatusCode_INSPECT_UNKNOWN_ERR
const StatusCode_INSPECT_BUILD_ENV_ALREADY_EXISTS_ERR = enums.StatusCode_INSPECT_BUILD_ENV_ALREADY_EXISTS_ERR
const StatusCode_INSPECT_BUILD_ENV_INCORRECT_TYPE_ERR = enums.StatusCode_INSPECT_BUILD_ENV_INCORRECT_TYPE_ERR
const StatusCode_INSPECT_PROFILE_NOT_FOUND_ERR = enums.StatusCode_INSPECT_PROFILE_NOT_FOUND_ERR

var StatusCode_name = enums.StatusCode_name
var StatusCode_value = enums.StatusCode_value

type SuggestionCode = enums.SuggestionCode

const SuggestionCode_NIL = enums.SuggestionCode_NIL
const SuggestionCode_ADD_DEFAULT_REPO = enums.SuggestionCode_ADD_DEFAULT_REPO
const SuggestionCode_CHECK_DEFAULT_REPO = enums.SuggestionCode_CHECK_DEFAULT_REPO
const SuggestionCode_CHECK_DEFAULT_REPO_GLOBAL_CONFIG = enums.SuggestionCode_CHECK_DEFAULT_REPO_GLOBAL_CONFIG
const SuggestionCode_GCLOUD_DOCKER_AUTH_CONFIGURE = enums.SuggestionCode_GCLOUD_DOCKER_AUTH_CONFIGURE
const SuggestionCode_DOCKER_AUTH_CONFIGURE = enums.SuggestionCode_DOCKER_AUTH_CONFIGURE
const SuggestionCode_CHECK_GCLOUD_PROJECT = enums.SuggestionCode_CHECK_GCLOUD_PROJECT
const SuggestionCode_CHECK_DOCKER_RUNNING = enums.SuggestionCode_CHECK_DOCKER_RUNNING
const SuggestionCode_FIX_USER_BUILD_ERR = enums.SuggestionCode_FIX_USER_BUILD_ERR
const SuggestionCode_DOCKER_BUILD_RETRY = enums.SuggestionCode_DOCKER_BUILD_RETRY
const SuggestionCode_FIX_CACHE_FROM_ARTIFACT_CONFIG = enums.SuggestionCode_FIX_CACHE_FROM_ARTIFACT_CONFIG
const SuggestionCode_FIX_SKAFFOLD_CONFIG_DOCKERFILE = enums.SuggestionCode_FIX_SKAFFOLD_CONFIG_DOCKERFILE
const SuggestionCode_FIX_JIB_PLUGIN_CONFIGURATION = enums.SuggestionCode_FIX_JIB_PLUGIN_CONFIGURATION
const SuggestionCode_FIX_DOCKER_NETWORK_CONTAINER_NAME = enums.SuggestionCode_FIX_DOCKER_NETWORK_CONTAINER_NAME
const SuggestionCode_CHECK_DOCKER_NETWORK_CONTAINER_RUNNING = enums.SuggestionCode_CHECK_DOCKER_NETWORK_CONTAINER_RUNNING
const SuggestionCode_FIX_DOCKER_NETWORK_MODE_WHEN_EXTRACTING_CONTAINER_NAME = enums.SuggestionCode_FIX_DOCKER_NETWORK_MODE_WHEN_EXTRACTING_CONTAINER_NAME
const SuggestionCode_RUN_DOCKER_PRUNE = enums.SuggestionCode_RUN_DOCKER_PRUNE
const SuggestionCode_SET_CLEANUP_FLAG = enums.SuggestionCode_SET_CLEANUP_FLAG
const SuggestionCode_CHECK_CLUSTER_CONNECTION = enums.SuggestionCode_CHECK_CLUSTER_CONNECTION
const SuggestionCode_CHECK_MINIKUBE_STATUS = enums.SuggestionCode_CHECK_MINIKUBE_STATUS
const SuggestionCode_INSTALL_HELM = enums.SuggestionCode_INSTALL_HELM
const SuggestionCode_UPGRADE_HELM = enums.SuggestionCode_UPGRADE_HELM
const SuggestionCode_FIX_SKAFFOLD_CONFIG_HELM_ARTIFACT_OVERRIDES = enums.SuggestionCode_FIX_SKAFFOLD_CONFIG_HELM_ARTIFACT_OVERRIDES
const SuggestionCode_UPGRADE_HELM32 = enums.SuggestionCode_UPGRADE_HELM32
const SuggestionCode_FIX_SKAFFOLD_CONFIG_HELM_CREATE_NAMESPACE = enums.SuggestionCode_FIX_SKAFFOLD_CONFIG_HELM_CREATE_NAMESPACE
const SuggestionCode_INSTALL_KUBECTL = enums.SuggestionCode_INSTALL_KUBECTL
const SuggestionCode_CHECK_CONTAINER_LOGS = enums.SuggestionCode_CHECK_CONTAINER_LOGS
const SuggestionCode_CHECK_READINESS_PROBE = enums.SuggestionCode_CHECK_READINESS_PROBE
const SuggestionCode_CHECK_CONTAINER_IMAGE = enums.SuggestionCode_CHECK_CONTAINER_IMAGE
const SuggestionCode_ADDRESS_NODE_MEMORY_PRESSURE = enums.SuggestionCode_ADDRESS_NODE_MEMORY_PRESSURE
const SuggestionCode_ADDRESS_NODE_DISK_PRESSURE = enums.SuggestionCode_ADDRESS_NODE_DISK_PRESSURE
const SuggestionCode_ADDRESS_NODE_NETWORK_UNAVAILABLE = enums.SuggestionCode_ADDRESS_NODE_NETWORK_UNAVAILABLE
const SuggestionCode_ADDRESS_NODE_PID_PRESSURE = enums.SuggestionCode_ADDRESS_NODE_PID_PRESSURE
const SuggestionCode_ADDRESS_NODE_UNSCHEDULABLE = enums.SuggestionCode_ADDRESS_NODE_UNSCHEDULABLE
const SuggestionCode_ADDRESS_NODE_UNREACHABLE = enums.SuggestionCode_ADDRESS_NODE_UNREACHABLE
const SuggestionCode_ADDRESS_NODE_NOT_READY = enums.SuggestionCode_ADDRESS_NODE_NOT_READY
const SuggestionCode_ADDRESS_FAILED_SCHEDULING = enums.SuggestionCode_ADDRESS_FAILED_SCHEDULING
const SuggestionCode_CHECK_HOST_CONNECTION = enums.SuggestionCode_CHECK_HOST_CONNECTION
const SuggestionCode_START_MINIKUBE = enums.SuggestionCode_START_MINIKUBE
const SuggestionCode_UNPAUSE_MINIKUBE = enums.SuggestionCode_UNPAUSE_MINIKUBE
const SuggestionCode_RUN_DOCKER_PULL = enums.SuggestionCode_RUN_DOCKER_PULL
const SuggestionCode_SET_RENDER_FLAG_OFFLINE_FALSE = enums.SuggestionCode_SET_RENDER_FLAG_OFFLINE_FALSE
const SuggestionCode_KPTFILE_MANUAL_INIT = enums.SuggestionCode_KPTFILE_MANUAL_INIT
const SuggestionCode_KPTFILE_CHECK_YAML = enums.SuggestionCode_KPTFILE_CHECK_YAML
const SuggestionCode_CONFIG_CHECK_FILE_PATH = enums.SuggestionCode_CONFIG_CHECK_FILE_PATH
const SuggestionCode_CONFIG_CHECK_DEPENDENCY_DEFINITION = enums.SuggestionCode_CONFIG_CHECK_DEPENDENCY_DEFINITION
const SuggestionCode_CONFIG_CHANGE_NAMES = enums.SuggestionCode_CONFIG_CHANGE_NAMES
const SuggestionCode_CONFIG_CHECK_FILTER = enums.SuggestionCode_CONFIG_CHECK_FILTER
const SuggestionCode_CONFIG_CHECK_PROFILE_DEFINITION = enums.SuggestionCode_CONFIG_CHECK_PROFILE_DEFINITION
const SuggestionCode_CONFIG_CHECK_DEPENDENCY_PROFILES_SELECTION = enums.SuggestionCode_CONFIG_CHECK_DEPENDENCY_PROFILES_SELECTION
const SuggestionCode_CONFIG_CHECK_PROFILE_SELECTION = enums.SuggestionCode_CONFIG_CHECK_PROFILE_SELECTION
const SuggestionCode_CONFIG_FIX_API_VERSION = enums.SuggestionCode_CONFIG_FIX_API_VERSION
const SuggestionCode_CONFIG_ALLOWLIST_VALIDATORS = enums.SuggestionCode_CONFIG_ALLOWLIST_VALIDATORS
const SuggestionCode_CONFIG_ALLOWLIST_transformers = enums.SuggestionCode_CONFIG_ALLOWLIST_transformers
const SuggestionCode_CONFIG_FIX_MISSING_MANIFEST_FILE = enums.SuggestionCode_CONFIG_FIX_MISSING_MANIFEST_FILE
const SuggestionCode_CONFIG_ENABLE_REMOTE_REPO_SYNC = enums.SuggestionCode_CONFIG_ENABLE_REMOTE_REPO_SYNC
const SuggestionCode_INSPECT_USE_MODIFY_OR_NEW_PROFILE = enums.SuggestionCode_INSPECT_USE_MODIFY_OR_NEW_PROFILE
const SuggestionCode_INSPECT_USE_ADD_BUILD_ENV = enums.SuggestionCode_INSPECT_USE_ADD_BUILD_ENV
const SuggestionCode_INSPECT_CHECK_INPUT_PROFILE = enums.SuggestionCode_INSPECT_CHECK_INPUT_PROFILE
const SuggestionCode_OPEN_ISSUE = enums.SuggestionCode_OPEN_ISSUE
const SuggestionCode_CHECK_CUSTOM_COMMAND = enums.SuggestionCode_CHECK_CUSTOM_COMMAND
const SuggestionCode_FIX_CUSTOM_COMMAND_TIMEOUT = enums.SuggestionCode_FIX_CUSTOM_COMMAND_TIMEOUT
const SuggestionCode_CHECK_CUSTOM_COMMAND_DEPENDENCIES_CMD = enums.SuggestionCode_CHECK_CUSTOM_COMMAND_DEPENDENCIES_CMD
const SuggestionCode_CHECK_CUSTOM_COMMAND_DEPENDENCIES_PATHS = enums.SuggestionCode_CHECK_CUSTOM_COMMAND_DEPENDENCIES_PATHS
const SuggestionCode_CHECK_TEST_COMMAND_AND_IMAGE_NAME = enums.SuggestionCode_CHECK_TEST_COMMAND_AND_IMAGE_NAME

var SuggestionCode_name = enums.SuggestionCode_name
var SuggestionCode_value = enums.SuggestionCode_value

type StateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *StateResponse) Reset() {
	*x = StateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateResponse) ProtoMessage() {}

func (x *StateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateResponse.ProtoReflect.Descriptor instead.
func (*StateResponse) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{0}
}

func (x *StateResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// `State` represents the current state of the Skaffold components
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildState          *BuildState                 `protobuf:"bytes,1,opt,name=buildState,proto3" json:"buildState,omitempty"`
	DeployState         *DeployState                `protobuf:"bytes,2,opt,name=deployState,proto3" json:"deployState,omitempty"`
	ForwardedPorts      map[int32]*PortForwardEvent `protobuf:"bytes,3,rep,name=forwardedPorts,proto3" json:"forwardedPorts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusCheckState    *StatusCheckState           `protobuf:"bytes,4,opt,name=statusCheckState,proto3" json:"statusCheckState,omitempty"`
	FileSyncState       *FileSyncState              `protobuf:"bytes,5,opt,name=fileSyncState,proto3" json:"fileSyncState,omitempty"`
	DebuggingContainers []*DebuggingContainerState  `protobuf:"bytes,6,rep,name=debuggingContainers,proto3" json:"debuggingContainers,omitempty"`
	Metadata            *Metadata                   `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	TestState           *TestState                  `protobuf:"bytes,8,opt,name=testState,proto3" json:"testState,omitempty"`
	RenderState         *RenderState                `protobuf:"bytes,9,opt,name=renderState,proto3" json:"renderState,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{3}
}

func (x *State) GetBuildState() *BuildState {
	if x != nil {
		return x.BuildState
	}
	return nil
}

func (x *State) GetDeployState() *DeployState {
	if x != nil {
		return x.DeployState
	}
	return nil
}

func (x *State) GetForwardedPorts() map[int32]*PortForwardEvent {
	if x != nil {
		return x.ForwardedPorts
	}
	return nil
}

func (x *State) GetStatusCheckState() *StatusCheckState {
	if x != nil {
		return x.StatusCheckState
	}
	return nil
}

func (x *State) GetFileSyncState() *FileSyncState {
	if x != nil {
		return x.FileSyncState
	}
	return nil
}

func (x *State) GetDebuggingContainers() []*DebuggingContainerState {
	if x != nil {
		return x.DebuggingContainers
	}
	return nil
}

func (x *State) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *State) GetTestState() *TestState {
	if x != nil {
		return x.TestState
	}
	return nil
}

func (x *State) GetRenderState() *RenderState {
	if x != nil {
		return x.RenderState
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build  *BuildMetadata  `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	Deploy *DeployMetadata `protobuf:"bytes,2,opt,name=deploy,proto3" json:"deploy,omitempty"`
	Test   *TestMetadata   `protobuf:"bytes,3,opt,name=test,proto3" json:"test,omitempty"`
	RunID  string          `protobuf:"bytes,4,opt,name=runID,proto3" json:"runID,omitempty"`
	Render *RenderMetadata `protobuf:"bytes,5,opt,name=render,proto3" json:"render,omitempty"`
	// Additional key value pairs to describe the build pipeline
	Additional map[string]string `protobuf:"bytes,99,rep,name=additional,proto3" json:"additional,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetBuild() *BuildMetadata {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *Metadata) GetDeploy() *DeployMetadata {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *Metadata) GetTest() *TestMetadata {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *Metadata) GetRunID() string {
	if x != nil {
		return x.RunID
	}
	return ""
}

func (x *Metadata) GetRender() *RenderMetadata {
	if x != nil {
		return x.Render
	}
	return nil
}

func (x *Metadata) GetAdditional() map[string]string {
	if x != nil {
		return x.Additional
	}
	return nil
}

type BuildMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifacts []*BuildMetadata_Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	Type      enums.BuildType           `protobuf:"varint,2,opt,name=type,proto3,enum=proto.enums.BuildType" json:"type,omitempty"`
	// Additional key value pairs to describe the build pipeline
	Additional map[string]string `protobuf:"bytes,99,rep,name=additional,proto3" json:"additional,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BuildMetadata) Reset() {
	*x = BuildMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetadata) ProtoMessage() {}

func (x *BuildMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetadata.ProtoReflect.Descriptor instead.
func (*BuildMetadata) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{5}
}

func (x *BuildMetadata) GetArtifacts() []*BuildMetadata_Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *BuildMetadata) GetType() enums.BuildType {
	if x != nil {
		return x.Type
	}
	return enums.BuildType_UNKNOWN_BUILD_TYPE
}

func (x *BuildMetadata) GetAdditional() map[string]string {
	if x != nil {
		return x.Additional
	}
	return nil
}

// TestMetadata describes the test pipeline
type TestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Testers []*TestMetadata_Tester `protobuf:"bytes,1,rep,name=Testers,proto3" json:"Testers,omitempty"`
}

func (x *TestMetadata) Reset() {
	*x = TestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMetadata) ProtoMessage() {}

func (x *TestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMetadata.ProtoReflect.Descriptor instead.
func (*TestMetadata) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{6}
}

func (x *TestMetadata) GetTesters() []*TestMetadata_Tester {
	if x != nil {
		return x.Testers
	}
	return nil
}

// RenderMetadata describes the render pipeline
type RenderMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Renderers []*RenderMetadata_Renderer `protobuf:"bytes,1,rep,name=Renderers,proto3" json:"Renderers,omitempty"`
}

func (x *RenderMetadata) Reset() {
	*x = RenderMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderMetadata) ProtoMessage() {}

func (x *RenderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderMetadata.ProtoReflect.Descriptor instead.
func (*RenderMetadata) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{7}
}

func (x *RenderMetadata) GetRenderers() []*RenderMetadata_Renderer {
	if x != nil {
		return x.Renderers
	}
	return nil
}

type DeployMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployers []*DeployMetadata_Deployer `protobuf:"bytes,1,rep,name=deployers,proto3" json:"deployers,omitempty"`
	Cluster   enums.ClusterType          `protobuf:"varint,2,opt,name=cluster,proto3,enum=proto.enums.ClusterType" json:"cluster,omitempty"`
}

func (x *DeployMetadata) Reset() {
	*x = DeployMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployMetadata) ProtoMessage() {}

func (x *DeployMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployMetadata.ProtoReflect.Descriptor instead.
func (*DeployMetadata) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{8}
}

func (x *DeployMetadata) GetDeployers() []*DeployMetadata_Deployer {
	if x != nil {
		return x.Deployers
	}
	return nil
}

func (x *DeployMetadata) GetCluster() enums.ClusterType {
	if x != nil {
		return x.Cluster
	}
	return enums.ClusterType_UNKNOWN_CLUSTER_TYPE
}

// `BuildState` maps Skaffold artifacts to their current build states
type BuildState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of `artifact name -> build-state`.
	// Artifact name is defined in the `skaffold.yaml`.
	// The `build-state` can be: <br>
	// - `"NotStarted"`: not yet started <br>
	// - `"InProgress"`: build started <br>
	// - `"Complete"`: build succeeded <br>
	// - `"Failed"`: build failed
	Artifacts   map[string]string `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AutoTrigger bool              `protobuf:"varint,2,opt,name=autoTrigger,proto3" json:"autoTrigger,omitempty"`
	StatusCode  enums.StatusCode  `protobuf:"varint,3,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
}

func (x *BuildState) Reset() {
	*x = BuildState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildState) ProtoMessage() {}

func (x *BuildState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildState.ProtoReflect.Descriptor instead.
func (*BuildState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{9}
}

func (x *BuildState) GetArtifacts() map[string]string {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *BuildState) GetAutoTrigger() bool {
	if x != nil {
		return x.AutoTrigger
	}
	return false
}

func (x *BuildState) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

// `TestState` describes the current state of the test
type TestState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the current test
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Teststate status code
	StatusCode enums.StatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
}

func (x *TestState) Reset() {
	*x = TestState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestState) ProtoMessage() {}

func (x *TestState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestState.ProtoReflect.Descriptor instead.
func (*TestState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{10}
}

func (x *TestState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestState) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

// `RenderState` describes the current state of the render
type RenderState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the current render
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Renderstate status code
	StatusCode enums.StatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
}

func (x *RenderState) Reset() {
	*x = RenderState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderState) ProtoMessage() {}

func (x *RenderState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderState.ProtoReflect.Descriptor instead.
func (*RenderState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{11}
}

func (x *RenderState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RenderState) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

// `DeployState` describes the status of the current deploy
type DeployState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AutoTrigger bool             `protobuf:"varint,2,opt,name=autoTrigger,proto3" json:"autoTrigger,omitempty"`
	StatusCode  enums.StatusCode `protobuf:"varint,3,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
}

func (x *DeployState) Reset() {
	*x = DeployState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployState) ProtoMessage() {}

func (x *DeployState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployState.ProtoReflect.Descriptor instead.
func (*DeployState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{12}
}

func (x *DeployState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeployState) GetAutoTrigger() bool {
	if x != nil {
		return x.AutoTrigger
	}
	return false
}

func (x *DeployState) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

// `StatusCheckState` describes the state of status check of current deployed resources.
type StatusCheckState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// A map of `resource name -> status-check-state`. Where `resource-name` is the kubernetes resource name.
	// The `status-check-state` can be <br>
	// - `"NotStarted"`: indicates that `status-check` has just started. <br>
	// - `"InProgress"`: InProgress is sent after every resource check is complete. <br>
	// - `"Succeeded"`:
	// - `"Failed"`:
	Resources map[string]string `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// StatusCheck statusCode
	StatusCode enums.StatusCode `protobuf:"varint,3,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
}

func (x *StatusCheckState) Reset() {
	*x = StatusCheckState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCheckState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCheckState) ProtoMessage() {}

func (x *StatusCheckState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCheckState.ProtoReflect.Descriptor instead.
func (*StatusCheckState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{13}
}

func (x *StatusCheckState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusCheckState) GetResources() map[string]string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *StatusCheckState) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

// `FileSyncState` contains the status of the current file sync
type FileSyncState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AutoTrigger bool   `protobuf:"varint,2,opt,name=autoTrigger,proto3" json:"autoTrigger,omitempty"`
}

func (x *FileSyncState) Reset() {
	*x = FileSyncState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSyncState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSyncState) ProtoMessage() {}

func (x *FileSyncState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSyncState.ProtoReflect.Descriptor instead.
func (*FileSyncState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{14}
}

func (x *FileSyncState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FileSyncState) GetAutoTrigger() bool {
	if x != nil {
		return x.AutoTrigger
	}
	return false
}

// `Event` describes an event in the Skaffold process.
// It is a wrapper on the top of other events like MetaEvent, BuildEvent, TestEvent, DeployEvent, PortEvent, StatusCheckEvent, ResourceStatusCheckEvent, FileSyncEvent, or DebuggingContainerEvent.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specversion     string                 `protobuf:"bytes,2,opt,name=specversion,proto3" json:"specversion,omitempty"`
	Type            string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Source          string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Id              string                 `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Time            *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	Data            *anypb.Any             `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Datacontenttype string                 `protobuf:"bytes,8,opt,name=datacontenttype,proto3" json:"datacontenttype,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{15}
}

func (x *Event) GetSpecversion() string {
	if x != nil {
		return x.Specversion
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Event) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetDatacontenttype() string {
	if x != nil {
		return x.Datacontenttype
	}
	return ""
}

// `TerminationEvent` marks the end of the skaffold session
type TerminationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // status oneof: Completed or Failed
	Err    *ActionableErr `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`       // actionable error message
}

func (x *TerminationEvent) Reset() {
	*x = TerminationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminationEvent) ProtoMessage() {}

func (x *TerminationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminationEvent.ProtoReflect.Descriptor instead.
func (*TerminationEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{16}
}

func (x *TerminationEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TerminationEvent) GetErr() *ActionableErr {
	if x != nil {
		return x.Err
	}
	return nil
}

// `ActionableErr` defines an error that occurred along with an optional list of suggestions
type ActionableErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode     enums.StatusCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=proto.enums.StatusCode" json:"errCode,omitempty"` // error code representing the error
	Message     string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                              // message describing the error.
	Suggestions []*Suggestion    `protobuf:"bytes,3,rep,name=suggestions,proto3" json:"suggestions,omitempty"`                      // list of suggestions
}

func (x *ActionableErr) Reset() {
	*x = ActionableErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionableErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionableErr) ProtoMessage() {}

func (x *ActionableErr) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionableErr.ProtoReflect.Descriptor instead.
func (*ActionableErr) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{17}
}

func (x *ActionableErr) GetErrCode() enums.StatusCode {
	if x != nil {
		return x.ErrCode
	}
	return enums.StatusCode_OK
}

func (x *ActionableErr) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ActionableErr) GetSuggestions() []*Suggestion {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// `MetaEvent` provides general information regarding Skaffold
type MetaEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry    string    `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`       // entry, for example: `"Starting Skaffold: {Version:v0.39.0-16-g5bb7c9e0 ConfigVersion:skaffold/v1 GitVersion: GitCommit:5bb7c9e078e4d522a5ffc42a2f1274fd17d75902 GitTreeState:dirty BuildDate01:29Z GoVersion:go1.13rc1 Compiler:gc Platform:linux/amd64}"`
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"` // Metadata describing skaffold pipeline
}

func (x *MetaEvent) Reset() {
	*x = MetaEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaEvent) ProtoMessage() {}

func (x *MetaEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaEvent.ProtoReflect.Descriptor instead.
func (*MetaEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{18}
}

func (x *MetaEvent) GetEntry() string {
	if x != nil {
		return x.Entry
	}
	return ""
}

func (x *MetaEvent) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// `SkaffoldLogEvent` represents a piece of output that comes from a skaffold run, for example: "Generating tags...", "Step 1/3 : FROM gcr.io/distroless/base"
type SkaffoldLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId    string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`          // id of the task of skaffold that this log came from
	SubtaskId string `protobuf:"bytes,2,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"` // id of the subtask that the log came from
	// string origin = 3; // REMOVED: which tool the output came from ex: skaffold, docker
	Level   enums.LogLevel `protobuf:"varint,4,opt,name=level,proto3,enum=proto.enums.LogLevel" json:"level,omitempty"` // log level
	Message string         `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                        // contents of the log
}

func (x *SkaffoldLogEvent) Reset() {
	*x = SkaffoldLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkaffoldLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkaffoldLogEvent) ProtoMessage() {}

func (x *SkaffoldLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkaffoldLogEvent.ProtoReflect.Descriptor instead.
func (*SkaffoldLogEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{19}
}

func (x *SkaffoldLogEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SkaffoldLogEvent) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

func (x *SkaffoldLogEvent) GetLevel() enums.LogLevel {
	if x != nil {
		return x.Level
	}
	return enums.LogLevel_DEBUG
}

func (x *SkaffoldLogEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// `ApplicationLogEvent` represents a log that comes from one of the pods running in the user's application.
type ApplicationLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName        string `protobuf:"bytes,1,opt,name=containerName,proto3" json:"containerName,omitempty"` // container that the log came from
	PodName              string `protobuf:"bytes,2,opt,name=podName,proto3" json:"podName,omitempty"`             // pod that the log came from
	Prefix               string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Message              string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                           // contents of the log
	RichFormattedMessage string `protobuf:"bytes,5,opt,name=richFormattedMessage,proto3" json:"richFormattedMessage,omitempty"` // full message that skaffold writes, with format and color
}

func (x *ApplicationLogEvent) Reset() {
	*x = ApplicationLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationLogEvent) ProtoMessage() {}

func (x *ApplicationLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationLogEvent.ProtoReflect.Descriptor instead.
func (*ApplicationLogEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{20}
}

func (x *ApplicationLogEvent) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ApplicationLogEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ApplicationLogEvent) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ApplicationLogEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApplicationLogEvent) GetRichFormattedMessage() string {
	if x != nil {
		return x.RichFormattedMessage
	}
	return ""
}

// `TaskStartedEvent` represent the started phase of a skaffold session.
// When a phase starts, an actionable error will be attached
type TaskStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // will be used by SkaffoldLog to link it to a task. Follows the form "{task_name}-{iteration-number}"
	Task          string         `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`                   // task name oneof: Tag, Build, Test, Deploy, StatusCheck, PortForward, DevLoop
	Description   string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`     // additional more descriptive text for the task
	Iteration     int32          `protobuf:"varint,4,opt,name=iteration,proto3" json:"iteration,omitempty"`        // which dev/debug iteration is currently running
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // artifact build status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *TaskStartedEvent) Reset() {
	*x = TaskStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStartedEvent) ProtoMessage() {}

func (x *TaskStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStartedEvent.ProtoReflect.Descriptor instead.
func (*TaskStartedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{21}
}

func (x *TaskStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskStartedEvent) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskStartedEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskStartedEvent) GetIteration() int32 {
	if x != nil {
		return x.Iteration
	}
	return 0
}

func (x *TaskStartedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskStartedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `TaskCompletedEvent` represent the event which is triggered when Task is completed.
// If a phase completed, an actionable error will be attached
type TaskCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // will be used by SkaffoldLog to link it to a task. Follows the form "{task_name}-{iteration-number}"
	Task          string         `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`                   // task name oneof: Tag, Build, Test, Deploy, StatusCheck, PortForward, DevLoop
	Description   string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`     // additional more descriptive text for the task
	Iteration     int32          `protobuf:"varint,4,opt,name=iteration,proto3" json:"iteration,omitempty"`        // which dev/debug iteration is currently running
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // artifact build status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *TaskCompletedEvent) Reset() {
	*x = TaskCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCompletedEvent) ProtoMessage() {}

func (x *TaskCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCompletedEvent.ProtoReflect.Descriptor instead.
func (*TaskCompletedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{22}
}

func (x *TaskCompletedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskCompletedEvent) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskCompletedEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskCompletedEvent) GetIteration() int32 {
	if x != nil {
		return x.Iteration
	}
	return 0
}

func (x *TaskCompletedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskCompletedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `TaskFailedEvent` represent the event which is triggered when Task is completed.
// If a phase fails, an actionable error will be attached
type TaskFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // will be used by SkaffoldLog to link it to a task. Follows the form "{task_name}-{iteration-number}"
	Task          string         `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`                   // task name oneof: Tag, Build, Test, Deploy, StatusCheck, PortForward, DevLoop
	Description   string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`     // additional more descriptive text for the task
	Iteration     int32          `protobuf:"varint,4,opt,name=iteration,proto3" json:"iteration,omitempty"`        // which dev/debug iteration is currently running
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // artifact build status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *TaskFailedEvent) Reset() {
	*x = TaskFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedEvent) ProtoMessage() {}

func (x *TaskFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailedEvent.ProtoReflect.Descriptor instead.
func (*TaskFailedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{23}
}

func (x *TaskFailedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskFailedEvent) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskFailedEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskFailedEvent) GetIteration() int32 {
	if x != nil {
		return x.Iteration
	}
	return 0
}

func (x *TaskFailedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskFailedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `BuildStartedEvent` describes the event that is triggered at the starting of the build
// When the build starts, an error will be attached to the event.
type BuildStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Artifact      string         `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`           // artifact name
	Step          string         `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`                   // which step of the build for the artifact oneof: Cache, Build, Push
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // artifact build status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *BuildStartedEvent) Reset() {
	*x = BuildStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildStartedEvent) ProtoMessage() {}

func (x *BuildStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildStartedEvent.ProtoReflect.Descriptor instead.
func (*BuildStartedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{24}
}

func (x *BuildStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BuildStartedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BuildStartedEvent) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *BuildStartedEvent) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *BuildStartedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BuildStartedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `BuildFailedEvent` describes the event that is triggered when the build fails
// If the build fails, an error will be attached to the event.
type BuildFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Artifact      string         `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`           // artifact name
	Step          string         `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`                   // which step of the build for the artifact oneof: Cache, Build, Push
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // artifact build status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *BuildFailedEvent) Reset() {
	*x = BuildFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildFailedEvent) ProtoMessage() {}

func (x *BuildFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildFailedEvent.ProtoReflect.Descriptor instead.
func (*BuildFailedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{25}
}

func (x *BuildFailedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BuildFailedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BuildFailedEvent) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *BuildFailedEvent) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *BuildFailedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BuildFailedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `BuildSucceededEvent` describes the event that is triggered at the build is completed successfully
// If the build succeeded, an error will be attached to the event.
type BuildSucceededEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Artifact      string         `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`           // artifact name
	Step          string         `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`                   // which step of the build for the artifact oneof: Cache, Build, Push
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // artifact build status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *BuildSucceededEvent) Reset() {
	*x = BuildSucceededEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildSucceededEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildSucceededEvent) ProtoMessage() {}

func (x *BuildSucceededEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildSucceededEvent.ProtoReflect.Descriptor instead.
func (*BuildSucceededEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{26}
}

func (x *BuildSucceededEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BuildSucceededEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BuildSucceededEvent) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *BuildSucceededEvent) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *BuildSucceededEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BuildSucceededEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `BuildCancelledEvent` describes the event that is triggered when Build is cancelled
// If the build is cancelled, an error will be attached to the event.
type BuildCancelledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Artifact      string         `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`           // artifact name
	Step          string         `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`                   // which step of the build for the artifact oneof: Cache, Build, Push
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // artifact build status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *BuildCancelledEvent) Reset() {
	*x = BuildCancelledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildCancelledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCancelledEvent) ProtoMessage() {}

func (x *BuildCancelledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCancelledEvent.ProtoReflect.Descriptor instead.
func (*BuildCancelledEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{27}
}

func (x *BuildCancelledEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BuildCancelledEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BuildCancelledEvent) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *BuildCancelledEvent) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *BuildCancelledEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BuildCancelledEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `TestFailedEvent` represents the event that is triggered when Test fails, and is emitted by Skaffold
type TestFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // test status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *TestFailedEvent) Reset() {
	*x = TestFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFailedEvent) ProtoMessage() {}

func (x *TestFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFailedEvent.ProtoReflect.Descriptor instead.
func (*TestFailedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{28}
}

func (x *TestFailedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestFailedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TestFailedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestFailedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `TestFailedEvent` represents the event that is triggered when Test starts, and is emitted by Skaffold
type TestStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // test status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *TestStartedEvent) Reset() {
	*x = TestStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStartedEvent) ProtoMessage() {}

func (x *TestStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStartedEvent.ProtoReflect.Descriptor instead.
func (*TestStartedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{29}
}

func (x *TestStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestStartedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TestStartedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestStartedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `TestSucceededEvent` represents the event that is triggered when Test passes successfully, and is emitted by Skaffold
type TestSucceededEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // test status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *TestSucceededEvent) Reset() {
	*x = TestSucceededEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSucceededEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSucceededEvent) ProtoMessage() {}

func (x *TestSucceededEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSucceededEvent.ProtoReflect.Descriptor instead.
func (*TestSucceededEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{30}
}

func (x *TestSucceededEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestSucceededEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TestSucceededEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestSucceededEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `RenderStartedEvent` represents the renderer event that is triggered at the start of the event, and is emitted by Skaffold
type RenderStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // render status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *RenderStartedEvent) Reset() {
	*x = RenderStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderStartedEvent) ProtoMessage() {}

func (x *RenderStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderStartedEvent.ProtoReflect.Descriptor instead.
func (*RenderStartedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{31}
}

func (x *RenderStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RenderStartedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RenderStartedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RenderStartedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `RenderFailedEvent` represents the renderer event that is triggered when the renderer fails, and is emitted by Skaffold
type RenderFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // render status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *RenderFailedEvent) Reset() {
	*x = RenderFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderFailedEvent) ProtoMessage() {}

func (x *RenderFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderFailedEvent.ProtoReflect.Descriptor instead.
func (*RenderFailedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{32}
}

func (x *RenderFailedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RenderFailedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RenderFailedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RenderFailedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `RenderSucceededEvent` represents the renderer event that is triggered when the renderer succeeded, and is emitted by Skaffold
type RenderSucceededEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // render status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *RenderSucceededEvent) Reset() {
	*x = RenderSucceededEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderSucceededEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderSucceededEvent) ProtoMessage() {}

func (x *RenderSucceededEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderSucceededEvent.ProtoReflect.Descriptor instead.
func (*RenderSucceededEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{33}
}

func (x *RenderSucceededEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RenderSucceededEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RenderSucceededEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RenderSucceededEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `DeployStartedEvent` represents the event that is triggered at the start of deploy, and is emitted by Skaffold
type DeployStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // deployment status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *DeployStartedEvent) Reset() {
	*x = DeployStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployStartedEvent) ProtoMessage() {}

func (x *DeployStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployStartedEvent.ProtoReflect.Descriptor instead.
func (*DeployStartedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{34}
}

func (x *DeployStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeployStartedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeployStartedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeployStartedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `DeployFailedEvent` represents the event that is triggered when the deploy fails, and is emitted by Skaffold
type DeployFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // deployment status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *DeployFailedEvent) Reset() {
	*x = DeployFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployFailedEvent) ProtoMessage() {}

func (x *DeployFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployFailedEvent.ProtoReflect.Descriptor instead.
func (*DeployFailedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{35}
}

func (x *DeployFailedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeployFailedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeployFailedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeployFailedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// `DeploySucceededEvent` represents the event that is triggered when the deploy succeeded, and is emitted by Skaffold
type DeploySucceededEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Status        string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`               // deployment status oneof: InProgress, Completed, Failed
	ActionableErr *ActionableErr `protobuf:"bytes,4,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *DeploySucceededEvent) Reset() {
	*x = DeploySucceededEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploySucceededEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploySucceededEvent) ProtoMessage() {}

func (x *DeploySucceededEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploySucceededEvent.ProtoReflect.Descriptor instead.
func (*DeploySucceededEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{36}
}

func (x *DeploySucceededEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeploySucceededEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeploySucceededEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeploySucceededEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// StatusCheckStartedEvent indicates starts of each kubernetes deployment.
type StatusCheckStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string           `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Resource      string           `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`           // id of the subtask which will be used in SkaffoldLog
	Status        string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`               // id of the task of skaffold that this event came from
	Message       string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	StatusCode    enums.StatusCode `protobuf:"varint,6,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
	ActionableErr *ActionableErr   `protobuf:"bytes,7,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *StatusCheckStartedEvent) Reset() {
	*x = StatusCheckStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCheckStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCheckStartedEvent) ProtoMessage() {}

func (x *StatusCheckStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCheckStartedEvent.ProtoReflect.Descriptor instead.
func (*StatusCheckStartedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{37}
}

func (x *StatusCheckStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusCheckStartedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *StatusCheckStartedEvent) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *StatusCheckStartedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusCheckStartedEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusCheckStartedEvent) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

func (x *StatusCheckStartedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// StatusCheckStartedEvent indicates the failure of each kubernetes deployment.
// Skaffold polls for resource status every 0.5 second. If the resource status changes to “Failed”
// will be sent with the new status.
type StatusCheckFailedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string           `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Resource      string           `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`           // id of the subtask which will be used in SkaffoldLog
	Status        string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`               // id of the task of skaffold that this event came from
	Message       string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	StatusCode    enums.StatusCode `protobuf:"varint,6,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
	ActionableErr *ActionableErr   `protobuf:"bytes,7,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *StatusCheckFailedEvent) Reset() {
	*x = StatusCheckFailedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCheckFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCheckFailedEvent) ProtoMessage() {}

func (x *StatusCheckFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCheckFailedEvent.ProtoReflect.Descriptor instead.
func (*StatusCheckFailedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{38}
}

func (x *StatusCheckFailedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusCheckFailedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *StatusCheckFailedEvent) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *StatusCheckFailedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusCheckFailedEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusCheckFailedEvent) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

func (x *StatusCheckFailedEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// StatusCheckSucceededEvent indicates the successful completion of each kubernetes deployment.
// Skaffold polls for resource status every 0.5 second. If the status changes to "Successeed"
// will be sent with the new status.
type StatusCheckSucceededEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string           `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	Resource      string           `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`           // id of the subtask which will be used in SkaffoldLog
	Status        string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`               // id of the task of skaffold that this event came from
	Message       string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	StatusCode    enums.StatusCode `protobuf:"varint,6,opt,name=statusCode,proto3,enum=proto.enums.StatusCode" json:"statusCode,omitempty"`
	ActionableErr *ActionableErr   `protobuf:"bytes,7,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *StatusCheckSucceededEvent) Reset() {
	*x = StatusCheckSucceededEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCheckSucceededEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCheckSucceededEvent) ProtoMessage() {}

func (x *StatusCheckSucceededEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCheckSucceededEvent.ProtoReflect.Descriptor instead.
func (*StatusCheckSucceededEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{39}
}

func (x *StatusCheckSucceededEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusCheckSucceededEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *StatusCheckSucceededEvent) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *StatusCheckSucceededEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusCheckSucceededEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusCheckSucceededEvent) GetStatusCode() enums.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return enums.StatusCode_OK
}

func (x *StatusCheckSucceededEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

// PortForwardEvent Event describes each port forwarding event.
type PortForwardEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string       `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	LocalPort     int32        `protobuf:"varint,3,opt,name=localPort,proto3" json:"localPort,omitempty"`        // local port for forwarded resource
	PodName       string       `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`             // pod name if port forwarded resourceType is Pod
	ContainerName string       `protobuf:"bytes,5,opt,name=containerName,proto3" json:"containerName,omitempty"` // container name if specified in the kubernetes spec
	Namespace     string       `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`         // the namespace of the resource to port forward.
	PortName      string       `protobuf:"bytes,7,opt,name=portName,proto3" json:"portName,omitempty"`
	ResourceType  string       `protobuf:"bytes,8,opt,name=resourceType,proto3" json:"resourceType,omitempty"` // resource type e.g. "pod", "service".
	ResourceName  string       `protobuf:"bytes,9,opt,name=resourceName,proto3" json:"resourceName,omitempty"` // name of the resource to forward.
	Address       string       `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`          // address on which to bind
	TargetPort    *IntOrString `protobuf:"bytes,11,opt,name=targetPort,proto3" json:"targetPort,omitempty"`    // target port is the resource port that will be forwarded.
}

func (x *PortForwardEvent) Reset() {
	*x = PortForwardEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardEvent) ProtoMessage() {}

func (x *PortForwardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardEvent.ProtoReflect.Descriptor instead.
func (*PortForwardEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{40}
}

func (x *PortForwardEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PortForwardEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PortForwardEvent) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *PortForwardEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *PortForwardEvent) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *PortForwardEvent) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PortForwardEvent) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *PortForwardEvent) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PortForwardEvent) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *PortForwardEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PortForwardEvent) GetTargetPort() *IntOrString {
	if x != nil {
		return x.TargetPort
	}
	return nil
}

// FileSyncEvent describes the sync status.
type FileSyncEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // id of the subtask which will be used in SkaffoldLog
	TaskId        string         `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // id of the task of skaffold that this event came from
	FileCount     int32          `protobuf:"varint,3,opt,name=fileCount,proto3" json:"fileCount,omitempty"`        // number of files synced
	Image         string         `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`                 // the container image to which files are sycned.
	Status        string         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`               // status of file sync. one of: Not Started, InProgress, Succeeded, Failed.
	ActionableErr *ActionableErr `protobuf:"bytes,6,opt,name=actionableErr,proto3" json:"actionableErr,omitempty"` // actionable error message
}

func (x *FileSyncEvent) Reset() {
	*x = FileSyncEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSyncEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSyncEvent) ProtoMessage() {}

func (x *FileSyncEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSyncEvent.ProtoReflect.Descriptor instead.
func (*FileSyncEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{41}
}

func (x *FileSyncEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileSyncEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *FileSyncEvent) GetFileCount() int32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

func (x *FileSyncEvent) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *FileSyncEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FileSyncEvent) GetActionableErr() *ActionableErr {
	if x != nil {
		return x.ActionableErr
	}
	return nil
}

type DebuggingContainerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                           // id of the subtask which will be used in SkaffoldLog
	TaskId        string            `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                                                     // id of the task of skaffold that this event came from
	Status        string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                                                                                   // the container status oneof: Started, Terminated
	PodName       string            `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`                                                                                                 // the pod name with the debugging container
	ContainerName string            `protobuf:"bytes,5,opt,name=containerName,proto3" json:"containerName,omitempty"`                                                                                     // the name of the container configured for debugging
	Namespace     string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                                             // the namespace of the debugging container
	Artifact      string            `protobuf:"bytes,7,opt,name=artifact,proto3" json:"artifact,omitempty"`                                                                                               // the corresponding artifact's image name
	Runtime       string            `protobuf:"bytes,8,opt,name=runtime,proto3" json:"runtime,omitempty"`                                                                                                 // the detected language runtime
	WorkingDir    string            `protobuf:"bytes,9,opt,name=workingDir,proto3" json:"workingDir,omitempty"`                                                                                           // the working directory in the container image
	DebugPorts    map[string]uint32 `protobuf:"bytes,10,rep,name=debugPorts,proto3" json:"debugPorts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // the exposed debugging-related ports
}

func (x *DebuggingContainerState) Reset() {
	*x = DebuggingContainerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggingContainerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggingContainerState) ProtoMessage() {}

func (x *DebuggingContainerState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggingContainerState.ProtoReflect.Descriptor instead.
func (*DebuggingContainerState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{42}
}

func (x *DebuggingContainerState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DebuggingContainerState) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DebuggingContainerState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DebuggingContainerState) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *DebuggingContainerState) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DebuggingContainerState) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DebuggingContainerState) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *DebuggingContainerState) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *DebuggingContainerState) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *DebuggingContainerState) GetDebugPorts() map[string]uint32 {
	if x != nil {
		return x.DebugPorts
	}
	return nil
}

// DebuggingContainerEvent is raised when a debugging container is started
type DebuggingContainerStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                           // id of the subtask which will be used in SkaffoldLog
	TaskId        string            `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                                                     // id of the task of skaffold that this event came from
	Status        string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                                                                                   // the container status oneof: Started, Terminated
	PodName       string            `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`                                                                                                 // the pod name with the debugging container
	ContainerName string            `protobuf:"bytes,5,opt,name=containerName,proto3" json:"containerName,omitempty"`                                                                                     // the name of the container configured for debugging
	Namespace     string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                                             // the namespace of the debugging container
	Artifact      string            `protobuf:"bytes,7,opt,name=artifact,proto3" json:"artifact,omitempty"`                                                                                               // the corresponding artifact's image name
	Runtime       string            `protobuf:"bytes,8,opt,name=runtime,proto3" json:"runtime,omitempty"`                                                                                                 // the detected language runtime
	WorkingDir    string            `protobuf:"bytes,9,opt,name=workingDir,proto3" json:"workingDir,omitempty"`                                                                                           // the working directory in the container image
	DebugPorts    map[string]uint32 `protobuf:"bytes,10,rep,name=debugPorts,proto3" json:"debugPorts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // the exposed debugging-related ports
}

func (x *DebuggingContainerStartedEvent) Reset() {
	*x = DebuggingContainerStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggingContainerStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggingContainerStartedEvent) ProtoMessage() {}

func (x *DebuggingContainerStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggingContainerStartedEvent.ProtoReflect.Descriptor instead.
func (*DebuggingContainerStartedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{43}
}

func (x *DebuggingContainerStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *DebuggingContainerStartedEvent) GetDebugPorts() map[string]uint32 {
	if x != nil {
		return x.DebugPorts
	}
	return nil
}

// DebuggingContainerTerminatedEvent is raised when a debugging container is terminated
type DebuggingContainerTerminatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                           // id of the subtask which will be used in SkaffoldLog
	TaskId        string            `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                                                     // id of the task of skaffold that this event came from
	Status        string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                                                                                   // the container status oneof: Started, Terminated
	PodName       string            `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`                                                                                                 // the pod name with the debugging container
	ContainerName string            `protobuf:"bytes,5,opt,name=containerName,proto3" json:"containerName,omitempty"`                                                                                     // the name of the container configured for debugging
	Namespace     string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                                             // the namespace of the debugging container
	Artifact      string            `protobuf:"bytes,7,opt,name=artifact,proto3" json:"artifact,omitempty"`                                                                                               // the corresponding artifact's image name
	Runtime       string            `protobuf:"bytes,8,opt,name=runtime,proto3" json:"runtime,omitempty"`                                                                                                 // the detected language runtime
	WorkingDir    string            `protobuf:"bytes,9,opt,name=workingDir,proto3" json:"workingDir,omitempty"`                                                                                           // the working directory in the container image
	DebugPorts    map[string]uint32 `protobuf:"bytes,10,rep,name=debugPorts,proto3" json:"debugPorts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // the exposed debugging-related ports
}

func (x *DebuggingContainerTerminatedEvent) Reset() {
	*x = DebuggingContainerTerminatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggingContainerTerminatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggingContainerTerminatedEvent) ProtoMessage() {}

func (x *DebuggingContainerTerminatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggingContainerTerminatedEvent.ProtoReflect.Descriptor instead.
func (*DebuggingContainerTerminatedEvent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{44}
}

func (x *DebuggingContainerTerminatedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *DebuggingContainerTerminatedEvent) GetDebugPorts() map[string]uint32 {
	if x != nil {
		return x.DebugPorts
	}
	return nil
}

type UserIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intent *Intent `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
}

func (x *UserIntentRequest) Reset() {
	*x = UserIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIntentRequest) ProtoMessage() {}

func (x *UserIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIntentRequest.ProtoReflect.Descriptor instead.
func (*UserIntentRequest) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{45}
}

func (x *UserIntentRequest) GetIntent() *Intent {
	if x != nil {
		return x.Intent
	}
	return nil
}

type TriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *TriggerState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TriggerRequest) Reset() {
	*x = TriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRequest) ProtoMessage() {}

func (x *TriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRequest.ProtoReflect.Descriptor instead.
func (*TriggerRequest) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{46}
}

func (x *TriggerRequest) GetState() *TriggerState {
	if x != nil {
		return x.State
	}
	return nil
}

// TriggerState represents trigger state for a given phase.
type TriggerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//	*TriggerState_Enabled
	Val isTriggerState_Val `protobuf_oneof:"val"`
}

func (x *TriggerState) Reset() {
	*x = TriggerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerState) ProtoMessage() {}

func (x *TriggerState) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerState.ProtoReflect.Descriptor instead.
func (*TriggerState) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{47}
}

func (m *TriggerState) GetVal() isTriggerState_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *TriggerState) GetEnabled() bool {
	if x, ok := x.GetVal().(*TriggerState_Enabled); ok {
		return x.Enabled
	}
	return false
}

type isTriggerState_Val interface {
	isTriggerState_Val()
}

type TriggerState_Enabled struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof"` // enable or disable a trigger state
}

func (*TriggerState_Enabled) isTriggerState_Val() {}

// Intent represents user intents for a given phase.
type Intent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build  bool `protobuf:"varint,1,opt,name=build,proto3" json:"build,omitempty"`   // in case skaffold dev is ran with autoBuild=false, a build intent enables building once
	Sync   bool `protobuf:"varint,2,opt,name=sync,proto3" json:"sync,omitempty"`     // in case skaffold dev is ran with autoSync=false, a sync intent enables file sync once
	Deploy bool `protobuf:"varint,3,opt,name=deploy,proto3" json:"deploy,omitempty"` // in case skaffold dev is ran with autoDeploy=false, a deploy intent enables deploys once
}

func (x *Intent) Reset() {
	*x = Intent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{48}
}

func (x *Intent) GetBuild() bool {
	if x != nil {
		return x.Build
	}
	return false
}

func (x *Intent) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *Intent) GetDeploy() bool {
	if x != nil {
		return x.Deploy
	}
	return false
}

// Suggestion defines the action a user needs to recover from an error.
type Suggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuggestionCode enums.SuggestionCode `protobuf:"varint,1,opt,name=suggestionCode,proto3,enum=proto.enums.SuggestionCode" json:"suggestionCode,omitempty"` // code representing a suggestion
	Action         string               `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`                                                  // action represents the suggestion action
}

func (x *Suggestion) Reset() {
	*x = Suggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suggestion) ProtoMessage() {}

func (x *Suggestion) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suggestion.ProtoReflect.Descriptor instead.
func (*Suggestion) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{49}
}

func (x *Suggestion) GetSuggestionCode() enums.SuggestionCode {
	if x != nil {
		return x.SuggestionCode
	}
	return enums.SuggestionCode_NIL
}

func (x *Suggestion) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// IntOrString is a type that can hold an int32 or a string.
type IntOrString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`     // type of stored value
	IntVal int32  `protobuf:"varint,2,opt,name=intVal,proto3" json:"intVal,omitempty"` // int value
	StrVal string `protobuf:"bytes,3,opt,name=strVal,proto3" json:"strVal,omitempty"`  // string value
}

func (x *IntOrString) Reset() {
	*x = IntOrString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntOrString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntOrString) ProtoMessage() {}

func (x *IntOrString) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntOrString.ProtoReflect.Descriptor instead.
func (*IntOrString) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{50}
}

func (x *IntOrString) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IntOrString) GetIntVal() int32 {
	if x != nil {
		return x.IntVal
	}
	return 0
}

func (x *IntOrString) GetStrVal() string {
	if x != nil {
		return x.StrVal
	}
	return ""
}

type BuildMetadata_Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       enums.BuilderType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.enums.BuilderType" json:"type,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             // image name
	Context    string            `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`       // skaffold.yaml context field
	Dockerfile string            `protobuf:"bytes,4,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"` // skaffold.yaml path to dockerfile. Not guaranteed to be filled
}

func (x *BuildMetadata_Artifact) Reset() {
	*x = BuildMetadata_Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetadata_Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetadata_Artifact) ProtoMessage() {}

func (x *BuildMetadata_Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetadata_Artifact.ProtoReflect.Descriptor instead.
func (*BuildMetadata_Artifact) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BuildMetadata_Artifact) GetType() enums.BuilderType {
	if x != nil {
		return x.Type
	}
	return enums.BuilderType_UNKNOWN_BUILDER_TYPE
}

func (x *BuildMetadata_Artifact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuildMetadata_Artifact) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *BuildMetadata_Artifact) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

type TestMetadata_Tester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  enums.TesterType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.enums.TesterType" json:"type,omitempty"`
	Count int32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TestMetadata_Tester) Reset() {
	*x = TestMetadata_Tester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMetadata_Tester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMetadata_Tester) ProtoMessage() {}

func (x *TestMetadata_Tester) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMetadata_Tester.ProtoReflect.Descriptor instead.
func (*TestMetadata_Tester) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TestMetadata_Tester) GetType() enums.TesterType {
	if x != nil {
		return x.Type
	}
	return enums.TesterType_UNKNOWN_TEST_TYPE
}

func (x *TestMetadata_Tester) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RenderMetadata_Renderer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  enums.RenderType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.enums.RenderType" json:"type,omitempty"`
	Count int32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RenderMetadata_Renderer) Reset() {
	*x = RenderMetadata_Renderer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderMetadata_Renderer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderMetadata_Renderer) ProtoMessage() {}

func (x *RenderMetadata_Renderer) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderMetadata_Renderer.ProtoReflect.Descriptor instead.
func (*RenderMetadata_Renderer) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RenderMetadata_Renderer) GetType() enums.RenderType {
	if x != nil {
		return x.Type
	}
	return enums.RenderType_UNKNOWN_RENDER_TYPE
}

func (x *RenderMetadata_Renderer) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeployMetadata_Deployer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  enums.DeployerType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.enums.DeployerType" json:"type,omitempty"`
	Count int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeployMetadata_Deployer) Reset() {
	*x = DeployMetadata_Deployer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v3_skaffold_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployMetadata_Deployer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployMetadata_Deployer) ProtoMessage() {}

func (x *DeployMetadata_Deployer) ProtoReflect() protoreflect.Message {
	mi := &file_v3_skaffold_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployMetadata_Deployer.ProtoReflect.Descriptor instead.
func (*DeployMetadata_Deployer) Descriptor() ([]byte, []int) {
	return file_v3_skaffold_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DeployMetadata_Deployer) GetType() enums.DeployerType {
	if x != nil {
		return x.Type
	}
	return enums.DeployerType_UNKNOWN_DEPLOYER_TYPE
}

func (x *DeployMetadata_Deployer) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_v3_skaffold_proto protoreflect.FileDescriptor

var file_v3_skaffold_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x33, 0x2f, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x1c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x05, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x33, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2e,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x5d, 0x0a, 0x13, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x02, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c,
	0x03, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3e, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0x86, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01,
	0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37,
	0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x4b, 0x0a, 0x06, 0x54, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x52, 0x09, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x1a, 0x4d, 0x0a, 0x08, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72,
	0x52, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a,
	0x4f, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xe8, 0x01, 0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x3c, 0x0a,
	0x0e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x09, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xea, 0x01, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x22, 0xe9, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x55, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x51,
	0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xbb, 0x01, 0x0a, 0x13,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x69, 0x63, 0x68, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x69, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x10, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x0f,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x22, 0xc2, 0x01, 0x0a, 0x10, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0xc5, 0x01,
	0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x94,
	0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x93, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x22, 0x88, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x87, 0x02, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0x8a, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x4f, 0x72,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x22, 0xa0, 0x03, 0x0a, 0x17, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x51, 0x0a, 0x0a, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x03, 0x0a, 0x1e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x12, 0x58, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x33, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x03, 0x0a,
	0x21, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x5b, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x31, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x05,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x22, 0x69, 0x0a, 0x0a, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0b,
	0x49, 0x6e, 0x74, 0x4f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x32,
	0xdf, 0x05, 0x0a, 0x11, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x56, 0x33, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x30,
	0x01, 0x12, 0x5b, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x0b, 0x2f, 0x76, 0x33, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x3a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x64,
	0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x16, 0x2f, 0x76, 0x33, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x3a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x15, 0x2f, 0x76, 0x33, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x3a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x1a, 0x17, 0x2f, 0x76, 0x33, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x3a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x33,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x3a, 0x01,
	0x2a, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x50, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v3_skaffold_proto_rawDescOnce sync.Once
	file_v3_skaffold_proto_rawDescData = file_v3_skaffold_proto_rawDesc
)

func file_v3_skaffold_proto_rawDescGZIP() []byte {
	file_v3_skaffold_proto_rawDescOnce.Do(func() {
		file_v3_skaffold_proto_rawDescData = protoimpl.X.CompressGZIP(file_v3_skaffold_proto_rawDescData)
	})
	return file_v3_skaffold_proto_rawDescData
}

var file_v3_skaffold_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_v3_skaffold_proto_goTypes = []interface{}{
	(*StateResponse)(nil),                     // 0: proto.v3.StateResponse
	(*Response)(nil),                          // 1: proto.v3.Response
	(*Request)(nil),                           // 2: proto.v3.Request
	(*State)(nil),                             // 3: proto.v3.State
	(*Metadata)(nil),                          // 4: proto.v3.Metadata
	(*BuildMetadata)(nil),                     // 5: proto.v3.BuildMetadata
	(*TestMetadata)(nil),                      // 6: proto.v3.TestMetadata
	(*RenderMetadata)(nil),                    // 7: proto.v3.RenderMetadata
	(*DeployMetadata)(nil),                    // 8: proto.v3.DeployMetadata
	(*BuildState)(nil),                        // 9: proto.v3.BuildState
	(*TestState)(nil),                         // 10: proto.v3.TestState
	(*RenderState)(nil),                       // 11: proto.v3.RenderState
	(*DeployState)(nil),                       // 12: proto.v3.DeployState
	(*StatusCheckState)(nil),                  // 13: proto.v3.StatusCheckState
	(*FileSyncState)(nil),                     // 14: proto.v3.FileSyncState
	(*Event)(nil),                             // 15: proto.v3.Event
	(*TerminationEvent)(nil),                  // 16: proto.v3.TerminationEvent
	(*ActionableErr)(nil),                     // 17: proto.v3.ActionableErr
	(*MetaEvent)(nil),                         // 18: proto.v3.MetaEvent
	(*SkaffoldLogEvent)(nil),                  // 19: proto.v3.SkaffoldLogEvent
	(*ApplicationLogEvent)(nil),               // 20: proto.v3.ApplicationLogEvent
	(*TaskStartedEvent)(nil),                  // 21: proto.v3.TaskStartedEvent
	(*TaskCompletedEvent)(nil),                // 22: proto.v3.TaskCompletedEvent
	(*TaskFailedEvent)(nil),                   // 23: proto.v3.TaskFailedEvent
	(*BuildStartedEvent)(nil),                 // 24: proto.v3.BuildStartedEvent
	(*BuildFailedEvent)(nil),                  // 25: proto.v3.BuildFailedEvent
	(*BuildSucceededEvent)(nil),               // 26: proto.v3.BuildSucceededEvent
	(*BuildCancelledEvent)(nil),               // 27: proto.v3.BuildCancelledEvent
	(*TestFailedEvent)(nil),                   // 28: proto.v3.TestFailedEvent
	(*TestStartedEvent)(nil),                  // 29: proto.v3.TestStartedEvent
	(*TestSucceededEvent)(nil),                // 30: proto.v3.TestSucceededEvent
	(*RenderStartedEvent)(nil),                // 31: proto.v3.RenderStartedEvent
	(*RenderFailedEvent)(nil),                 // 32: proto.v3.RenderFailedEvent
	(*RenderSucceededEvent)(nil),              // 33: proto.v3.RenderSucceededEvent
	(*DeployStartedEvent)(nil),                // 34: proto.v3.DeployStartedEvent
	(*DeployFailedEvent)(nil),                 // 35: proto.v3.DeployFailedEvent
	(*DeploySucceededEvent)(nil),              // 36: proto.v3.DeploySucceededEvent
	(*StatusCheckStartedEvent)(nil),           // 37: proto.v3.StatusCheckStartedEvent
	(*StatusCheckFailedEvent)(nil),            // 38: proto.v3.StatusCheckFailedEvent
	(*StatusCheckSucceededEvent)(nil),         // 39: proto.v3.StatusCheckSucceededEvent
	(*PortForwardEvent)(nil),                  // 40: proto.v3.PortForwardEvent
	(*FileSyncEvent)(nil),                     // 41: proto.v3.FileSyncEvent
	(*DebuggingContainerState)(nil),           // 42: proto.v3.DebuggingContainerState
	(*DebuggingContainerStartedEvent)(nil),    // 43: proto.v3.DebuggingContainerStartedEvent
	(*DebuggingContainerTerminatedEvent)(nil), // 44: proto.v3.DebuggingContainerTerminatedEvent
	(*UserIntentRequest)(nil),                 // 45: proto.v3.UserIntentRequest
	(*TriggerRequest)(nil),                    // 46: proto.v3.TriggerRequest
	(*TriggerState)(nil),                      // 47: proto.v3.TriggerState
	(*Intent)(nil),                            // 48: proto.v3.Intent
	(*Suggestion)(nil),                        // 49: proto.v3.Suggestion
	(*IntOrString)(nil),                       // 50: proto.v3.IntOrString
	nil,                                       // 51: proto.v3.State.ForwardedPortsEntry
	nil,                                       // 52: proto.v3.Metadata.AdditionalEntry
	(*BuildMetadata_Artifact)(nil),            // 53: proto.v3.BuildMetadata.Artifact
	nil,                                       // 54: proto.v3.BuildMetadata.AdditionalEntry
	(*TestMetadata_Tester)(nil),               // 55: proto.v3.TestMetadata.Tester
	(*RenderMetadata_Renderer)(nil),           // 56: proto.v3.RenderMetadata.Renderer
	(*DeployMetadata_Deployer)(nil),           // 57: proto.v3.DeployMetadata.Deployer
	nil,                                       // 58: proto.v3.BuildState.ArtifactsEntry
	nil,                                       // 59: proto.v3.StatusCheckState.ResourcesEntry
	nil,                                       // 60: proto.v3.DebuggingContainerState.DebugPortsEntry
	nil,                                       // 61: proto.v3.DebuggingContainerStartedEvent.DebugPortsEntry
	nil,                                       // 62: proto.v3.DebuggingContainerTerminatedEvent.DebugPortsEntry
	(enums.BuildType)(0),                      // 63: proto.enums.BuildType
	(enums.ClusterType)(0),                    // 64: proto.enums.ClusterType
	(enums.StatusCode)(0),                     // 65: proto.enums.StatusCode
	(*timestamppb.Timestamp)(nil),             // 66: google.protobuf.Timestamp
	(*anypb.Any)(nil),                         // 67: google.protobuf.Any
	(enums.LogLevel)(0),                       // 68: proto.enums.LogLevel
	(enums.SuggestionCode)(0),                 // 69: proto.enums.SuggestionCode
	(enums.BuilderType)(0),                    // 70: proto.enums.BuilderType
	(enums.TesterType)(0),                     // 71: proto.enums.TesterType
	(enums.RenderType)(0),                     // 72: proto.enums.RenderType
	(enums.DeployerType)(0),                   // 73: proto.enums.DeployerType
	(*emptypb.Empty)(nil),                     // 74: google.protobuf.Empty
}
var file_v3_skaffold_proto_depIdxs = []int32{
	3,  // 0: proto.v3.StateResponse.state:type_name -> proto.v3.State
	9,  // 1: proto.v3.State.buildState:type_name -> proto.v3.BuildState
	12, // 2: proto.v3.State.deployState:type_name -> proto.v3.DeployState
	51, // 3: proto.v3.State.forwardedPorts:type_name -> proto.v3.State.ForwardedPortsEntry
	13, // 4: proto.v3.State.statusCheckState:type_name -> proto.v3.StatusCheckState
	14, // 5: proto.v3.State.fileSyncState:type_name -> proto.v3.FileSyncState
	42, // 6: proto.v3.State.debuggingContainers:type_name -> proto.v3.DebuggingContainerState
	4,  // 7: proto.v3.State.metadata:type_name -> proto.v3.Metadata
	10, // 8: proto.v3.State.testState:type_name -> proto.v3.TestState
	11, // 9: proto.v3.State.renderState:type_name -> proto.v3.RenderState
	5,  // 10: proto.v3.Metadata.build:type_name -> proto.v3.BuildMetadata
	8,  // 11: proto.v3.Metadata.deploy:type_name -> proto.v3.DeployMetadata
	6,  // 12: proto.v3.Metadata.test:type_name -> proto.v3.TestMetadata
	7,  // 13: proto.v3.Metadata.render:type_name -> proto.v3.RenderMetadata
	52, // 14: proto.v3.Metadata.additional:type_name -> proto.v3.Metadata.AdditionalEntry
	53, // 15: proto.v3.BuildMetadata.artifacts:type_name -> proto.v3.BuildMetadata.Artifact
	63, // 16: proto.v3.BuildMetadata.type:type_name -> proto.enums.BuildType
	54, // 17: proto.v3.BuildMetadata.additional:type_name -> proto.v3.BuildMetadata.AdditionalEntry
	55, // 18: proto.v3.TestMetadata.Testers:type_name -> proto.v3.TestMetadata.Tester
	56, // 19: proto.v3.RenderMetadata.Renderers:type_name -> proto.v3.RenderMetadata.Renderer
	57, // 20: proto.v3.DeployMetadata.deployers:type_name -> proto.v3.DeployMetadata.Deployer
	64, // 21: proto.v3.DeployMetadata.cluster:type_name -> proto.enums.ClusterType
	58, // 22: proto.v3.BuildState.artifacts:type_name -> proto.v3.BuildState.ArtifactsEntry
	65, // 23: proto.v3.BuildState.statusCode:type_name -> proto.enums.StatusCode
	65, // 24: proto.v3.TestState.statusCode:type_name -> proto.enums.StatusCode
	65, // 25: proto.v3.RenderState.statusCode:type_name -> proto.enums.StatusCode
	65, // 26: proto.v3.DeployState.statusCode:type_name -> proto.enums.StatusCode
	59, // 27: proto.v3.StatusCheckState.resources:type_name -> proto.v3.StatusCheckState.ResourcesEntry
	65, // 28: proto.v3.StatusCheckState.statusCode:type_name -> proto.enums.StatusCode
	66, // 29: proto.v3.Event.time:type_name -> google.protobuf.Timestamp
	67, // 30: proto.v3.Event.data:type_name -> google.protobuf.Any
	17, // 31: proto.v3.TerminationEvent.err:type_name -> proto.v3.ActionableErr
	65, // 32: proto.v3.ActionableErr.errCode:type_name -> proto.enums.StatusCode
	49, // 33: proto.v3.ActionableErr.suggestions:type_name -> proto.v3.Suggestion
	4,  // 34: proto.v3.MetaEvent.metadata:type_name -> proto.v3.Metadata
	68, // 35: proto.v3.SkaffoldLogEvent.level:type_name -> proto.enums.LogLevel
	17, // 36: proto.v3.TaskStartedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 37: proto.v3.TaskCompletedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 38: proto.v3.TaskFailedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 39: proto.v3.BuildStartedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 40: proto.v3.BuildFailedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 41: proto.v3.BuildSucceededEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 42: proto.v3.BuildCancelledEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 43: proto.v3.TestFailedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 44: proto.v3.TestStartedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 45: proto.v3.TestSucceededEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 46: proto.v3.RenderStartedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 47: proto.v3.RenderFailedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 48: proto.v3.RenderSucceededEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 49: proto.v3.DeployStartedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 50: proto.v3.DeployFailedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	17, // 51: proto.v3.DeploySucceededEvent.actionableErr:type_name -> proto.v3.ActionableErr
	65, // 52: proto.v3.StatusCheckStartedEvent.statusCode:type_name -> proto.enums.StatusCode
	17, // 53: proto.v3.StatusCheckStartedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	65, // 54: proto.v3.StatusCheckFailedEvent.statusCode:type_name -> proto.enums.StatusCode
	17, // 55: proto.v3.StatusCheckFailedEvent.actionableErr:type_name -> proto.v3.ActionableErr
	65, // 56: proto.v3.StatusCheckSucceededEvent.statusCode:type_name -> proto.enums.StatusCode
	17, // 57: proto.v3.StatusCheckSucceededEvent.actionableErr:type_name -> proto.v3.ActionableErr
	50, // 58: proto.v3.PortForwardEvent.targetPort:type_name -> proto.v3.IntOrString
	17, // 59: proto.v3.FileSyncEvent.actionableErr:type_name -> proto.v3.ActionableErr
	60, // 60: proto.v3.DebuggingContainerState.debugPorts:type_name -> proto.v3.DebuggingContainerState.DebugPortsEntry
	61, // 61: proto.v3.DebuggingContainerStartedEvent.debugPorts:type_name -> proto.v3.DebuggingContainerStartedEvent.DebugPortsEntry
	62, // 62: proto.v3.DebuggingContainerTerminatedEvent.debugPorts:type_name -> proto.v3.DebuggingContainerTerminatedEvent.DebugPortsEntry
	48, // 63: proto.v3.UserIntentRequest.intent:type_name -> proto.v3.Intent
	47, // 64: proto.v3.TriggerRequest.state:type_name -> proto.v3.TriggerState
	69, // 65: proto.v3.Suggestion.suggestionCode:type_name -> proto.enums.SuggestionCode
	40, // 66: proto.v3.State.ForwardedPortsEntry.value:type_name -> proto.v3.PortForwardEvent
	70, // 67: proto.v3.BuildMetadata.Artifact.type:type_name -> proto.enums.BuilderType
	71, // 68: proto.v3.TestMetadata.Tester.type:type_name -> proto.enums.TesterType
	72, // 69: proto.v3.RenderMetadata.Renderer.type:type_name -> proto.enums.RenderType
	73, // 70: proto.v3.DeployMetadata.Deployer.type:type_name -> proto.enums.DeployerType
	74, // 71: proto.v3.SkaffoldV3Service.GetState:input_type -> google.protobuf.Empty
	74, // 72: proto.v3.SkaffoldV3Service.Events:input_type -> google.protobuf.Empty
	74, // 73: proto.v3.SkaffoldV3Service.ApplicationLogs:input_type -> google.protobuf.Empty
	45, // 74: proto.v3.SkaffoldV3Service.Execute:input_type -> proto.v3.UserIntentRequest
	46, // 75: proto.v3.SkaffoldV3Service.AutoBuild:input_type -> proto.v3.TriggerRequest
	46, // 76: proto.v3.SkaffoldV3Service.AutoSync:input_type -> proto.v3.TriggerRequest
	46, // 77: proto.v3.SkaffoldV3Service.AutoDeploy:input_type -> proto.v3.TriggerRequest
	15, // 78: proto.v3.SkaffoldV3Service.Handle:input_type -> proto.v3.Event
	3,  // 79: proto.v3.SkaffoldV3Service.GetState:output_type -> proto.v3.State
	15, // 80: proto.v3.SkaffoldV3Service.Events:output_type -> proto.v3.Event
	15, // 81: proto.v3.SkaffoldV3Service.ApplicationLogs:output_type -> proto.v3.Event
	74, // 82: proto.v3.SkaffoldV3Service.Execute:output_type -> google.protobuf.Empty
	74, // 83: proto.v3.SkaffoldV3Service.AutoBuild:output_type -> google.protobuf.Empty
	74, // 84: proto.v3.SkaffoldV3Service.AutoSync:output_type -> google.protobuf.Empty
	74, // 85: proto.v3.SkaffoldV3Service.AutoDeploy:output_type -> google.protobuf.Empty
	74, // 86: proto.v3.SkaffoldV3Service.Handle:output_type -> google.protobuf.Empty
	79, // [79:87] is the sub-list for method output_type
	71, // [71:79] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_v3_skaffold_proto_init() }
func file_v3_skaffold_proto_init() {
	if File_v3_skaffold_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v3_skaffold_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCheckState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSyncState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionableErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkaffoldLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildSucceededEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildCancelledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSucceededEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderSucceededEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploySucceededEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCheckStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCheckFailedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCheckSucceededEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortForwardEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSyncEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggingContainerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggingContainerStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggingContainerTerminatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntOrString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetadata_Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMetadata_Tester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderMetadata_Renderer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v3_skaffold_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployMetadata_Deployer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v3_skaffold_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*TriggerState_Enabled)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v3_skaffold_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v3_skaffold_proto_goTypes,
		DependencyIndexes: file_v3_skaffold_proto_depIdxs,
		MessageInfos:      file_v3_skaffold_proto_msgTypes,
	}.Build()
	File_v3_skaffold_proto = out.File
	file_v3_skaffold_proto_rawDesc = nil
	file_v3_skaffold_proto_goTypes = nil
	file_v3_skaffold_proto_depIdxs = nil
}
