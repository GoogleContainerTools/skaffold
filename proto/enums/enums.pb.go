// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum indicating builders used
type BuilderType int32

const (
	// Could not determine builder type
	BuilderType_UNKNOWN_BUILDER_TYPE BuilderType = 0
	// JIB Builder
	BuilderType_JIB BuilderType = 1
	// Bazel Builder
	BuilderType_BAZEL BuilderType = 2
	// Buildpacks Builder
	BuilderType_BUILDPACKS BuilderType = 3
	// Custom Builder
	BuilderType_CUSTOM BuilderType = 4
	// Kaniko Builder
	BuilderType_KANIKO BuilderType = 5
	// Docker Builder
	BuilderType_DOCKER BuilderType = 6
)

// Enum value maps for BuilderType.
var (
	BuilderType_name = map[int32]string{
		0: "UNKNOWN_BUILDER_TYPE",
		1: "JIB",
		2: "BAZEL",
		3: "BUILDPACKS",
		4: "CUSTOM",
		5: "KANIKO",
		6: "DOCKER",
	}
	BuilderType_value = map[string]int32{
		"UNKNOWN_BUILDER_TYPE": 0,
		"JIB":                  1,
		"BAZEL":                2,
		"BUILDPACKS":           3,
		"CUSTOM":               4,
		"KANIKO":               5,
		"DOCKER":               6,
	}
)

func (x BuilderType) Enum() *BuilderType {
	p := new(BuilderType)
	*p = x
	return p
}

func (x BuilderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuilderType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (BuilderType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x BuilderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuilderType.Descriptor instead.
func (BuilderType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

// Enum indicating build type i.e. local, cluster vs GCB
type BuildType int32

const (
	// Could not determine Build Type
	BuildType_UNKNOWN_BUILD_TYPE BuildType = 0
	// Cluster Build
	BuildType_CLUSTER BuildType = 1
	// GCB Build
	BuildType_GCB BuildType = 2
	// Local Build
	BuildType_LOCAL BuildType = 3
)

// Enum value maps for BuildType.
var (
	BuildType_name = map[int32]string{
		0: "UNKNOWN_BUILD_TYPE",
		1: "CLUSTER",
		2: "GCB",
		3: "LOCAL",
	}
	BuildType_value = map[string]int32{
		"UNKNOWN_BUILD_TYPE": 0,
		"CLUSTER":            1,
		"GCB":                2,
		"LOCAL":              3,
	}
)

func (x BuildType) Enum() *BuildType {
	p := new(BuildType)
	*p = x
	return p
}

func (x BuildType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (BuildType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x BuildType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildType.Descriptor instead.
func (BuildType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

// Enum indicating test tools used
type TesterType int32

const (
	// Could not determine Test Type
	TesterType_UNKNOWN_TEST_TYPE TesterType = 0
	// Unit tests
	TesterType_UNIT TesterType = 1
	// Container Structure tests
	TesterType_CONTAINER_STRUCTURE_TEST TesterType = 2
)

// Enum value maps for TesterType.
var (
	TesterType_name = map[int32]string{
		0: "UNKNOWN_TEST_TYPE",
		1: "UNIT",
		2: "CONTAINER_STRUCTURE_TEST",
	}
	TesterType_value = map[string]int32{
		"UNKNOWN_TEST_TYPE":        0,
		"UNIT":                     1,
		"CONTAINER_STRUCTURE_TEST": 2,
	}
)

func (x TesterType) Enum() *TesterType {
	p := new(TesterType)
	*p = x
	return p
}

func (x TesterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TesterType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (TesterType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x TesterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TesterType.Descriptor instead.
func (TesterType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

// Enum indicating render manifests type
type RenderType int32

const (
	// Could not determine Render Type
	RenderType_UNKNOWN_RENDER_TYPE RenderType = 0
	// Raw Manifests
	RenderType_RAWK8S RenderType = 1
	// kustomize manifests
	RenderType_KUSTOMIZE_MANIFEST RenderType = 2
	// helm charts
	RenderType_HELM_CHART RenderType = 3
	// kpt manifests
	RenderType_KPT_MANIFEST RenderType = 4
)

// Enum value maps for RenderType.
var (
	RenderType_name = map[int32]string{
		0: "UNKNOWN_RENDER_TYPE",
		1: "RAWK8S",
		2: "KUSTOMIZE_MANIFEST",
		3: "HELM_CHART",
		4: "KPT_MANIFEST",
	}
	RenderType_value = map[string]int32{
		"UNKNOWN_RENDER_TYPE": 0,
		"RAWK8S":              1,
		"KUSTOMIZE_MANIFEST":  2,
		"HELM_CHART":          3,
		"KPT_MANIFEST":        4,
	}
)

func (x RenderType) Enum() *RenderType {
	p := new(RenderType)
	*p = x
	return p
}

func (x RenderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RenderType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (RenderType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x RenderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RenderType.Descriptor instead.
func (RenderType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

// Enum indicating deploy tools used
type DeployerType int32

const (
	// Could not determine Deployer Type
	DeployerType_UNKNOWN_DEPLOYER_TYPE DeployerType = 0
	// Helm Deployer
	DeployerType_HELM DeployerType = 1
	// Kustomize Deployer
	DeployerType_KUSTOMIZE DeployerType = 2
	// Kubectl Deployer
	DeployerType_KUBECTL DeployerType = 3
	// kpt Deployer
	DeployerType_KPT DeployerType = 4
)

// Enum value maps for DeployerType.
var (
	DeployerType_name = map[int32]string{
		0: "UNKNOWN_DEPLOYER_TYPE",
		1: "HELM",
		2: "KUSTOMIZE",
		3: "KUBECTL",
		4: "KPT",
	}
	DeployerType_value = map[string]int32{
		"UNKNOWN_DEPLOYER_TYPE": 0,
		"HELM":                  1,
		"KUSTOMIZE":             2,
		"KUBECTL":               3,
		"KPT":                   4,
	}
)

func (x DeployerType) Enum() *DeployerType {
	p := new(DeployerType)
	*p = x
	return p
}

func (x DeployerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeployerType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (DeployerType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x DeployerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeployerType.Descriptor instead.
func (DeployerType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

// Enum indicating cluster type the application is deployed to
type ClusterType int32

const (
	// Could not determine Cluster Type
	ClusterType_UNKNOWN_CLUSTER_TYPE ClusterType = 0
	// Minikube Cluster
	ClusterType_MINIKUBE ClusterType = 1
	// GKE cluster
	ClusterType_GKE ClusterType = 2
	// All Cluster except Minikube and GKE
	ClusterType_OTHER ClusterType = 3
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "UNKNOWN_CLUSTER_TYPE",
		1: "MINIKUBE",
		2: "GKE",
		3: "OTHER",
	}
	ClusterType_value = map[string]int32{
		"UNKNOWN_CLUSTER_TYPE": 0,
		"MINIKUBE":             1,
		"GKE":                  2,
		"OTHER":                3,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

// Enum indicating the log level of a line of output
type LogLevel int32

const (
	// Debug Level
	LogLevel_DEBUG LogLevel = 0
	// Info Level
	LogLevel_INFO LogLevel = 1
	// Warn Level
	LogLevel_WARN LogLevel = 2
	// Error Level
	LogLevel_ERROR LogLevel = 3
	// Fatal Level
	LogLevel_FATAL LogLevel = 4
	// Panic Level
	LogLevel_PANIC LogLevel = 5
	// Trace Level
	LogLevel_TRACE LogLevel = 6
	// User-visible output level
	LogLevel_STANDARD LogLevel = 7
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "WARN",
		3: "ERROR",
		4: "FATAL",
		5: "PANIC",
		6: "TRACE",
		7: "STANDARD",
	}
	LogLevel_value = map[string]int32{
		"DEBUG":    0,
		"INFO":     1,
		"WARN":     2,
		"ERROR":    3,
		"FATAL":    4,
		"PANIC":    5,
		"TRACE":    6,
		"STANDARD": 7,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

// Enum for Status codes<br>
// These error codes are prepended by Phase Name e.g.
// INIT, BUILD, TEST, DEPLOY, STATUSCHECK, DEVINIT<br>
// For Success Error codes, use range 200 to 250.<br>
// For Unknown error codes, use range 500 to 600.<br>
// For Cancelled Error code, use range 800 to 850.<br>
type StatusCode int32

const (
	// A default status code for events that do not have an associated phase.
	// Typically seen with the DevEndEvent event on success.
	StatusCode_OK StatusCode = 0
	// Status Check Success
	StatusCode_STATUSCHECK_SUCCESS StatusCode = 200
	// Build Success
	StatusCode_BUILD_SUCCESS StatusCode = 201
	// Render Success
	StatusCode_RENDER_SUCCESS StatusCode = 204
	// Deploy Success
	StatusCode_DEPLOY_SUCCESS StatusCode = 202
	// Test Success
	StatusCode_TEST_SUCCESS StatusCode = 203
	// Build error due to push access denied
	StatusCode_BUILD_PUSH_ACCESS_DENIED StatusCode = 101
	// Build error due to GCP project not found.
	StatusCode_BUILD_PROJECT_NOT_FOUND StatusCode = 102
	// Docker build error due to docker daemon not running
	StatusCode_BUILD_DOCKER_DAEMON_NOT_RUNNING StatusCode = 103
	// Build error due to user application code, e.g. compilation error, dockerfile error etc
	StatusCode_BUILD_USER_ERROR StatusCode = 104
	// Build error due to docker not available
	StatusCode_BUILD_DOCKER_UNAVAILABLE StatusCode = 105
	// Docker build error due to user not authorized to perform the action
	StatusCode_BUILD_DOCKER_UNAUTHORIZED StatusCode = 106
	// Docker system build error
	StatusCode_BUILD_DOCKER_SYSTEM_ERR StatusCode = 107
	// Docker build error due to Docker build container is already in the desired state
	StatusCode_BUILD_DOCKER_NOT_MODIFIED_ERR StatusCode = 108
	// Docker build error indicating a feature not supported
	StatusCode_BUILD_DOCKER_NOT_IMPLEMENTED_ERR StatusCode = 109
	// Docker build error indicates that for given build, data was lost or there is data corruption
	StatusCode_BUILD_DOCKER_DATA_LOSS_ERR StatusCode = 110
	// Docker build error indicates user is forbidden to perform the build or step/action.
	StatusCode_BUILD_DOCKER_FORBIDDEN_ERR StatusCode = 111
	// Docker build error due to some internal error and docker container state conflicts with the requested action and can't be performed
	StatusCode_BUILD_DOCKER_CONFLICT_ERR StatusCode = 112
	// Docker build error indicates the requested object does not exist
	StatusCode_BUILD_DOCKER_ERROR_NOT_FOUND StatusCode = 113
	// Docker build error indication invalid parameter sent to docker command
	StatusCode_BUILD_DOCKER_INVALID_PARAM_ERR StatusCode = 114
	// Docker build failed due to dockerfile not found
	StatusCode_BUILD_DOCKERFILE_NOT_FOUND StatusCode = 115
	// Docker build failed due `cacheFrom` user config error
	StatusCode_BUILD_DOCKER_CACHE_FROM_PULL_ERR StatusCode = 116
	// Build error due to digest for built artifact could not be retrieved from docker daemon.
	StatusCode_BUILD_DOCKER_GET_DIGEST_ERR StatusCode = 117
	// Build error due no space left in docker.
	StatusCode_BUILD_DOCKER_NO_SPACE_ERR StatusCode = 127
	// Build error due to digest for built artifact could not be retrieved from registry.
	StatusCode_BUILD_REGISTRY_GET_DIGEST_ERR StatusCode = 118
	// Build error indicating unknown Jib plugin type. Should be one of [maven, gradle]
	StatusCode_BUILD_UNKNOWN_JIB_PLUGIN_TYPE StatusCode = 119
	// Build error determining dependency for jib gradle project.
	StatusCode_BUILD_JIB_GRADLE_DEP_ERR StatusCode = 120
	// Build error determining dependency for jib gradle project.
	StatusCode_BUILD_JIB_MAVEN_DEP_ERR StatusCode = 121
	// Docker build error when listing containers.
	StatusCode_INIT_DOCKER_NETWORK_LISTING_CONTAINERS StatusCode = 122
	// Docker build error indicating an invalid container name (or id).
	StatusCode_INIT_DOCKER_NETWORK_INVALID_CONTAINER_NAME StatusCode = 123
	// Docker build error indicating the container referenced does not exists in the docker context used.
	StatusCode_INIT_DOCKER_NETWORK_CONTAINER_DOES_NOT_EXIST StatusCode = 124
	// Docker Network invalid mode
	StatusCode_INIT_DOCKER_NETWORK_INVALID_MODE StatusCode = 125
	// Error parsing Docker Network mode
	StatusCode_INIT_DOCKER_NETWORK_PARSE_ERR StatusCode = 126
	// GCB Create Build Error
	StatusCode_BUILD_GCB_CREATE_BUILD_ERR StatusCode = 128
	// GCB error indicating an error to fetch build id.
	StatusCode_BUILD_GCB_GET_BUILD_ID_ERR StatusCode = 129
	// GCB error indicating an error to fetch build status.
	StatusCode_BUILD_GCB_GET_BUILD_STATUS_ERR StatusCode = 130
	// GCB error indicating an error to fetch build logs.
	StatusCode_BUILD_GCB_GET_BUILD_LOG_ERR StatusCode = 131
	// GCB error indicating an error to fetch build status.
	StatusCode_BUILD_GCB_COPY_BUILD_LOG_ERR StatusCode = 132
	// GCB error indicating an error retrieving the built image id.
	StatusCode_BUILD_GCB_GET_BUILT_IMAGE_ERR StatusCode = 133
	// GCB error indicating build failure.
	StatusCode_BUILD_GCB_BUILD_FAILED StatusCode = 134
	// GCB error indicating build failure due to internal errror.
	StatusCode_BUILD_GCB_BUILD_INTERNAL_ERR StatusCode = 135
	// GCB error indicating build failure due to timeout.
	StatusCode_BUILD_GCB_BUILD_TIMEOUT StatusCode = 136
	// GCB error to generate the build descriptor.
	StatusCode_BUILD_GCB_GENERATE_BUILD_DESCRIPTOR_ERR StatusCode = 137
	// GCB error to upload to GCS.
	StatusCode_BUILD_GCB_UPLOAD_TO_GCS_ERR StatusCode = 138
	// GCB error to fetch jib artifact dependency.
	StatusCode_BUILD_GCB_JIB_DEPENDENCY_ERR StatusCode = 139
	// GCB error to fetch artifact dependency.
	StatusCode_BUILD_GCB_GET_DEPENDENCY_ERR StatusCode = 140
	// GCB error to get GCS bucket.
	StatusCode_BUILD_GCB_GET_GCS_BUCKET_ERR StatusCode = 141
	// GCB error to create a GCS bucket.
	StatusCode_BUILD_GCB_CREATE_BUCKET_ERR StatusCode = 142
	// GCB error to extract Project ID.
	StatusCode_BUILD_GCB_EXTRACT_PROJECT_ID StatusCode = 143
	// GCB error to get cloud storage client to perform GCS operation.
	StatusCode_BUILD_GET_CLOUD_STORAGE_CLIENT_ERR StatusCode = 144
	// GCB error to get cloud build client to perform GCB operations.
	StatusCode_BUILD_GET_CLOUD_BUILD_CLIENT_ERR StatusCode = 145
	// Container image pull error
	StatusCode_STATUSCHECK_IMAGE_PULL_ERR StatusCode = 300
	// Container creating error
	StatusCode_STATUSCHECK_CONTAINER_CREATING StatusCode = 301
	// Container run error
	StatusCode_STATUSCHECK_RUN_CONTAINER_ERR StatusCode = 302
	// Container is already terminated
	StatusCode_STATUSCHECK_CONTAINER_TERMINATED StatusCode = 303
	// Deployment waiting for rollout
	StatusCode_STATUSCHECK_DEPLOYMENT_ROLLOUT_PENDING StatusCode = 304
	// Container restarting error
	StatusCode_STATUSCHECK_CONTAINER_RESTARTING StatusCode = 356
	// Readiness probe failed
	StatusCode_STATUSCHECK_UNHEALTHY StatusCode = 357
	// Executable binary format error
	StatusCode_STATUSCHECK_CONTAINER_EXEC_ERROR StatusCode = 358
	// Node memory pressure error
	StatusCode_STATUSCHECK_NODE_MEMORY_PRESSURE StatusCode = 400
	// Node disk pressure error
	StatusCode_STATUSCHECK_NODE_DISK_PRESSURE StatusCode = 401
	// Node network unavailable error
	StatusCode_STATUSCHECK_NODE_NETWORK_UNAVAILABLE StatusCode = 402
	// Node PID pressure error
	StatusCode_STATUSCHECK_NODE_PID_PRESSURE StatusCode = 403
	// Node unschedulable error
	StatusCode_STATUSCHECK_NODE_UNSCHEDULABLE StatusCode = 404
	// Node unreachable error
	StatusCode_STATUSCHECK_NODE_UNREACHABLE StatusCode = 405
	// Node not ready error
	StatusCode_STATUSCHECK_NODE_NOT_READY StatusCode = 406
	// Scheduler failure error
	StatusCode_STATUSCHECK_FAILED_SCHEDULING StatusCode = 407
	// Kubectl connection error
	StatusCode_STATUSCHECK_KUBECTL_CONNECTION_ERR StatusCode = 409
	// Kubectl process killed error
	StatusCode_STATUSCHECK_KUBECTL_PID_KILLED StatusCode = 410
	// Kubectl client fetch err
	StatusCode_STATUSCHECK_KUBECTL_CLIENT_FETCH_ERR StatusCode = 411
	StatusCode_STATUSCHECK_DEPLOYMENT_FETCH_ERR     StatusCode = 412
	// Pod Initializing
	StatusCode_STATUSCHECK_POD_INITIALIZING StatusCode = 451
	// Could not determine error and phase
	StatusCode_UNKNOWN_ERROR StatusCode = 500
	// Status Check error unknown
	StatusCode_STATUSCHECK_UNKNOWN StatusCode = 501
	// Container is unschedulable due to unknown reasons
	StatusCode_STATUSCHECK_UNKNOWN_UNSCHEDULABLE StatusCode = 502
	// Container is waiting due to unknown reason
	StatusCode_STATUSCHECK_CONTAINER_WAITING_UNKNOWN StatusCode = 503
	// Container event reason unknown
	StatusCode_STATUSCHECK_UNKNOWN_EVENT StatusCode = 509
	// Deploy failed due to unknown reason
	StatusCode_DEPLOY_UNKNOWN StatusCode = 504
	// SYNC failed due to known reason
	StatusCode_SYNC_UNKNOWN StatusCode = 505
	// Build failed due to unknown reason
	StatusCode_BUILD_UNKNOWN StatusCode = 506
	// Dev Init failed due to unknown reason
	StatusCode_DEVINIT_UNKNOWN StatusCode = 507
	// Cleanup failed due to unknown reason
	StatusCode_CLEANUP_UNKNOWN StatusCode = 508
	// Initialization of the Skaffold session failed due to unknown reason(s)
	StatusCode_INIT_UNKNOWN StatusCode = 510
	// Build failed due to docker unknown error
	StatusCode_BUILD_DOCKER_UNKNOWN StatusCode = 511
	// Test failed due to unknown reason
	StatusCode_TEST_UNKNOWN StatusCode = 512
	// GCB error indicating build failed due to unknown status.
	StatusCode_BUILD_GCB_BUILD_UNKNOWN_STATUS StatusCode = 513
	// File Sync Initialize failure
	StatusCode_SYNC_INIT_ERROR StatusCode = 601
	// Failed to configure watcher for build dependencies in dev loop
	StatusCode_DEVINIT_REGISTER_BUILD_DEPS StatusCode = 701
	// Failed to configure watcher for test dependencies in dev loop
	StatusCode_DEVINIT_REGISTER_TEST_DEPS StatusCode = 702
	// Failed to configure watcher for deploy dependencies in dev loop
	StatusCode_DEVINIT_REGISTER_DEPLOY_DEPS StatusCode = 703
	// Failed to configure watcher for Skaffold configuration file.
	StatusCode_DEVINIT_REGISTER_CONFIG_DEP StatusCode = 704
	// Failed to configure watcher for build dependencies for a base image with v1 manifest.
	StatusCode_DEVINIT_UNSUPPORTED_V1_MANIFEST StatusCode = 705
	// User cancelled the skaffold dev run
	StatusCode_STATUSCHECK_USER_CANCELLED StatusCode = 800
	// Deadline for status check exceeded
	StatusCode_STATUSCHECK_DEADLINE_EXCEEDED StatusCode = 801
	// Build Cancelled
	StatusCode_BUILD_CANCELLED StatusCode = 802
	// Deploy cancelled due to user cancellation or one or more deployers failed.
	StatusCode_DEPLOY_CANCELLED StatusCode = 803
	// Docker build cancelled.
	StatusCode_BUILD_DOCKER_CANCELLED StatusCode = 804
	// Build error due to docker deadline was reached before the docker action completed
	StatusCode_BUILD_DOCKER_DEADLINE StatusCode = 805
	// GCB Build cancelled.
	StatusCode_BUILD_GCB_BUILD_CANCELLED StatusCode = 806
	// Skaffold was unable to create the configured tagger
	StatusCode_INIT_CREATE_TAGGER_ERROR StatusCode = 901
	// Skaffold was unable to start as Minikube appears to be paused
	StatusCode_INIT_MINIKUBE_PAUSED_ERROR StatusCode = 902
	// Skaffold was unable to start as Minikube appears to be stopped
	StatusCode_INIT_MINIKUBE_NOT_RUNNING_ERROR StatusCode = 903
	// Skaffold was unable to create a configured image builder
	StatusCode_INIT_CREATE_BUILDER_ERROR StatusCode = 904
	// Skaffold was unable to create a configured deployer
	StatusCode_INIT_CREATE_DEPLOYER_ERROR StatusCode = 905
	// Skaffold was unable to create a configured test
	StatusCode_INIT_CREATE_TEST_DEP_ERROR StatusCode = 906
	// Skaffold encountered an error validating the artifact cache
	StatusCode_INIT_CACHE_ERROR StatusCode = 907
	// Skaffold encountered an error when configuring file watching
	StatusCode_INIT_CREATE_WATCH_TRIGGER_ERROR StatusCode = 908
	// Skaffold encountered an error when evaluating artifact dependencies
	StatusCode_INIT_CREATE_ARTIFACT_DEP_ERROR StatusCode = 909
	// Unable to connect to cluster
	StatusCode_DEPLOY_CLUSTER_CONNECTION_ERR StatusCode = 1001
	// Could not retrieve debug helpers.
	StatusCode_DEPLOY_DEBUG_HELPER_RETRIEVE_ERR StatusCode = 1002
	// Deploy clean up error
	StatusCode_DEPLOY_CLEANUP_ERR StatusCode = 1003
	// Unable to apply helm labels.
	StatusCode_DEPLOY_HELM_APPLY_LABELS StatusCode = 1004
	// Deploy error due to user deploy config for helm deployer
	StatusCode_DEPLOY_HELM_USER_ERR StatusCode = 1005
	// Helm error when no build result is found of value  specified in helm `artifactOverrides`
	StatusCode_DEPLOY_NO_MATCHING_BUILD StatusCode = 1006
	// Unable to get helm client version
	StatusCode_DEPLOY_HELM_VERSION_ERR StatusCode = 1007
	// Helm version not supported.
	StatusCode_DEPLOY_HELM_MIN_VERSION_ERR StatusCode = 1008
	// Unable to retrieve kubectl version
	StatusCode_DEPLOY_KUBECTL_VERSION_ERR StatusCode = 1109
	// User specified offline mode for rendering but remote manifests presents.
	StatusCode_DEPLOY_KUBECTL_OFFLINE_MODE_ERR StatusCode = 1010
	// Error waiting for previous version deletion before next version is active.
	StatusCode_DEPLOY_ERR_WAITING_FOR_DELETION StatusCode = 1011
	// Error reading manifests
	StatusCode_DEPLOY_READ_MANIFEST_ERR StatusCode = 1012
	// Error reading remote manifests
	StatusCode_DEPLOY_READ_REMOTE_MANIFEST_ERR StatusCode = 1013
	// Errors listing manifests
	StatusCode_DEPLOY_LIST_MANIFEST_ERR StatusCode = 1014
	// Deploy error due to user deploy config for kubectl deployer
	StatusCode_DEPLOY_KUBECTL_USER_ERR StatusCode = 1015
	// Deploy error due to user deploy config for kustomize deployer
	StatusCode_DEPLOY_KUSTOMIZE_USER_ERR StatusCode = 1016
	// Error replacing a built artifact in the manifests
	StatusCode_DEPLOY_REPLACE_IMAGE_ERR StatusCode = 1017
	// Error transforming a manifest during skaffold debug
	StatusCode_DEPLOY_TRANSFORM_MANIFEST_ERR StatusCode = 1018
	// Error setting user specified additional labels.
	StatusCode_DEPLOY_SET_LABEL_ERR StatusCode = 1019
	// Error writing hydrated kubernetes manifests.
	StatusCode_DEPLOY_MANIFEST_WRITE_ERR StatusCode = 1020
	// Error getting images from a kubernetes manifest.
	StatusCode_DEPLOY_PARSE_MANIFEST_IMAGES_ERR StatusCode = 1021
	// Helm config `createNamespace` not available
	StatusCode_DEPLOY_HELM_CREATE_NS_NOT_AVAILABLE StatusCode = 1022
	// Kubernetes cluster reported an internal system error
	StatusCode_DEPLOY_CLUSTER_INTERNAL_SYSTEM_ERR StatusCode = 1023
	// The Kptfile cannot be created via `kpt live init`.
	StatusCode_DEPLOY_KPTFILE_INIT_ERR StatusCode = 1024
	// Error expanding paths
	StatusCode_TEST_USER_CONFIG_ERR StatusCode = 1101
	// Error running container-structure-test
	StatusCode_TEST_CST_USER_ERR StatusCode = 1102
	// Unable to docker pull image
	StatusCode_TEST_IMG_PULL_ERR StatusCode = 1103
	// Unable to parse test command
	StatusCode_TEST_CUSTOM_CMD_PARSE_ERR StatusCode = 1104
	// Command returned non-zero exit code
	StatusCode_TEST_CUSTOM_CMD_RUN_NON_ZERO_EXIT_ERR StatusCode = 1105
	// command cancelled or timed out
	StatusCode_TEST_CUSTOM_CMD_RUN_TIMEDOUT_ERR StatusCode = 1106
	// command cancelled or timed out
	StatusCode_TEST_CUSTOM_CMD_RUN_CANCELLED_ERR StatusCode = 1107
	// command context error
	StatusCode_TEST_CUSTOM_CMD_RUN_EXECUTION_ERR StatusCode = 1108
	// command exited
	StatusCode_TEST_CUSTOM_CMD_RUN_EXITED_ERR StatusCode = 1110
	// error running cmd
	StatusCode_TEST_CUSTOM_CMD_RUN_ERR StatusCode = 1111
	// Error getting dependencies from command
	StatusCode_TEST_CUSTOM_DEPENDENCIES_CMD_ERR StatusCode = 1112
	// Unmarshalling dependency output error
	StatusCode_TEST_CUSTOM_DEPENDENCIES_UNMARSHALL_ERR StatusCode = 1113
	// Error retrieving the command
	StatusCode_TEST_CUSTOM_CMD_RETRIEVE_ERR StatusCode = 1114
	// Render errors
	// The Kptfile cannot be created via `kpt pkg init`.
	StatusCode_RENDER_KPTFILE_INIT_ERR StatusCode = 1501
	// The Kptfile is not a valid yaml file
	StatusCode_RENDER_KPTFILE_INVALID_YAML_ERR StatusCode = 1401
	// The Kptfile is not a valid API schema
	StatusCode_RENDER_KPTFILE_INVALID_SCHEMA_ERR StatusCode = 1402
	// Catch-all configuration file parsing error
	StatusCode_CONFIG_FILE_PARSING_ERR StatusCode = 1201
	// Main configuration file not found
	StatusCode_CONFIG_FILE_NOT_FOUND_ERR StatusCode = 1202
	// Dependency configuration file not found
	StatusCode_CONFIG_DEPENDENCY_NOT_FOUND_ERR StatusCode = 1203
	// Duplicate config names in the same configuration file
	StatusCode_CONFIG_DUPLICATE_NAMES_SAME_FILE_ERR StatusCode = 1204
	// Duplicate config names in two configuration files
	StatusCode_CONFIG_DUPLICATE_NAMES_ACROSS_FILES_ERR StatusCode = 1205
	// No configs matching configs filter
	StatusCode_CONFIG_BAD_FILTER_ERR StatusCode = 1206
	// No configs parsed from current file
	StatusCode_CONFIG_ZERO_FOUND_ERR StatusCode = 1207
	// Failed to apply profiles to config
	StatusCode_CONFIG_APPLY_PROFILES_ERR StatusCode = 1208
	// Failed to set default config values
	StatusCode_CONFIG_DEFAULT_VALUES_ERR StatusCode = 1209
	// Failed to substitute absolute file paths in config
	StatusCode_CONFIG_FILE_PATHS_SUBSTITUTION_ERR StatusCode = 1210
	// Same config imported at least twice with different set of profiles
	StatusCode_CONFIG_MULTI_IMPORT_PROFILE_CONFLICT_ERR StatusCode = 1211
	// Profile selection did not match known profile names
	StatusCode_CONFIG_PROFILES_NOT_FOUND_ERR StatusCode = 1212
	// Config API version not found
	StatusCode_CONFIG_UNKNOWN_API_VERSION_ERR StatusCode = 1213
	// The validator is not allowed in skaffold-managed mode.
	StatusCode_CONFIG_UNKNOWN_VALIDATOR StatusCode = 1214
	// The transformer is not allowed in skaffold-managed mode.
	StatusCode_CONFIG_UNKNOWN_TRANSFORMER StatusCode = 1215
	// Manifest file not found
	StatusCode_CONFIG_MISSING_MANIFEST_FILE_ERR StatusCode = 1216
	// Remote config repository cache not found and sync disabled
	StatusCode_CONFIG_REMOTE_REPO_CACHE_NOT_FOUND_ERR StatusCode = 1217
	// Catch-all `skaffold inspect` command error
	StatusCode_INSPECT_UNKNOWN_ERR StatusCode = 1301
	// Trying to add new build environment that already exists
	StatusCode_INSPECT_BUILD_ENV_ALREADY_EXISTS_ERR StatusCode = 1302
	// Trying to modify build environment that doesn't exist
	StatusCode_INSPECT_BUILD_ENV_INCORRECT_TYPE_ERR StatusCode = 1303
	// Trying to modify a profile that doesn't exist
	StatusCode_INSPECT_PROFILE_NOT_FOUND_ERR StatusCode = 1304
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:    "OK",
		200:  "STATUSCHECK_SUCCESS",
		201:  "BUILD_SUCCESS",
		204:  "RENDER_SUCCESS",
		202:  "DEPLOY_SUCCESS",
		203:  "TEST_SUCCESS",
		101:  "BUILD_PUSH_ACCESS_DENIED",
		102:  "BUILD_PROJECT_NOT_FOUND",
		103:  "BUILD_DOCKER_DAEMON_NOT_RUNNING",
		104:  "BUILD_USER_ERROR",
		105:  "BUILD_DOCKER_UNAVAILABLE",
		106:  "BUILD_DOCKER_UNAUTHORIZED",
		107:  "BUILD_DOCKER_SYSTEM_ERR",
		108:  "BUILD_DOCKER_NOT_MODIFIED_ERR",
		109:  "BUILD_DOCKER_NOT_IMPLEMENTED_ERR",
		110:  "BUILD_DOCKER_DATA_LOSS_ERR",
		111:  "BUILD_DOCKER_FORBIDDEN_ERR",
		112:  "BUILD_DOCKER_CONFLICT_ERR",
		113:  "BUILD_DOCKER_ERROR_NOT_FOUND",
		114:  "BUILD_DOCKER_INVALID_PARAM_ERR",
		115:  "BUILD_DOCKERFILE_NOT_FOUND",
		116:  "BUILD_DOCKER_CACHE_FROM_PULL_ERR",
		117:  "BUILD_DOCKER_GET_DIGEST_ERR",
		127:  "BUILD_DOCKER_NO_SPACE_ERR",
		118:  "BUILD_REGISTRY_GET_DIGEST_ERR",
		119:  "BUILD_UNKNOWN_JIB_PLUGIN_TYPE",
		120:  "BUILD_JIB_GRADLE_DEP_ERR",
		121:  "BUILD_JIB_MAVEN_DEP_ERR",
		122:  "INIT_DOCKER_NETWORK_LISTING_CONTAINERS",
		123:  "INIT_DOCKER_NETWORK_INVALID_CONTAINER_NAME",
		124:  "INIT_DOCKER_NETWORK_CONTAINER_DOES_NOT_EXIST",
		125:  "INIT_DOCKER_NETWORK_INVALID_MODE",
		126:  "INIT_DOCKER_NETWORK_PARSE_ERR",
		128:  "BUILD_GCB_CREATE_BUILD_ERR",
		129:  "BUILD_GCB_GET_BUILD_ID_ERR",
		130:  "BUILD_GCB_GET_BUILD_STATUS_ERR",
		131:  "BUILD_GCB_GET_BUILD_LOG_ERR",
		132:  "BUILD_GCB_COPY_BUILD_LOG_ERR",
		133:  "BUILD_GCB_GET_BUILT_IMAGE_ERR",
		134:  "BUILD_GCB_BUILD_FAILED",
		135:  "BUILD_GCB_BUILD_INTERNAL_ERR",
		136:  "BUILD_GCB_BUILD_TIMEOUT",
		137:  "BUILD_GCB_GENERATE_BUILD_DESCRIPTOR_ERR",
		138:  "BUILD_GCB_UPLOAD_TO_GCS_ERR",
		139:  "BUILD_GCB_JIB_DEPENDENCY_ERR",
		140:  "BUILD_GCB_GET_DEPENDENCY_ERR",
		141:  "BUILD_GCB_GET_GCS_BUCKET_ERR",
		142:  "BUILD_GCB_CREATE_BUCKET_ERR",
		143:  "BUILD_GCB_EXTRACT_PROJECT_ID",
		144:  "BUILD_GET_CLOUD_STORAGE_CLIENT_ERR",
		145:  "BUILD_GET_CLOUD_BUILD_CLIENT_ERR",
		300:  "STATUSCHECK_IMAGE_PULL_ERR",
		301:  "STATUSCHECK_CONTAINER_CREATING",
		302:  "STATUSCHECK_RUN_CONTAINER_ERR",
		303:  "STATUSCHECK_CONTAINER_TERMINATED",
		304:  "STATUSCHECK_DEPLOYMENT_ROLLOUT_PENDING",
		356:  "STATUSCHECK_CONTAINER_RESTARTING",
		357:  "STATUSCHECK_UNHEALTHY",
		358:  "STATUSCHECK_CONTAINER_EXEC_ERROR",
		400:  "STATUSCHECK_NODE_MEMORY_PRESSURE",
		401:  "STATUSCHECK_NODE_DISK_PRESSURE",
		402:  "STATUSCHECK_NODE_NETWORK_UNAVAILABLE",
		403:  "STATUSCHECK_NODE_PID_PRESSURE",
		404:  "STATUSCHECK_NODE_UNSCHEDULABLE",
		405:  "STATUSCHECK_NODE_UNREACHABLE",
		406:  "STATUSCHECK_NODE_NOT_READY",
		407:  "STATUSCHECK_FAILED_SCHEDULING",
		409:  "STATUSCHECK_KUBECTL_CONNECTION_ERR",
		410:  "STATUSCHECK_KUBECTL_PID_KILLED",
		411:  "STATUSCHECK_KUBECTL_CLIENT_FETCH_ERR",
		412:  "STATUSCHECK_DEPLOYMENT_FETCH_ERR",
		451:  "STATUSCHECK_POD_INITIALIZING",
		500:  "UNKNOWN_ERROR",
		501:  "STATUSCHECK_UNKNOWN",
		502:  "STATUSCHECK_UNKNOWN_UNSCHEDULABLE",
		503:  "STATUSCHECK_CONTAINER_WAITING_UNKNOWN",
		509:  "STATUSCHECK_UNKNOWN_EVENT",
		504:  "DEPLOY_UNKNOWN",
		505:  "SYNC_UNKNOWN",
		506:  "BUILD_UNKNOWN",
		507:  "DEVINIT_UNKNOWN",
		508:  "CLEANUP_UNKNOWN",
		510:  "INIT_UNKNOWN",
		511:  "BUILD_DOCKER_UNKNOWN",
		512:  "TEST_UNKNOWN",
		513:  "BUILD_GCB_BUILD_UNKNOWN_STATUS",
		601:  "SYNC_INIT_ERROR",
		701:  "DEVINIT_REGISTER_BUILD_DEPS",
		702:  "DEVINIT_REGISTER_TEST_DEPS",
		703:  "DEVINIT_REGISTER_DEPLOY_DEPS",
		704:  "DEVINIT_REGISTER_CONFIG_DEP",
		705:  "DEVINIT_UNSUPPORTED_V1_MANIFEST",
		800:  "STATUSCHECK_USER_CANCELLED",
		801:  "STATUSCHECK_DEADLINE_EXCEEDED",
		802:  "BUILD_CANCELLED",
		803:  "DEPLOY_CANCELLED",
		804:  "BUILD_DOCKER_CANCELLED",
		805:  "BUILD_DOCKER_DEADLINE",
		806:  "BUILD_GCB_BUILD_CANCELLED",
		901:  "INIT_CREATE_TAGGER_ERROR",
		902:  "INIT_MINIKUBE_PAUSED_ERROR",
		903:  "INIT_MINIKUBE_NOT_RUNNING_ERROR",
		904:  "INIT_CREATE_BUILDER_ERROR",
		905:  "INIT_CREATE_DEPLOYER_ERROR",
		906:  "INIT_CREATE_TEST_DEP_ERROR",
		907:  "INIT_CACHE_ERROR",
		908:  "INIT_CREATE_WATCH_TRIGGER_ERROR",
		909:  "INIT_CREATE_ARTIFACT_DEP_ERROR",
		1001: "DEPLOY_CLUSTER_CONNECTION_ERR",
		1002: "DEPLOY_DEBUG_HELPER_RETRIEVE_ERR",
		1003: "DEPLOY_CLEANUP_ERR",
		1004: "DEPLOY_HELM_APPLY_LABELS",
		1005: "DEPLOY_HELM_USER_ERR",
		1006: "DEPLOY_NO_MATCHING_BUILD",
		1007: "DEPLOY_HELM_VERSION_ERR",
		1008: "DEPLOY_HELM_MIN_VERSION_ERR",
		1109: "DEPLOY_KUBECTL_VERSION_ERR",
		1010: "DEPLOY_KUBECTL_OFFLINE_MODE_ERR",
		1011: "DEPLOY_ERR_WAITING_FOR_DELETION",
		1012: "DEPLOY_READ_MANIFEST_ERR",
		1013: "DEPLOY_READ_REMOTE_MANIFEST_ERR",
		1014: "DEPLOY_LIST_MANIFEST_ERR",
		1015: "DEPLOY_KUBECTL_USER_ERR",
		1016: "DEPLOY_KUSTOMIZE_USER_ERR",
		1017: "DEPLOY_REPLACE_IMAGE_ERR",
		1018: "DEPLOY_TRANSFORM_MANIFEST_ERR",
		1019: "DEPLOY_SET_LABEL_ERR",
		1020: "DEPLOY_MANIFEST_WRITE_ERR",
		1021: "DEPLOY_PARSE_MANIFEST_IMAGES_ERR",
		1022: "DEPLOY_HELM_CREATE_NS_NOT_AVAILABLE",
		1023: "DEPLOY_CLUSTER_INTERNAL_SYSTEM_ERR",
		1024: "DEPLOY_KPTFILE_INIT_ERR",
		1101: "TEST_USER_CONFIG_ERR",
		1102: "TEST_CST_USER_ERR",
		1103: "TEST_IMG_PULL_ERR",
		1104: "TEST_CUSTOM_CMD_PARSE_ERR",
		1105: "TEST_CUSTOM_CMD_RUN_NON_ZERO_EXIT_ERR",
		1106: "TEST_CUSTOM_CMD_RUN_TIMEDOUT_ERR",
		1107: "TEST_CUSTOM_CMD_RUN_CANCELLED_ERR",
		1108: "TEST_CUSTOM_CMD_RUN_EXECUTION_ERR",
		1110: "TEST_CUSTOM_CMD_RUN_EXITED_ERR",
		1111: "TEST_CUSTOM_CMD_RUN_ERR",
		1112: "TEST_CUSTOM_DEPENDENCIES_CMD_ERR",
		1113: "TEST_CUSTOM_DEPENDENCIES_UNMARSHALL_ERR",
		1114: "TEST_CUSTOM_CMD_RETRIEVE_ERR",
		1501: "RENDER_KPTFILE_INIT_ERR",
		1401: "RENDER_KPTFILE_INVALID_YAML_ERR",
		1402: "RENDER_KPTFILE_INVALID_SCHEMA_ERR",
		1201: "CONFIG_FILE_PARSING_ERR",
		1202: "CONFIG_FILE_NOT_FOUND_ERR",
		1203: "CONFIG_DEPENDENCY_NOT_FOUND_ERR",
		1204: "CONFIG_DUPLICATE_NAMES_SAME_FILE_ERR",
		1205: "CONFIG_DUPLICATE_NAMES_ACROSS_FILES_ERR",
		1206: "CONFIG_BAD_FILTER_ERR",
		1207: "CONFIG_ZERO_FOUND_ERR",
		1208: "CONFIG_APPLY_PROFILES_ERR",
		1209: "CONFIG_DEFAULT_VALUES_ERR",
		1210: "CONFIG_FILE_PATHS_SUBSTITUTION_ERR",
		1211: "CONFIG_MULTI_IMPORT_PROFILE_CONFLICT_ERR",
		1212: "CONFIG_PROFILES_NOT_FOUND_ERR",
		1213: "CONFIG_UNKNOWN_API_VERSION_ERR",
		1214: "CONFIG_UNKNOWN_VALIDATOR",
		1215: "CONFIG_UNKNOWN_TRANSFORMER",
		1216: "CONFIG_MISSING_MANIFEST_FILE_ERR",
		1217: "CONFIG_REMOTE_REPO_CACHE_NOT_FOUND_ERR",
		1301: "INSPECT_UNKNOWN_ERR",
		1302: "INSPECT_BUILD_ENV_ALREADY_EXISTS_ERR",
		1303: "INSPECT_BUILD_ENV_INCORRECT_TYPE_ERR",
		1304: "INSPECT_PROFILE_NOT_FOUND_ERR",
	}
	StatusCode_value = map[string]int32{
		"OK":                                           0,
		"STATUSCHECK_SUCCESS":                          200,
		"BUILD_SUCCESS":                                201,
		"RENDER_SUCCESS":                               204,
		"DEPLOY_SUCCESS":                               202,
		"TEST_SUCCESS":                                 203,
		"BUILD_PUSH_ACCESS_DENIED":                     101,
		"BUILD_PROJECT_NOT_FOUND":                      102,
		"BUILD_DOCKER_DAEMON_NOT_RUNNING":              103,
		"BUILD_USER_ERROR":                             104,
		"BUILD_DOCKER_UNAVAILABLE":                     105,
		"BUILD_DOCKER_UNAUTHORIZED":                    106,
		"BUILD_DOCKER_SYSTEM_ERR":                      107,
		"BUILD_DOCKER_NOT_MODIFIED_ERR":                108,
		"BUILD_DOCKER_NOT_IMPLEMENTED_ERR":             109,
		"BUILD_DOCKER_DATA_LOSS_ERR":                   110,
		"BUILD_DOCKER_FORBIDDEN_ERR":                   111,
		"BUILD_DOCKER_CONFLICT_ERR":                    112,
		"BUILD_DOCKER_ERROR_NOT_FOUND":                 113,
		"BUILD_DOCKER_INVALID_PARAM_ERR":               114,
		"BUILD_DOCKERFILE_NOT_FOUND":                   115,
		"BUILD_DOCKER_CACHE_FROM_PULL_ERR":             116,
		"BUILD_DOCKER_GET_DIGEST_ERR":                  117,
		"BUILD_DOCKER_NO_SPACE_ERR":                    127,
		"BUILD_REGISTRY_GET_DIGEST_ERR":                118,
		"BUILD_UNKNOWN_JIB_PLUGIN_TYPE":                119,
		"BUILD_JIB_GRADLE_DEP_ERR":                     120,
		"BUILD_JIB_MAVEN_DEP_ERR":                      121,
		"INIT_DOCKER_NETWORK_LISTING_CONTAINERS":       122,
		"INIT_DOCKER_NETWORK_INVALID_CONTAINER_NAME":   123,
		"INIT_DOCKER_NETWORK_CONTAINER_DOES_NOT_EXIST": 124,
		"INIT_DOCKER_NETWORK_INVALID_MODE":             125,
		"INIT_DOCKER_NETWORK_PARSE_ERR":                126,
		"BUILD_GCB_CREATE_BUILD_ERR":                   128,
		"BUILD_GCB_GET_BUILD_ID_ERR":                   129,
		"BUILD_GCB_GET_BUILD_STATUS_ERR":               130,
		"BUILD_GCB_GET_BUILD_LOG_ERR":                  131,
		"BUILD_GCB_COPY_BUILD_LOG_ERR":                 132,
		"BUILD_GCB_GET_BUILT_IMAGE_ERR":                133,
		"BUILD_GCB_BUILD_FAILED":                       134,
		"BUILD_GCB_BUILD_INTERNAL_ERR":                 135,
		"BUILD_GCB_BUILD_TIMEOUT":                      136,
		"BUILD_GCB_GENERATE_BUILD_DESCRIPTOR_ERR":      137,
		"BUILD_GCB_UPLOAD_TO_GCS_ERR":                  138,
		"BUILD_GCB_JIB_DEPENDENCY_ERR":                 139,
		"BUILD_GCB_GET_DEPENDENCY_ERR":                 140,
		"BUILD_GCB_GET_GCS_BUCKET_ERR":                 141,
		"BUILD_GCB_CREATE_BUCKET_ERR":                  142,
		"BUILD_GCB_EXTRACT_PROJECT_ID":                 143,
		"BUILD_GET_CLOUD_STORAGE_CLIENT_ERR":           144,
		"BUILD_GET_CLOUD_BUILD_CLIENT_ERR":             145,
		"STATUSCHECK_IMAGE_PULL_ERR":                   300,
		"STATUSCHECK_CONTAINER_CREATING":               301,
		"STATUSCHECK_RUN_CONTAINER_ERR":                302,
		"STATUSCHECK_CONTAINER_TERMINATED":             303,
		"STATUSCHECK_DEPLOYMENT_ROLLOUT_PENDING":       304,
		"STATUSCHECK_CONTAINER_RESTARTING":             356,
		"STATUSCHECK_UNHEALTHY":                        357,
		"STATUSCHECK_CONTAINER_EXEC_ERROR":             358,
		"STATUSCHECK_NODE_MEMORY_PRESSURE":             400,
		"STATUSCHECK_NODE_DISK_PRESSURE":               401,
		"STATUSCHECK_NODE_NETWORK_UNAVAILABLE":         402,
		"STATUSCHECK_NODE_PID_PRESSURE":                403,
		"STATUSCHECK_NODE_UNSCHEDULABLE":               404,
		"STATUSCHECK_NODE_UNREACHABLE":                 405,
		"STATUSCHECK_NODE_NOT_READY":                   406,
		"STATUSCHECK_FAILED_SCHEDULING":                407,
		"STATUSCHECK_KUBECTL_CONNECTION_ERR":           409,
		"STATUSCHECK_KUBECTL_PID_KILLED":               410,
		"STATUSCHECK_KUBECTL_CLIENT_FETCH_ERR":         411,
		"STATUSCHECK_DEPLOYMENT_FETCH_ERR":             412,
		"STATUSCHECK_POD_INITIALIZING":                 451,
		"UNKNOWN_ERROR":                                500,
		"STATUSCHECK_UNKNOWN":                          501,
		"STATUSCHECK_UNKNOWN_UNSCHEDULABLE":            502,
		"STATUSCHECK_CONTAINER_WAITING_UNKNOWN":        503,
		"STATUSCHECK_UNKNOWN_EVENT":                    509,
		"DEPLOY_UNKNOWN":                               504,
		"SYNC_UNKNOWN":                                 505,
		"BUILD_UNKNOWN":                                506,
		"DEVINIT_UNKNOWN":                              507,
		"CLEANUP_UNKNOWN":                              508,
		"INIT_UNKNOWN":                                 510,
		"BUILD_DOCKER_UNKNOWN":                         511,
		"TEST_UNKNOWN":                                 512,
		"BUILD_GCB_BUILD_UNKNOWN_STATUS":               513,
		"SYNC_INIT_ERROR":                              601,
		"DEVINIT_REGISTER_BUILD_DEPS":                  701,
		"DEVINIT_REGISTER_TEST_DEPS":                   702,
		"DEVINIT_REGISTER_DEPLOY_DEPS":                 703,
		"DEVINIT_REGISTER_CONFIG_DEP":                  704,
		"DEVINIT_UNSUPPORTED_V1_MANIFEST":              705,
		"STATUSCHECK_USER_CANCELLED":                   800,
		"STATUSCHECK_DEADLINE_EXCEEDED":                801,
		"BUILD_CANCELLED":                              802,
		"DEPLOY_CANCELLED":                             803,
		"BUILD_DOCKER_CANCELLED":                       804,
		"BUILD_DOCKER_DEADLINE":                        805,
		"BUILD_GCB_BUILD_CANCELLED":                    806,
		"INIT_CREATE_TAGGER_ERROR":                     901,
		"INIT_MINIKUBE_PAUSED_ERROR":                   902,
		"INIT_MINIKUBE_NOT_RUNNING_ERROR":              903,
		"INIT_CREATE_BUILDER_ERROR":                    904,
		"INIT_CREATE_DEPLOYER_ERROR":                   905,
		"INIT_CREATE_TEST_DEP_ERROR":                   906,
		"INIT_CACHE_ERROR":                             907,
		"INIT_CREATE_WATCH_TRIGGER_ERROR":              908,
		"INIT_CREATE_ARTIFACT_DEP_ERROR":               909,
		"DEPLOY_CLUSTER_CONNECTION_ERR":                1001,
		"DEPLOY_DEBUG_HELPER_RETRIEVE_ERR":             1002,
		"DEPLOY_CLEANUP_ERR":                           1003,
		"DEPLOY_HELM_APPLY_LABELS":                     1004,
		"DEPLOY_HELM_USER_ERR":                         1005,
		"DEPLOY_NO_MATCHING_BUILD":                     1006,
		"DEPLOY_HELM_VERSION_ERR":                      1007,
		"DEPLOY_HELM_MIN_VERSION_ERR":                  1008,
		"DEPLOY_KUBECTL_VERSION_ERR":                   1109,
		"DEPLOY_KUBECTL_OFFLINE_MODE_ERR":              1010,
		"DEPLOY_ERR_WAITING_FOR_DELETION":              1011,
		"DEPLOY_READ_MANIFEST_ERR":                     1012,
		"DEPLOY_READ_REMOTE_MANIFEST_ERR":              1013,
		"DEPLOY_LIST_MANIFEST_ERR":                     1014,
		"DEPLOY_KUBECTL_USER_ERR":                      1015,
		"DEPLOY_KUSTOMIZE_USER_ERR":                    1016,
		"DEPLOY_REPLACE_IMAGE_ERR":                     1017,
		"DEPLOY_TRANSFORM_MANIFEST_ERR":                1018,
		"DEPLOY_SET_LABEL_ERR":                         1019,
		"DEPLOY_MANIFEST_WRITE_ERR":                    1020,
		"DEPLOY_PARSE_MANIFEST_IMAGES_ERR":             1021,
		"DEPLOY_HELM_CREATE_NS_NOT_AVAILABLE":          1022,
		"DEPLOY_CLUSTER_INTERNAL_SYSTEM_ERR":           1023,
		"DEPLOY_KPTFILE_INIT_ERR":                      1024,
		"TEST_USER_CONFIG_ERR":                         1101,
		"TEST_CST_USER_ERR":                            1102,
		"TEST_IMG_PULL_ERR":                            1103,
		"TEST_CUSTOM_CMD_PARSE_ERR":                    1104,
		"TEST_CUSTOM_CMD_RUN_NON_ZERO_EXIT_ERR":        1105,
		"TEST_CUSTOM_CMD_RUN_TIMEDOUT_ERR":             1106,
		"TEST_CUSTOM_CMD_RUN_CANCELLED_ERR":            1107,
		"TEST_CUSTOM_CMD_RUN_EXECUTION_ERR":            1108,
		"TEST_CUSTOM_CMD_RUN_EXITED_ERR":               1110,
		"TEST_CUSTOM_CMD_RUN_ERR":                      1111,
		"TEST_CUSTOM_DEPENDENCIES_CMD_ERR":             1112,
		"TEST_CUSTOM_DEPENDENCIES_UNMARSHALL_ERR":      1113,
		"TEST_CUSTOM_CMD_RETRIEVE_ERR":                 1114,
		"RENDER_KPTFILE_INIT_ERR":                      1501,
		"RENDER_KPTFILE_INVALID_YAML_ERR":              1401,
		"RENDER_KPTFILE_INVALID_SCHEMA_ERR":            1402,
		"CONFIG_FILE_PARSING_ERR":                      1201,
		"CONFIG_FILE_NOT_FOUND_ERR":                    1202,
		"CONFIG_DEPENDENCY_NOT_FOUND_ERR":              1203,
		"CONFIG_DUPLICATE_NAMES_SAME_FILE_ERR":         1204,
		"CONFIG_DUPLICATE_NAMES_ACROSS_FILES_ERR":      1205,
		"CONFIG_BAD_FILTER_ERR":                        1206,
		"CONFIG_ZERO_FOUND_ERR":                        1207,
		"CONFIG_APPLY_PROFILES_ERR":                    1208,
		"CONFIG_DEFAULT_VALUES_ERR":                    1209,
		"CONFIG_FILE_PATHS_SUBSTITUTION_ERR":           1210,
		"CONFIG_MULTI_IMPORT_PROFILE_CONFLICT_ERR":     1211,
		"CONFIG_PROFILES_NOT_FOUND_ERR":                1212,
		"CONFIG_UNKNOWN_API_VERSION_ERR":               1213,
		"CONFIG_UNKNOWN_VALIDATOR":                     1214,
		"CONFIG_UNKNOWN_TRANSFORMER":                   1215,
		"CONFIG_MISSING_MANIFEST_FILE_ERR":             1216,
		"CONFIG_REMOTE_REPO_CACHE_NOT_FOUND_ERR":       1217,
		"INSPECT_UNKNOWN_ERR":                          1301,
		"INSPECT_BUILD_ENV_ALREADY_EXISTS_ERR":         1302,
		"INSPECT_BUILD_ENV_INCORRECT_TYPE_ERR":         1303,
		"INSPECT_PROFILE_NOT_FOUND_ERR":                1304,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

// Enum for Suggestion codes
type SuggestionCode int32

const (
	// default nil suggestion.
	// This is usually set when no error happens.
	SuggestionCode_NIL SuggestionCode = 0
	// Add Default Repo
	SuggestionCode_ADD_DEFAULT_REPO SuggestionCode = 100
	// Verify Default Repo
	SuggestionCode_CHECK_DEFAULT_REPO SuggestionCode = 101
	// Verify default repo in the global config
	SuggestionCode_CHECK_DEFAULT_REPO_GLOBAL_CONFIG SuggestionCode = 102
	// run gcloud docker auth configure
	SuggestionCode_GCLOUD_DOCKER_AUTH_CONFIGURE SuggestionCode = 103
	// Run docker auth configure
	SuggestionCode_DOCKER_AUTH_CONFIGURE SuggestionCode = 104
	// Verify Gcloud Project
	SuggestionCode_CHECK_GCLOUD_PROJECT SuggestionCode = 105
	// Check if docker is running
	SuggestionCode_CHECK_DOCKER_RUNNING SuggestionCode = 106
	// Fix User Build Error
	SuggestionCode_FIX_USER_BUILD_ERR SuggestionCode = 107
	// Docker build internal error, try again
	SuggestionCode_DOCKER_BUILD_RETRY SuggestionCode = 108
	// Fix `cacheFrom` config for given artifact and try again
	SuggestionCode_FIX_CACHE_FROM_ARTIFACT_CONFIG SuggestionCode = 109
	// Fix `dockerfile` config for a given artifact and try again.
	SuggestionCode_FIX_SKAFFOLD_CONFIG_DOCKERFILE SuggestionCode = 110
	// Use a supported Jib plugin type
	SuggestionCode_FIX_JIB_PLUGIN_CONFIGURATION SuggestionCode = 111
	// Docker build network invalid docker container name (or id).
	SuggestionCode_FIX_DOCKER_NETWORK_CONTAINER_NAME SuggestionCode = 112
	// Docker build network container not existing in the current context.
	SuggestionCode_CHECK_DOCKER_NETWORK_CONTAINER_RUNNING SuggestionCode = 113
	// Executing extractContainerNameFromNetworkMode with a non valid mode (only container mode allowed)
	SuggestionCode_FIX_DOCKER_NETWORK_MODE_WHEN_EXTRACTING_CONTAINER_NAME SuggestionCode = 114
	// Prune Docker image
	SuggestionCode_RUN_DOCKER_PRUNE SuggestionCode = 115
	// Set Cleanup flag for skaffold command.
	SuggestionCode_SET_CLEANUP_FLAG SuggestionCode = 116
	// Check cluster connection
	SuggestionCode_CHECK_CLUSTER_CONNECTION SuggestionCode = 201
	// Check minikube status
	SuggestionCode_CHECK_MINIKUBE_STATUS SuggestionCode = 202
	// Install helm tool
	SuggestionCode_INSTALL_HELM SuggestionCode = 203
	// Upgrade helm tool
	SuggestionCode_UPGRADE_HELM SuggestionCode = 204
	// Fix helm `releases.artifactOverrides` config to match with `build.artiofacts`
	SuggestionCode_FIX_SKAFFOLD_CONFIG_HELM_ARTIFACT_OVERRIDES SuggestionCode = 205
	// Upgrade helm version to v3.2.0 and higher.
	SuggestionCode_UPGRADE_HELM32 SuggestionCode = 206
	// Set `releases.createNamespace` to false.
	SuggestionCode_FIX_SKAFFOLD_CONFIG_HELM_CREATE_NAMESPACE SuggestionCode = 207
	// Install kubectl tool
	SuggestionCode_INSTALL_KUBECTL SuggestionCode = 220
	// Container run error
	SuggestionCode_CHECK_CONTAINER_LOGS SuggestionCode = 301
	// Pod Health check error
	SuggestionCode_CHECK_READINESS_PROBE SuggestionCode = 302
	// Check Container image
	SuggestionCode_CHECK_CONTAINER_IMAGE SuggestionCode = 303
	// Node pressure error
	SuggestionCode_ADDRESS_NODE_MEMORY_PRESSURE SuggestionCode = 400
	// Node disk pressure error
	SuggestionCode_ADDRESS_NODE_DISK_PRESSURE SuggestionCode = 401
	// Node network unavailable error
	SuggestionCode_ADDRESS_NODE_NETWORK_UNAVAILABLE SuggestionCode = 402
	// Node PID pressure error
	SuggestionCode_ADDRESS_NODE_PID_PRESSURE SuggestionCode = 403
	// Node unschedulable error
	SuggestionCode_ADDRESS_NODE_UNSCHEDULABLE SuggestionCode = 404
	// Node unreachable error
	SuggestionCode_ADDRESS_NODE_UNREACHABLE SuggestionCode = 405
	// Node not ready error
	SuggestionCode_ADDRESS_NODE_NOT_READY SuggestionCode = 406
	// Scheduler failure error
	SuggestionCode_ADDRESS_FAILED_SCHEDULING SuggestionCode = 407
	// Cluster Connectivity error
	SuggestionCode_CHECK_HOST_CONNECTION SuggestionCode = 408
	// Minikube is stopped: use `minikube start`
	SuggestionCode_START_MINIKUBE SuggestionCode = 501
	// Minikube is paused: use `minikube unpause`
	SuggestionCode_UNPAUSE_MINIKUBE SuggestionCode = 502
	// Run Docker pull for the image with v1 manifest and try again.
	SuggestionCode_RUN_DOCKER_PULL SuggestionCode = 551
	// Rerun with correct offline flag value.
	SuggestionCode_SET_RENDER_FLAG_OFFLINE_FALSE SuggestionCode = 600
	// Manually run `kpt pkg init` or `kpt live init`
	SuggestionCode_KPTFILE_MANUAL_INIT SuggestionCode = 601
	// Check if the Kptfile is correct.
	SuggestionCode_KPTFILE_CHECK_YAML SuggestionCode = 602
	// Check configuration file path
	SuggestionCode_CONFIG_CHECK_FILE_PATH SuggestionCode = 700
	// Check dependency config definition
	SuggestionCode_CONFIG_CHECK_DEPENDENCY_DEFINITION SuggestionCode = 701
	// Change config name to avoid duplicates
	SuggestionCode_CONFIG_CHANGE_NAMES SuggestionCode = 702
	// Check config filter
	SuggestionCode_CONFIG_CHECK_FILTER SuggestionCode = 703
	// Check profile definition in current config
	SuggestionCode_CONFIG_CHECK_PROFILE_DEFINITION SuggestionCode = 704
	// Check active profile selection for dependency config
	SuggestionCode_CONFIG_CHECK_DEPENDENCY_PROFILES_SELECTION SuggestionCode = 705
	// Check profile selection flag
	SuggestionCode_CONFIG_CHECK_PROFILE_SELECTION SuggestionCode = 706
	// Fix config API version or upgrade the skaffold binary
	SuggestionCode_CONFIG_FIX_API_VERSION SuggestionCode = 707
	// Only the allow listed validators are acceptable in skaffold-managed mode.
	SuggestionCode_CONFIG_ALLOWLIST_VALIDATORS SuggestionCode = 708
	// Only the allow listed transformers are acceptable in skaffold-managed mode.
	SuggestionCode_CONFIG_ALLOWLIST_transformers SuggestionCode = 709
	// Check mising manifest file section of config and fix as needed.
	SuggestionCode_CONFIG_FIX_MISSING_MANIFEST_FILE SuggestionCode = 710
	// Enable remote repo sync, or clone manually
	SuggestionCode_CONFIG_ENABLE_REMOTE_REPO_SYNC SuggestionCode = 711
	// Create new build env in a profile instead, or use the 'modify' command
	SuggestionCode_INSPECT_USE_MODIFY_OR_NEW_PROFILE SuggestionCode = 800
	// Check profile selection, or use the 'add' command instead
	SuggestionCode_INSPECT_USE_ADD_BUILD_ENV SuggestionCode = 801
	// Check profile flag value
	SuggestionCode_INSPECT_CHECK_INPUT_PROFILE SuggestionCode = 802
	// Open an issue so this situation can be diagnosed
	SuggestionCode_OPEN_ISSUE SuggestionCode = 900
	// Test error suggestion codes
	SuggestionCode_CHECK_CUSTOM_COMMAND                    SuggestionCode = 1000
	SuggestionCode_FIX_CUSTOM_COMMAND_TIMEOUT              SuggestionCode = 1001
	SuggestionCode_CHECK_CUSTOM_COMMAND_DEPENDENCIES_CMD   SuggestionCode = 1002
	SuggestionCode_CHECK_CUSTOM_COMMAND_DEPENDENCIES_PATHS SuggestionCode = 1003
	SuggestionCode_CHECK_TEST_COMMAND_AND_IMAGE_NAME       SuggestionCode = 1004
)

// Enum value maps for SuggestionCode.
var (
	SuggestionCode_name = map[int32]string{
		0:    "NIL",
		100:  "ADD_DEFAULT_REPO",
		101:  "CHECK_DEFAULT_REPO",
		102:  "CHECK_DEFAULT_REPO_GLOBAL_CONFIG",
		103:  "GCLOUD_DOCKER_AUTH_CONFIGURE",
		104:  "DOCKER_AUTH_CONFIGURE",
		105:  "CHECK_GCLOUD_PROJECT",
		106:  "CHECK_DOCKER_RUNNING",
		107:  "FIX_USER_BUILD_ERR",
		108:  "DOCKER_BUILD_RETRY",
		109:  "FIX_CACHE_FROM_ARTIFACT_CONFIG",
		110:  "FIX_SKAFFOLD_CONFIG_DOCKERFILE",
		111:  "FIX_JIB_PLUGIN_CONFIGURATION",
		112:  "FIX_DOCKER_NETWORK_CONTAINER_NAME",
		113:  "CHECK_DOCKER_NETWORK_CONTAINER_RUNNING",
		114:  "FIX_DOCKER_NETWORK_MODE_WHEN_EXTRACTING_CONTAINER_NAME",
		115:  "RUN_DOCKER_PRUNE",
		116:  "SET_CLEANUP_FLAG",
		201:  "CHECK_CLUSTER_CONNECTION",
		202:  "CHECK_MINIKUBE_STATUS",
		203:  "INSTALL_HELM",
		204:  "UPGRADE_HELM",
		205:  "FIX_SKAFFOLD_CONFIG_HELM_ARTIFACT_OVERRIDES",
		206:  "UPGRADE_HELM32",
		207:  "FIX_SKAFFOLD_CONFIG_HELM_CREATE_NAMESPACE",
		220:  "INSTALL_KUBECTL",
		301:  "CHECK_CONTAINER_LOGS",
		302:  "CHECK_READINESS_PROBE",
		303:  "CHECK_CONTAINER_IMAGE",
		400:  "ADDRESS_NODE_MEMORY_PRESSURE",
		401:  "ADDRESS_NODE_DISK_PRESSURE",
		402:  "ADDRESS_NODE_NETWORK_UNAVAILABLE",
		403:  "ADDRESS_NODE_PID_PRESSURE",
		404:  "ADDRESS_NODE_UNSCHEDULABLE",
		405:  "ADDRESS_NODE_UNREACHABLE",
		406:  "ADDRESS_NODE_NOT_READY",
		407:  "ADDRESS_FAILED_SCHEDULING",
		408:  "CHECK_HOST_CONNECTION",
		501:  "START_MINIKUBE",
		502:  "UNPAUSE_MINIKUBE",
		551:  "RUN_DOCKER_PULL",
		600:  "SET_RENDER_FLAG_OFFLINE_FALSE",
		601:  "KPTFILE_MANUAL_INIT",
		602:  "KPTFILE_CHECK_YAML",
		700:  "CONFIG_CHECK_FILE_PATH",
		701:  "CONFIG_CHECK_DEPENDENCY_DEFINITION",
		702:  "CONFIG_CHANGE_NAMES",
		703:  "CONFIG_CHECK_FILTER",
		704:  "CONFIG_CHECK_PROFILE_DEFINITION",
		705:  "CONFIG_CHECK_DEPENDENCY_PROFILES_SELECTION",
		706:  "CONFIG_CHECK_PROFILE_SELECTION",
		707:  "CONFIG_FIX_API_VERSION",
		708:  "CONFIG_ALLOWLIST_VALIDATORS",
		709:  "CONFIG_ALLOWLIST_transformers",
		710:  "CONFIG_FIX_MISSING_MANIFEST_FILE",
		711:  "CONFIG_ENABLE_REMOTE_REPO_SYNC",
		800:  "INSPECT_USE_MODIFY_OR_NEW_PROFILE",
		801:  "INSPECT_USE_ADD_BUILD_ENV",
		802:  "INSPECT_CHECK_INPUT_PROFILE",
		900:  "OPEN_ISSUE",
		1000: "CHECK_CUSTOM_COMMAND",
		1001: "FIX_CUSTOM_COMMAND_TIMEOUT",
		1002: "CHECK_CUSTOM_COMMAND_DEPENDENCIES_CMD",
		1003: "CHECK_CUSTOM_COMMAND_DEPENDENCIES_PATHS",
		1004: "CHECK_TEST_COMMAND_AND_IMAGE_NAME",
	}
	SuggestionCode_value = map[string]int32{
		"NIL":                                                    0,
		"ADD_DEFAULT_REPO":                                       100,
		"CHECK_DEFAULT_REPO":                                     101,
		"CHECK_DEFAULT_REPO_GLOBAL_CONFIG":                       102,
		"GCLOUD_DOCKER_AUTH_CONFIGURE":                           103,
		"DOCKER_AUTH_CONFIGURE":                                  104,
		"CHECK_GCLOUD_PROJECT":                                   105,
		"CHECK_DOCKER_RUNNING":                                   106,
		"FIX_USER_BUILD_ERR":                                     107,
		"DOCKER_BUILD_RETRY":                                     108,
		"FIX_CACHE_FROM_ARTIFACT_CONFIG":                         109,
		"FIX_SKAFFOLD_CONFIG_DOCKERFILE":                         110,
		"FIX_JIB_PLUGIN_CONFIGURATION":                           111,
		"FIX_DOCKER_NETWORK_CONTAINER_NAME":                      112,
		"CHECK_DOCKER_NETWORK_CONTAINER_RUNNING":                 113,
		"FIX_DOCKER_NETWORK_MODE_WHEN_EXTRACTING_CONTAINER_NAME": 114,
		"RUN_DOCKER_PRUNE":                                       115,
		"SET_CLEANUP_FLAG":                                       116,
		"CHECK_CLUSTER_CONNECTION":                               201,
		"CHECK_MINIKUBE_STATUS":                                  202,
		"INSTALL_HELM":                                           203,
		"UPGRADE_HELM":                                           204,
		"FIX_SKAFFOLD_CONFIG_HELM_ARTIFACT_OVERRIDES":            205,
		"UPGRADE_HELM32":                                         206,
		"FIX_SKAFFOLD_CONFIG_HELM_CREATE_NAMESPACE":              207,
		"INSTALL_KUBECTL":                                        220,
		"CHECK_CONTAINER_LOGS":                                   301,
		"CHECK_READINESS_PROBE":                                  302,
		"CHECK_CONTAINER_IMAGE":                                  303,
		"ADDRESS_NODE_MEMORY_PRESSURE":                           400,
		"ADDRESS_NODE_DISK_PRESSURE":                             401,
		"ADDRESS_NODE_NETWORK_UNAVAILABLE":                       402,
		"ADDRESS_NODE_PID_PRESSURE":                              403,
		"ADDRESS_NODE_UNSCHEDULABLE":                             404,
		"ADDRESS_NODE_UNREACHABLE":                               405,
		"ADDRESS_NODE_NOT_READY":                                 406,
		"ADDRESS_FAILED_SCHEDULING":                              407,
		"CHECK_HOST_CONNECTION":                                  408,
		"START_MINIKUBE":                                         501,
		"UNPAUSE_MINIKUBE":                                       502,
		"RUN_DOCKER_PULL":                                        551,
		"SET_RENDER_FLAG_OFFLINE_FALSE":                          600,
		"KPTFILE_MANUAL_INIT":                                    601,
		"KPTFILE_CHECK_YAML":                                     602,
		"CONFIG_CHECK_FILE_PATH":                                 700,
		"CONFIG_CHECK_DEPENDENCY_DEFINITION":                     701,
		"CONFIG_CHANGE_NAMES":                                    702,
		"CONFIG_CHECK_FILTER":                                    703,
		"CONFIG_CHECK_PROFILE_DEFINITION":                        704,
		"CONFIG_CHECK_DEPENDENCY_PROFILES_SELECTION":             705,
		"CONFIG_CHECK_PROFILE_SELECTION":                         706,
		"CONFIG_FIX_API_VERSION":                                 707,
		"CONFIG_ALLOWLIST_VALIDATORS":                            708,
		"CONFIG_ALLOWLIST_transformers":                          709,
		"CONFIG_FIX_MISSING_MANIFEST_FILE":                       710,
		"CONFIG_ENABLE_REMOTE_REPO_SYNC":                         711,
		"INSPECT_USE_MODIFY_OR_NEW_PROFILE":                      800,
		"INSPECT_USE_ADD_BUILD_ENV":                              801,
		"INSPECT_CHECK_INPUT_PROFILE":                            802,
		"OPEN_ISSUE":                                             900,
		"CHECK_CUSTOM_COMMAND":                                   1000,
		"FIX_CUSTOM_COMMAND_TIMEOUT":                             1001,
		"CHECK_CUSTOM_COMMAND_DEPENDENCIES_CMD":                  1002,
		"CHECK_CUSTOM_COMMAND_DEPENDENCIES_PATHS":                1003,
		"CHECK_TEST_COMMAND_AND_IMAGE_NAME":                      1004,
	}
)

func (x SuggestionCode) Enum() *SuggestionCode {
	p := new(SuggestionCode)
	*p = x
	return p
}

func (x SuggestionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuggestionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (SuggestionCode) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x SuggestionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuggestionCode.Descriptor instead.
func (SuggestionCode) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x6f, 0x0a, 0x0b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x49, 0x42, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x41, 0x5a, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x43, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x41, 0x4e, 0x49, 0x4b, 0x4f, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x06, 0x2a, 0x44, 0x0a, 0x09, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x43, 0x42, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x03, 0x2a, 0x4b, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x6b,
	0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x57, 0x4b, 0x38, 0x53, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x4c,
	0x4d, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x50, 0x54,
	0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x58, 0x0a, 0x0c, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x4c, 0x4d, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x54, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x4b, 0x50, 0x54, 0x10, 0x04, 0x2a, 0x49, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x49, 0x4b, 0x55, 0x42, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03,
	0x2a, 0x63, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x07, 0x2a, 0xa8, 0x2c, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xc9, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xcc, 0x01, 0x12,
	0x13, 0x0a, 0x0e, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0xca, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0xcb, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x66, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x68, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x69, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x6a, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6b, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6c, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6d,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6e,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52,
	0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6f,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x70, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x71, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44,
	0x4f, 0x43, 0x4b, 0x45, 0x52, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44,
	0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x75, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x7f, 0x12, 0x21, 0x0a, 0x1d, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x76, 0x12, 0x21,
	0x0a, 0x1d, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x4a, 0x49, 0x42, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x77, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4a, 0x49, 0x42, 0x5f, 0x47,
	0x52, 0x41, 0x44, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x78, 0x12,
	0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4a, 0x49, 0x42, 0x5f, 0x4d, 0x41, 0x56,
	0x45, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x79, 0x12, 0x2a, 0x0a, 0x26,
	0x49, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x53, 0x10, 0x7a, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x7b, 0x12, 0x30, 0x0a, 0x2c, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x7c, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e,
	0x49, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x7d,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x7e, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x80, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43,
	0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0x81, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47,
	0x43, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x82, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x83, 0x01, 0x12, 0x21, 0x0a, 0x1c,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x84, 0x01, 0x12,
	0x22, 0x0a, 0x1d, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x85, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x86, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x87, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x88,
	0x01, 0x12, 0x2c, 0x0a, 0x27, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x89, 0x01, 0x12,
	0x20, 0x0a, 0x1b, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x43, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x8a,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x4a,
	0x49, 0x42, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x8b, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43,
	0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x8c, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x47, 0x43, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x8d, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x8e, 0x01, 0x12, 0x21, 0x0a, 0x1c,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x8f, 0x01, 0x12,
	0x27, 0x0a, 0x22, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x90, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x91, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xac, 0x02,
	0x12, 0x23, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0xad, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xae, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0xaf, 0x02,
	0x12, 0x2b, 0x0a, 0x26, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x4f,
	0x55, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xb0, 0x02, 0x12, 0x25, 0x0a,
	0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0xe4, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0xe5, 0x02,
	0x12, 0x25, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xe6, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x90, 0x03, 0x12, 0x23,
	0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45,
	0x10, 0x91, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x92, 0x03, 0x12, 0x22,
	0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10,
	0x93, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x94, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x95, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x96, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x97, 0x03, 0x12,
	0x27, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4b,
	0x55, 0x42, 0x45, 0x43, 0x54, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x99, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x54, 0x4c, 0x5f,
	0x50, 0x49, 0x44, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x9a, 0x03, 0x12, 0x29, 0x0a,
	0x24, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4b, 0x55, 0x42,
	0x45, 0x43, 0x54, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x9b, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x9c, 0x03, 0x12,
	0x21, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50,
	0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10,
	0xc3, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xf5, 0x03,
	0x12, 0x26, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf6, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0xf7, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0xfd, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xf8, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xf9, 0x03, 0x12, 0x12, 0x0a, 0x0d,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xfa, 0x03,
	0x12, 0x14, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xfb, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55,
	0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xfc, 0x03, 0x12, 0x11, 0x0a, 0x0c,
	0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xfe, 0x03, 0x12,
	0x19, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x80, 0x04, 0x12, 0x23, 0x0a,
	0x1e, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x81, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd9, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x53, 0x10, 0xbd, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x44, 0x45,
	0x56, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x53, 0x10, 0xbe, 0x05, 0x12, 0x21, 0x0a, 0x1c, 0x44,
	0x45, 0x56, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x44, 0x45, 0x50, 0x53, 0x10, 0xbf, 0x05, 0x12, 0x20,
	0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x50, 0x10, 0xc0, 0x05,
	0x12, 0x24, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x31, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46,
	0x45, 0x53, 0x54, 0x10, 0xc1, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0xa0, 0x06, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xa1, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xa2,
	0x06, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xa3, 0x06, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0xa4, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44,
	0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0xa5,
	0x06, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x43, 0x42, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xa6,
	0x06, 0x12, 0x1d, 0x0a, 0x18, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x85, 0x07,
	0x12, 0x1f, 0x0a, 0x1a, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4b, 0x55, 0x42,
	0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x86,
	0x07, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4b, 0x55,
	0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x87, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x88, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x89, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x50,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8a, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x4e, 0x49,
	0x54, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8b, 0x07,
	0x12, 0x24, 0x0a, 0x1f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x8c, 0x07, 0x12, 0x23, 0x0a, 0x1e, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x44,
	0x45, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8d, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xe9, 0x07, 0x12,
	0x25, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f,
	0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xea, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xeb, 0x07, 0x12,
	0x1d, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0xec, 0x07, 0x12, 0x19,
	0x0a, 0x14, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xed, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0xee, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xef, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xf0, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x54, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd5, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x54, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xf2, 0x07, 0x12,
	0x24, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xf3, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0xf4, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xf5, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45,
	0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xf6, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x54, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0xf7, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x5f, 0x4b, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0xf8, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xf9, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xfa, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xfb, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f,
	0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xfc, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f,
	0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xfd, 0x07, 0x12, 0x28, 0x0a, 0x23,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0xfe, 0x07, 0x12, 0x27, 0x0a, 0x22, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xff, 0x07, 0x12,
	0x1c, 0x0a, 0x17, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x4b, 0x50, 0x54, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x80, 0x08, 0x12, 0x19, 0x0a,
	0x14, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xcd, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x43, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xce, 0x08,
	0x12, 0x16, 0x0a, 0x11, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x47, 0x5f, 0x50, 0x55, 0x4c,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xcf, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd0, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0xd1, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x44, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd2, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x52,
	0x55, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0xd3, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd4, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x52,
	0x55, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd6, 0x08,
	0x12, 0x1c, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd7, 0x08, 0x12, 0x25,
	0x0a, 0x20, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x45,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xd8, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x49, 0x45,
	0x53, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0xd9, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xda, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x4b, 0x50, 0x54, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0xdd, 0x0b, 0x12, 0x24, 0x0a, 0x1f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4b,
	0x50, 0x54, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x59,
	0x41, 0x4d, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xf9, 0x0a, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x50, 0x54, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0xfa, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xb1, 0x09,
	0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xb2, 0x09,
	0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xb3, 0x09, 0x12, 0x29, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xb4,
	0x09, 0x12, 0x2c, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x52, 0x4f,
	0x53, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xb5, 0x09, 0x12,
	0x1a, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xb6, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0xb7, 0x09, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0xb8, 0x09, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0xb9, 0x09, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xba, 0x09,
	0x12, 0x2d, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xbb, 0x09, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0xbc, 0x09, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xbd, 0x09, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0xbe, 0x09, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x4f, 0x52, 0x4d, 0x45, 0x52, 0x10, 0xbf, 0x09, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46,
	0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xc0, 0x09, 0x12,
	0x2b, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xc1, 0x09, 0x12, 0x18, 0x0a, 0x13,
	0x49, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x95, 0x0a, 0x12, 0x29, 0x0a, 0x24, 0x49, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x96,
	0x0a, 0x12, 0x29, 0x0a, 0x24, 0x49, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x97, 0x0a, 0x12, 0x22, 0x0a, 0x1d,
	0x49, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x98, 0x0a,
	0x2a, 0x8f, 0x10, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x44, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x10, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x10, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x66,
	0x12, 0x20, 0x0a, 0x1c, 0x47, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45,
	0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45,
	0x10, 0x67, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x10, 0x68, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x47, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x69, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x6a, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x58, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6b, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x43,
	0x4b, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10,
	0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x58, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x6d, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x4b, 0x41,
	0x46, 0x46, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x4f, 0x43,
	0x4b, 0x45, 0x52, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x58,
	0x5f, 0x4a, 0x49, 0x42, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6f, 0x12, 0x25, 0x0a, 0x21, 0x46,
	0x49, 0x58, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x70, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x4f, 0x43, 0x4b,
	0x45, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x71, 0x12, 0x3a,
	0x0a, 0x36, 0x46, 0x49, 0x58, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x48, 0x45, 0x4e, 0x5f, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55,
	0x4e, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x73,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x10, 0x74, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xc9, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4d,
	0x49, 0x4e, 0x49, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xca,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x45, 0x4c,
	0x4d, 0x10, 0xcb, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x48, 0x45, 0x4c, 0x4d, 0x10, 0xcc, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x46, 0x49, 0x58, 0x5f, 0x53,
	0x4b, 0x41, 0x46, 0x46, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x48,
	0x45, 0x4c, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x52, 0x49, 0x44, 0x45, 0x53, 0x10, 0xcd, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x33, 0x32, 0x10, 0xce, 0x01, 0x12, 0x2e,
	0x0a, 0x29, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x4b, 0x41, 0x46, 0x46, 0x4f, 0x4c, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x48, 0x45, 0x4c, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0xcf, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x43, 0x54,
	0x4c, 0x10, 0xdc, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0xad, 0x02, 0x12,
	0x1a, 0x0a, 0x15, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0xae, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0xaf, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x90, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x91, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x92, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10,
	0x93, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x94, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x95, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x96, 0x03, 0x12,
	0x1e, 0x0a, 0x19, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x97, 0x03, 0x12,
	0x1a, 0x0a, 0x15, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x98, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4b, 0x55, 0x42, 0x45, 0x10, 0xf5, 0x03,
	0x12, 0x15, 0x0a, 0x10, 0x55, 0x4e, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49,
	0x4b, 0x55, 0x42, 0x45, 0x10, 0xf6, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x5f, 0x44,
	0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x10, 0xa7, 0x04, 0x12, 0x22, 0x0a,
	0x1d, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0xd8,
	0x04, 0x12, 0x18, 0x0a, 0x13, 0x4b, 0x50, 0x54, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xd9, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x4b,
	0x50, 0x54, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x59, 0x41, 0x4d,
	0x4c, 0x10, 0xda, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0xbc,
	0x05, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xbd, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x10, 0xbe, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0xbf, 0x05, 0x12, 0x24,
	0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xc0, 0x05, 0x12, 0x2f, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xc1, 0x05, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc2, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0xc3, 0x05, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0xc4, 0x05, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x10, 0xc5, 0x05, 0x12, 0x25, 0x0a,
	0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0xc6, 0x05, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xc7, 0x05, 0x12, 0x26, 0x0a, 0x21, 0x49, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f,
	0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0xa0,
	0x06, 0x12, 0x1e, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x10, 0xa1,
	0x06, 0x12, 0x20, 0x0a, 0x1b, 0x49, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0xa2, 0x06, 0x12, 0x0f, 0x0a, 0x0a, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x10, 0x84, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0xe8, 0x07, 0x12,
	0x1f, 0x0a, 0x1a, 0x46, 0x49, 0x58, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xe9, 0x07,
	0x12, 0x2a, 0x0a, 0x25, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x4e, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0xea, 0x07, 0x12, 0x2c, 0x0a, 0x27,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x49, 0x45,
	0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0xeb, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0xec, 0x07, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_enums_proto_goTypes = []interface{}{
	(BuilderType)(0),    // 0: proto.enums.BuilderType
	(BuildType)(0),      // 1: proto.enums.BuildType
	(TesterType)(0),     // 2: proto.enums.TesterType
	(RenderType)(0),     // 3: proto.enums.RenderType
	(DeployerType)(0),   // 4: proto.enums.DeployerType
	(ClusterType)(0),    // 5: proto.enums.ClusterType
	(LogLevel)(0),       // 6: proto.enums.LogLevel
	(StatusCode)(0),     // 7: proto.enums.StatusCode
	(SuggestionCode)(0), // 8: proto.enums.SuggestionCode
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
