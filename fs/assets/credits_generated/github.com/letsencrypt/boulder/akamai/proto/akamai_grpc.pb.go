// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: akamai.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AkamaiPurgerClient is the client API for AkamaiPurger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AkamaiPurgerClient interface {
	Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type akamaiPurgerClient struct {
	cc grpc.ClientConnInterface
}

func NewAkamaiPurgerClient(cc grpc.ClientConnInterface) AkamaiPurgerClient {
	return &akamaiPurgerClient{cc}
}

func (c *akamaiPurgerClient) Purge(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/akamai.AkamaiPurger/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AkamaiPurgerServer is the server API for AkamaiPurger service.
// All implementations must embed UnimplementedAkamaiPurgerServer
// for forward compatibility
type AkamaiPurgerServer interface {
	Purge(context.Context, *PurgeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAkamaiPurgerServer()
}

// UnimplementedAkamaiPurgerServer must be embedded to have forward compatible implementations.
type UnimplementedAkamaiPurgerServer struct {
}

func (UnimplementedAkamaiPurgerServer) Purge(context.Context, *PurgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (UnimplementedAkamaiPurgerServer) mustEmbedUnimplementedAkamaiPurgerServer() {}

// UnsafeAkamaiPurgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AkamaiPurgerServer will
// result in compilation errors.
type UnsafeAkamaiPurgerServer interface {
	mustEmbedUnimplementedAkamaiPurgerServer()
}

func RegisterAkamaiPurgerServer(s grpc.ServiceRegistrar, srv AkamaiPurgerServer) {
	s.RegisterService(&AkamaiPurger_ServiceDesc, srv)
}

func _AkamaiPurger_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkamaiPurgerServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akamai.AkamaiPurger/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkamaiPurgerServer).Purge(ctx, req.(*PurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AkamaiPurger_ServiceDesc is the grpc.ServiceDesc for AkamaiPurger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AkamaiPurger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akamai.AkamaiPurger",
	HandlerType: (*AkamaiPurgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Purge",
			Handler:    _AkamaiPurger_Purge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "akamai.proto",
}
