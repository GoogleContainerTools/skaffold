{
  "swagger": "2.0",
  "info": {
    "version": "version not set",
    "description": "v2/skaffold.proto"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/applicationLogs": {
      "get": {
        "summary": "Returns all the user application logs of the current Skaffold execution",
        "operationId": "ApplicationLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/v2Event"
            }
          }
        },
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    },
    "/v2/build/auto_execute": {
      "put": {
        "summary": "Allows for enabling or disabling automatic build trigger",
        "operationId": "AutoBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2TriggerState"
            }
          }
        ],
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    },
    "/v2/deploy/auto_execute": {
      "put": {
        "summary": "Allows for enabling or disabling automatic deploy trigger",
        "operationId": "AutoDeploy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2TriggerState"
            }
          }
        ],
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    },
    "/v2/events": {
      "get": {
        "summary": "Returns all the events of the current Skaffold execution from the start",
        "operationId": "Events",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/v2Event"
            }
          }
        },
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    },
    "/v2/events/handle": {
      "post": {
        "summary": "EXPERIMENTAL. It allows for custom events to be implemented in custom builders for example.",
        "operationId": "Handle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2Event"
            }
          }
        ],
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    },
    "/v2/execute": {
      "post": {
        "summary": "Allows for a single execution of some or all of the phases (build, sync, deploy) in case autoBuild, autoDeploy or autoSync are disabled.",
        "operationId": "Execute",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2Intent"
            }
          }
        ],
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    },
    "/v2/state": {
      "get": {
        "summary": "Returns the state of the current Skaffold execution",
        "operationId": "GetState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2State"
            }
          }
        },
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    },
    "/v2/sync/auto_execute": {
      "put": {
        "summary": "Allows for enabling or disabling automatic sync trigger",
        "operationId": "AutoSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2TriggerState"
            }
          }
        ],
        "tags": [
          "SkaffoldV2Service"
        ]
      }
    }
  },
  "definitions": {
    "BuildMetadataArtifact": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/enumsBuilderType"
        },
        "name": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "dockerfile": {
          "type": "string"
        }
      }
    },
    "DeployMetadataDeployer": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/enumsDeployerType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RenderMetadataRenderer": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/enumsRenderType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TestMetadataTester": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/enumsTesterType"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "enumsBuildType": {
      "type": "string",
      "enum": [
        "UNKNOWN_BUILD_TYPE",
        "CLUSTER",
        "GCB",
        "LOCAL"
      ],
      "default": "UNKNOWN_BUILD_TYPE",
      "description": "Enum indicating build type i.e. local, cluster vs GCB\n- UNKNOWN_BUILD_TYPE: Could not determine Build Type\n - CLUSTER: Cluster Build\n - GCB: GCB Build\n - LOCAL: Local Build"
    },
    "enumsBuilderType": {
      "type": "string",
      "enum": [
        "UNKNOWN_BUILDER_TYPE",
        "JIB",
        "BAZEL",
        "BUILDPACKS",
        "CUSTOM",
        "KANIKO",
        "DOCKER",
        "KO"
      ],
      "default": "UNKNOWN_BUILDER_TYPE",
      "description": "Enum indicating builders used\n- UNKNOWN_BUILDER_TYPE: Could not determine builder type\n - JIB: JIB Builder\n - BAZEL: Bazel Builder\n - BUILDPACKS: Buildpacks Builder\n - CUSTOM: Custom Builder\n - KANIKO: Kaniko Builder\n - DOCKER: Docker Builder\n - KO: Ko Builder"
    },
    "enumsClusterType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CLUSTER_TYPE",
        "MINIKUBE",
        "GKE",
        "OTHER"
      ],
      "default": "UNKNOWN_CLUSTER_TYPE",
      "description": "Enum indicating cluster type the application is deployed to\n- UNKNOWN_CLUSTER_TYPE: Could not determine Cluster Type\n - MINIKUBE: Minikube Cluster\n - GKE: GKE cluster\n - OTHER: All Cluster except Minikube and GKE"
    },
    "enumsDeployerType": {
      "type": "string",
      "enum": [
        "UNKNOWN_DEPLOYER_TYPE",
        "HELM",
        "KUSTOMIZE",
        "KUBECTL",
        "KPT"
      ],
      "default": "UNKNOWN_DEPLOYER_TYPE",
      "description": "Enum indicating deploy tools used\n- UNKNOWN_DEPLOYER_TYPE: Could not determine Deployer Type\n - HELM: Helm Deployer\n - KUSTOMIZE: Kustomize Deployer\n - KUBECTL: Kubectl Deployer\n - KPT: kpt Deployer"
    },
    "enumsLogLevel": {
      "type": "string",
      "enum": [
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR",
        "FATAL",
        "PANIC",
        "TRACE",
        "STANDARD"
      ],
      "default": "DEBUG",
      "description": "Enum indicating the log level of a line of output\n- DEBUG: Debug Level\n - INFO: Info Level\n - WARN: Warn Level\n - ERROR: Error Level\n - FATAL: Fatal Level\n - PANIC: Panic Level\n - TRACE: Trace Level\n - STANDARD: User-visible output level"
    },
    "enumsRenderType": {
      "type": "string",
      "enum": [
        "UNKNOWN_RENDER_TYPE",
        "RAWK8S",
        "KUSTOMIZE_MANIFEST",
        "HELM_CHART",
        "KPT_MANIFEST"
      ],
      "default": "UNKNOWN_RENDER_TYPE",
      "description": "Enum indicating render manifests type\n- UNKNOWN_RENDER_TYPE: Could not determine Render Type\n - RAWK8S: Raw Manifests\n - KUSTOMIZE_MANIFEST: kustomize manifests\n - HELM_CHART: helm charts\n - KPT_MANIFEST: kpt manifests"
    },
    "enumsStatusCode": {
      "type": "string",
      "enum": [
        "OK",
        "STATUSCHECK_SUCCESS",
        "BUILD_SUCCESS",
        "RENDER_SUCCESS",
        "DEPLOY_SUCCESS",
        "TEST_SUCCESS",
        "BUILD_PUSH_ACCESS_DENIED",
        "BUILD_PROJECT_NOT_FOUND",
        "BUILD_DOCKER_DAEMON_NOT_RUNNING",
        "BUILD_USER_ERROR",
        "BUILD_DOCKER_UNAVAILABLE",
        "BUILD_DOCKER_UNAUTHORIZED",
        "BUILD_DOCKER_SYSTEM_ERR",
        "BUILD_DOCKER_NOT_MODIFIED_ERR",
        "BUILD_DOCKER_NOT_IMPLEMENTED_ERR",
        "BUILD_DOCKER_DATA_LOSS_ERR",
        "BUILD_DOCKER_FORBIDDEN_ERR",
        "BUILD_DOCKER_CONFLICT_ERR",
        "BUILD_DOCKER_ERROR_NOT_FOUND",
        "BUILD_DOCKER_INVALID_PARAM_ERR",
        "BUILD_DOCKERFILE_NOT_FOUND",
        "BUILD_DOCKER_CACHE_FROM_PULL_ERR",
        "BUILD_DOCKER_GET_DIGEST_ERR",
        "BUILD_DOCKER_NO_SPACE_ERR",
        "BUILD_REGISTRY_GET_DIGEST_ERR",
        "BUILD_UNKNOWN_JIB_PLUGIN_TYPE",
        "BUILD_JIB_GRADLE_DEP_ERR",
        "BUILD_JIB_MAVEN_DEP_ERR",
        "INIT_DOCKER_NETWORK_LISTING_CONTAINERS",
        "INIT_DOCKER_NETWORK_INVALID_CONTAINER_NAME",
        "INIT_DOCKER_NETWORK_CONTAINER_DOES_NOT_EXIST",
        "INIT_DOCKER_NETWORK_INVALID_MODE",
        "INIT_DOCKER_NETWORK_PARSE_ERR",
        "BUILD_GCB_CREATE_BUILD_ERR",
        "BUILD_GCB_GET_BUILD_ID_ERR",
        "BUILD_GCB_GET_BUILD_STATUS_ERR",
        "BUILD_GCB_GET_BUILD_LOG_ERR",
        "BUILD_GCB_COPY_BUILD_LOG_ERR",
        "BUILD_GCB_GET_BUILT_IMAGE_ERR",
        "BUILD_GCB_BUILD_FAILED",
        "BUILD_GCB_BUILD_INTERNAL_ERR",
        "BUILD_GCB_BUILD_TIMEOUT",
        "BUILD_GCB_GENERATE_BUILD_DESCRIPTOR_ERR",
        "BUILD_GCB_UPLOAD_TO_GCS_ERR",
        "BUILD_GCB_JIB_DEPENDENCY_ERR",
        "BUILD_GCB_GET_DEPENDENCY_ERR",
        "BUILD_GCB_GET_GCS_BUCKET_ERR",
        "BUILD_GCB_CREATE_BUCKET_ERR",
        "BUILD_GCB_EXTRACT_PROJECT_ID",
        "BUILD_GET_CLOUD_STORAGE_CLIENT_ERR",
        "BUILD_GET_CLOUD_BUILD_CLIENT_ERR",
        "BUILD_UNKNOWN_PLATFORM_FLAG",
        "BUILD_CROSS_PLATFORM_ERR",
        "BUILD_CROSS_PLATFORM_NO_REGISTRY_ERR",
        "STATUSCHECK_IMAGE_PULL_ERR",
        "STATUSCHECK_CONTAINER_CREATING",
        "STATUSCHECK_RUN_CONTAINER_ERR",
        "STATUSCHECK_CONTAINER_TERMINATED",
        "STATUSCHECK_DEPLOYMENT_ROLLOUT_PENDING",
        "STATUSCHECK_STANDALONE_PODS_PENDING",
        "STATUSCHECK_CONTAINER_RESTARTING",
        "STATUSCHECK_UNHEALTHY",
        "STATUSCHECK_CONTAINER_EXEC_ERROR",
        "STATUSCHECK_NODE_MEMORY_PRESSURE",
        "STATUSCHECK_NODE_DISK_PRESSURE",
        "STATUSCHECK_NODE_NETWORK_UNAVAILABLE",
        "STATUSCHECK_NODE_PID_PRESSURE",
        "STATUSCHECK_NODE_UNSCHEDULABLE",
        "STATUSCHECK_NODE_UNREACHABLE",
        "STATUSCHECK_NODE_NOT_READY",
        "STATUSCHECK_FAILED_SCHEDULING",
        "STATUSCHECK_KUBECTL_CONNECTION_ERR",
        "STATUSCHECK_KUBECTL_PID_KILLED",
        "STATUSCHECK_KUBECTL_CLIENT_FETCH_ERR",
        "STATUSCHECK_DEPLOYMENT_FETCH_ERR",
        "STATUSCHECK_STANDALONE_PODS_FETCH_ERR",
        "STATUSCHECK_CONFIG_CONNECTOR_RESOURCES_FETCH_ERR",
        "STATUSCHECK_STATEFULSET_FETCH_ERR",
        "STATUSCHECK_POD_INITIALIZING",
        "STATUSCHECK_CONFIG_CONNECTOR_IN_PROGRESS",
        "STATUSCHECK_CONFIG_CONNECTOR_FAILED",
        "STATUSCHECK_CONFIG_CONNECTOR_TERMINATING",
        "STATUSCHECK_CONFIG_CONNECTOR_NOT_FOUND",
        "UNKNOWN_ERROR",
        "STATUSCHECK_UNKNOWN",
        "STATUSCHECK_UNKNOWN_UNSCHEDULABLE",
        "STATUSCHECK_CONTAINER_WAITING_UNKNOWN",
        "STATUSCHECK_UNKNOWN_EVENT",
        "STATUSCHECK_INTERNAL_ERROR",
        "DEPLOY_UNKNOWN",
        "SYNC_UNKNOWN",
        "BUILD_UNKNOWN",
        "DEVINIT_UNKNOWN",
        "CLEANUP_UNKNOWN",
        "INIT_UNKNOWN",
        "BUILD_DOCKER_UNKNOWN",
        "TEST_UNKNOWN",
        "BUILD_GCB_BUILD_UNKNOWN_STATUS",
        "SYNC_INIT_ERROR",
        "DEVINIT_REGISTER_BUILD_DEPS",
        "DEVINIT_REGISTER_TEST_DEPS",
        "DEVINIT_REGISTER_DEPLOY_DEPS",
        "DEVINIT_REGISTER_CONFIG_DEP",
        "DEVINIT_UNSUPPORTED_V1_MANIFEST",
        "DEVINIT_REGISTER_RENDER_DEPS",
        "STATUSCHECK_USER_CANCELLED",
        "STATUSCHECK_DEADLINE_EXCEEDED",
        "BUILD_CANCELLED",
        "DEPLOY_CANCELLED",
        "BUILD_DOCKER_CANCELLED",
        "BUILD_DOCKER_DEADLINE",
        "BUILD_GCB_BUILD_CANCELLED",
        "INIT_CREATE_TAGGER_ERROR",
        "INIT_MINIKUBE_PAUSED_ERROR",
        "INIT_MINIKUBE_NOT_RUNNING_ERROR",
        "INIT_CREATE_BUILDER_ERROR",
        "INIT_CREATE_DEPLOYER_ERROR",
        "INIT_CREATE_TEST_DEP_ERROR",
        "INIT_CACHE_ERROR",
        "INIT_CREATE_WATCH_TRIGGER_ERROR",
        "INIT_CREATE_ARTIFACT_DEP_ERROR",
        "INIT_CLOUD_RUN_LOCATION_ERROR",
        "DEPLOY_CLUSTER_CONNECTION_ERR",
        "DEPLOY_DEBUG_HELPER_RETRIEVE_ERR",
        "DEPLOY_CLEANUP_ERR",
        "DEPLOY_HELM_APPLY_LABELS",
        "DEPLOY_HELM_USER_ERR",
        "DEPLOY_NO_MATCHING_BUILD",
        "DEPLOY_HELM_VERSION_ERR",
        "DEPLOY_HELM_MIN_VERSION_ERR",
        "DEPLOY_KUBECTL_VERSION_ERR",
        "DEPLOY_KUBECTL_OFFLINE_MODE_ERR",
        "DEPLOY_ERR_WAITING_FOR_DELETION",
        "DEPLOY_READ_MANIFEST_ERR",
        "DEPLOY_READ_REMOTE_MANIFEST_ERR",
        "DEPLOY_LIST_MANIFEST_ERR",
        "DEPLOY_KUBECTL_USER_ERR",
        "DEPLOY_KUSTOMIZE_USER_ERR",
        "DEPLOY_REPLACE_IMAGE_ERR",
        "DEPLOY_TRANSFORM_MANIFEST_ERR",
        "DEPLOY_SET_LABEL_ERR",
        "DEPLOY_MANIFEST_WRITE_ERR",
        "DEPLOY_PARSE_MANIFEST_IMAGES_ERR",
        "DEPLOY_HELM_CREATE_NS_NOT_AVAILABLE",
        "DEPLOY_CLUSTER_INTERNAL_SYSTEM_ERR",
        "DEPLOY_KPTFILE_INIT_ERR",
        "DEPLOY_KPT_SOURCE_ERR",
        "DEPLOY_KPTFILE_INVALID_YAML_ERR",
        "DEPLOY_KPT_APPLY_ERR",
        "DEPLOY_GET_CLOUD_RUN_CLIENT_ERR",
        "DEPLOY_CLOUD_RUN_GET_SERVICE_ERR",
        "DEPLOY_CLOUD_RUN_UPDATE_SERVICE_ERR",
        "DEPLOY_CLOUD_RUN_DELETE_SERVICE_ERR",
        "TEST_USER_CONFIG_ERR",
        "TEST_CST_USER_ERR",
        "TEST_IMG_PULL_ERR",
        "TEST_CUSTOM_CMD_PARSE_ERR",
        "TEST_CUSTOM_CMD_RUN_NON_ZERO_EXIT_ERR",
        "TEST_CUSTOM_CMD_RUN_TIMEDOUT_ERR",
        "TEST_CUSTOM_CMD_RUN_CANCELLED_ERR",
        "TEST_CUSTOM_CMD_RUN_EXECUTION_ERR",
        "TEST_CUSTOM_CMD_RUN_EXITED_ERR",
        "TEST_CUSTOM_CMD_RUN_ERR",
        "TEST_CUSTOM_DEPENDENCIES_CMD_ERR",
        "TEST_CUSTOM_DEPENDENCIES_UNMARSHALL_ERR",
        "TEST_CUSTOM_CMD_RETRIEVE_ERR",
        "RENDER_KPTFILE_INIT_ERR",
        "RENDER_KPTFILE_INVALID_YAML_ERR",
        "RENDER_KPTFILE_INVALID_SCHEMA_ERR",
        "RENDER_SET_NAMESPACE_ERR",
        "RENDER_NAMESPACE_ALREADY_SET_ERR",
        "RENDER_REPLACE_IMAGE_ERR",
        "RENDER_TRANSFORM_MANIFEST_ERR",
        "RENDER_SET_LABEL_ERR",
        "RENDER_MANIFEST_WRITE_ERR",
        "RENDER_PARSE_MANIFEST_IMAGES_ERR",
        "CONFIG_FILE_PARSING_ERR",
        "CONFIG_FILE_NOT_FOUND_ERR",
        "CONFIG_DEPENDENCY_NOT_FOUND_ERR",
        "CONFIG_DUPLICATE_NAMES_SAME_FILE_ERR",
        "CONFIG_DUPLICATE_NAMES_ACROSS_FILES_ERR",
        "CONFIG_BAD_FILTER_ERR",
        "CONFIG_ZERO_FOUND_ERR",
        "CONFIG_APPLY_PROFILES_ERR",
        "CONFIG_DEFAULT_VALUES_ERR",
        "CONFIG_FILE_PATHS_SUBSTITUTION_ERR",
        "CONFIG_MULTI_IMPORT_PROFILE_CONFLICT_ERR",
        "CONFIG_PROFILES_NOT_FOUND_ERR",
        "CONFIG_UNKNOWN_API_VERSION_ERR",
        "CONFIG_UNKNOWN_VALIDATOR",
        "CONFIG_UNKNOWN_TRANSFORMER",
        "CONFIG_MISSING_MANIFEST_FILE_ERR",
        "CONFIG_REMOTE_REPO_CACHE_NOT_FOUND_ERR",
        "CONFIG_UPGRADE_ERR",
        "INSPECT_UNKNOWN_ERR",
        "INSPECT_BUILD_ENV_ALREADY_EXISTS_ERR",
        "INSPECT_BUILD_ENV_INCORRECT_TYPE_ERR",
        "INSPECT_PROFILE_NOT_FOUND_ERR",
        "PORT_FORWARD_RUN_GCLOUD_NOT_FOUND",
        "PORT_FORWARD_RUN_PROXY_START_ERROR"
      ],
      "default": "OK",
      "description": "Enum for Status codes<br>\nThese error codes are prepended by Phase Name e.g.\nINIT, BUILD, TEST, DEPLOY, STATUSCHECK, DEVINIT<br>\nFor Success Error codes, use range 200 to 250.<br>\nFor Unknown error codes, use range 500 to 600.<br>\nFor Cancelled Error code, use range 800 to 850.<br>\n- OK: A default status code for events that do not have an associated phase.\nTypically seen with the DevEndEvent event on success.\n - STATUSCHECK_SUCCESS: Status Check Success\n - BUILD_SUCCESS: Build Success\n - RENDER_SUCCESS: Render Success\n - DEPLOY_SUCCESS: Deploy Success\n - TEST_SUCCESS: Test Success\n - BUILD_PUSH_ACCESS_DENIED: Build error due to push access denied\n - BUILD_PROJECT_NOT_FOUND: Build error due to GCP project not found.\n - BUILD_DOCKER_DAEMON_NOT_RUNNING: Docker build error due to docker daemon not running\n - BUILD_USER_ERROR: Build error due to user application code, e.g. compilation error,\ndockerfile error etc\n - BUILD_DOCKER_UNAVAILABLE: Build error due to docker not available\n - BUILD_DOCKER_UNAUTHORIZED: Docker build error due to user not authorized to perform the action\n - BUILD_DOCKER_SYSTEM_ERR: Docker system build error\n - BUILD_DOCKER_NOT_MODIFIED_ERR: Docker build error due to Docker build container is already in the\ndesired state\n - BUILD_DOCKER_NOT_IMPLEMENTED_ERR: Docker build error indicating a feature not supported\n - BUILD_DOCKER_DATA_LOSS_ERR: Docker build error indicates that for given build, data was lost or there\nis data corruption\n - BUILD_DOCKER_FORBIDDEN_ERR: Docker build error indicates user is forbidden to perform the build or\nstep/action.\n - BUILD_DOCKER_CONFLICT_ERR: Docker build error due to some internal error and docker container state\nconflicts with the requested action and can't be performed\n - BUILD_DOCKER_ERROR_NOT_FOUND: Docker build error indicates the requested object does not exist\n - BUILD_DOCKER_INVALID_PARAM_ERR: Docker build error indication invalid parameter sent to docker command\n - BUILD_DOCKERFILE_NOT_FOUND: Docker build failed due to dockerfile not found\n - BUILD_DOCKER_CACHE_FROM_PULL_ERR: Docker build failed due `cacheFrom` user config error\n - BUILD_DOCKER_GET_DIGEST_ERR: Build error due to digest for built artifact could not be retrieved from\ndocker daemon.\n - BUILD_DOCKER_NO_SPACE_ERR: Build error due no space left in docker.\n - BUILD_REGISTRY_GET_DIGEST_ERR: Build error due to digest for built artifact could not be retrieved from\nregistry.\n - BUILD_UNKNOWN_JIB_PLUGIN_TYPE: Build error indicating unknown Jib plugin type. Should be one of [maven,\ngradle]\n - BUILD_JIB_GRADLE_DEP_ERR: Build error determining dependency for jib gradle project.\n - BUILD_JIB_MAVEN_DEP_ERR: Build error determining dependency for jib gradle project.\n - INIT_DOCKER_NETWORK_LISTING_CONTAINERS: Docker build error when listing containers.\n - INIT_DOCKER_NETWORK_INVALID_CONTAINER_NAME: Docker build error indicating an invalid container name (or id).\n - INIT_DOCKER_NETWORK_CONTAINER_DOES_NOT_EXIST: Docker build error indicating the container referenced does not exists in\nthe docker context used.\n - INIT_DOCKER_NETWORK_INVALID_MODE: Docker Network invalid mode\n - INIT_DOCKER_NETWORK_PARSE_ERR: Error parsing Docker Network mode\n - BUILD_GCB_CREATE_BUILD_ERR: GCB Create Build Error\n - BUILD_GCB_GET_BUILD_ID_ERR: GCB error indicating an error to fetch build id.\n - BUILD_GCB_GET_BUILD_STATUS_ERR: GCB error indicating an error to fetch build status.\n - BUILD_GCB_GET_BUILD_LOG_ERR: GCB error indicating an error to fetch build logs.\n - BUILD_GCB_COPY_BUILD_LOG_ERR: GCB error indicating an error to fetch build status.\n - BUILD_GCB_GET_BUILT_IMAGE_ERR: GCB error indicating an error retrieving the built image id.\n - BUILD_GCB_BUILD_FAILED: GCB error indicating build failure.\n - BUILD_GCB_BUILD_INTERNAL_ERR: GCB error indicating build failure due to internal errror.\n - BUILD_GCB_BUILD_TIMEOUT: GCB error indicating build failure due to timeout.\n - BUILD_GCB_GENERATE_BUILD_DESCRIPTOR_ERR: GCB error to generate the build descriptor.\n - BUILD_GCB_UPLOAD_TO_GCS_ERR: GCB error to upload to GCS.\n - BUILD_GCB_JIB_DEPENDENCY_ERR: GCB error to fetch jib artifact dependency.\n - BUILD_GCB_GET_DEPENDENCY_ERR: GCB error to fetch artifact dependency.\n - BUILD_GCB_GET_GCS_BUCKET_ERR: GCB error to get GCS bucket.\n - BUILD_GCB_CREATE_BUCKET_ERR: GCB error to create a GCS bucket.\n - BUILD_GCB_EXTRACT_PROJECT_ID: GCB error to extract Project ID.\n - BUILD_GET_CLOUD_STORAGE_CLIENT_ERR: GCB error to get cloud storage client to perform GCS operation.\n - BUILD_GET_CLOUD_BUILD_CLIENT_ERR: GCB error to get cloud build client to perform GCB operations.\n - BUILD_UNKNOWN_PLATFORM_FLAG: Value provided to --platform flag cannot be parsed\n - BUILD_CROSS_PLATFORM_ERR: Cross-platform build failures\n - BUILD_CROSS_PLATFORM_NO_REGISTRY_ERR: Multi-platfor build fails due to no container registry set\n - STATUSCHECK_IMAGE_PULL_ERR: Container image pull error\n - STATUSCHECK_CONTAINER_CREATING: Container creating error\n - STATUSCHECK_RUN_CONTAINER_ERR: Container run error\n - STATUSCHECK_CONTAINER_TERMINATED: Container is already terminated\n - STATUSCHECK_DEPLOYMENT_ROLLOUT_PENDING: Deployment waiting for rollout\n - STATUSCHECK_STANDALONE_PODS_PENDING: Standalone pods pending to stabilize\n - STATUSCHECK_CONTAINER_RESTARTING: Container restarting error\n - STATUSCHECK_UNHEALTHY: Readiness probe failed\n - STATUSCHECK_CONTAINER_EXEC_ERROR: Executable binary format error\n - STATUSCHECK_NODE_MEMORY_PRESSURE: Node memory pressure error\n - STATUSCHECK_NODE_DISK_PRESSURE: Node disk pressure error\n - STATUSCHECK_NODE_NETWORK_UNAVAILABLE: Node network unavailable error\n - STATUSCHECK_NODE_PID_PRESSURE: Node PID pressure error\n - STATUSCHECK_NODE_UNSCHEDULABLE: Node unschedulable error\n - STATUSCHECK_NODE_UNREACHABLE: Node unreachable error\n - STATUSCHECK_NODE_NOT_READY: Node not ready error\n - STATUSCHECK_FAILED_SCHEDULING: Scheduler failure error\n - STATUSCHECK_KUBECTL_CONNECTION_ERR: Kubectl connection error\n - STATUSCHECK_KUBECTL_PID_KILLED: Kubectl process killed error\n - STATUSCHECK_KUBECTL_CLIENT_FETCH_ERR: Kubectl client fetch err\n - STATUSCHECK_POD_INITIALIZING: Pod Initializing\n - STATUSCHECK_CONFIG_CONNECTOR_IN_PROGRESS: The actual state of the resource has not yet reached the desired state\n - STATUSCHECK_CONFIG_CONNECTOR_FAILED: The process of reconciling the actual state with the desired state has\nencountered an error\n - STATUSCHECK_CONFIG_CONNECTOR_TERMINATING: The resource is in the process of being deleted\n - STATUSCHECK_CONFIG_CONNECTOR_NOT_FOUND: The resource does not exist\n - UNKNOWN_ERROR: Could not determine error and phase\n - STATUSCHECK_UNKNOWN: Status Check error unknown\n - STATUSCHECK_UNKNOWN_UNSCHEDULABLE: Container is unschedulable due to unknown reasons\n - STATUSCHECK_CONTAINER_WAITING_UNKNOWN: Container is waiting due to unknown reason\n - STATUSCHECK_UNKNOWN_EVENT: Container event reason unknown\n - STATUSCHECK_INTERNAL_ERROR: Status Check internal error\n - DEPLOY_UNKNOWN: Deploy failed due to unknown reason\n - SYNC_UNKNOWN: SYNC failed due to known reason\n - BUILD_UNKNOWN: Build failed due to unknown reason\n - DEVINIT_UNKNOWN: Dev Init failed due to unknown reason\n - CLEANUP_UNKNOWN: Cleanup failed due to unknown reason\n - INIT_UNKNOWN: Initialization of the Skaffold session failed due to unknown reason(s)\n - BUILD_DOCKER_UNKNOWN: Build failed due to docker unknown error\n - TEST_UNKNOWN: Test failed due to unknown reason\n - BUILD_GCB_BUILD_UNKNOWN_STATUS: GCB error indicating build failed due to unknown status.\n - SYNC_INIT_ERROR: File Sync Initialize failure\n - DEVINIT_REGISTER_BUILD_DEPS: Failed to configure watcher for build dependencies in dev loop\n - DEVINIT_REGISTER_TEST_DEPS: Failed to configure watcher for test dependencies in dev loop\n - DEVINIT_REGISTER_DEPLOY_DEPS: Failed to configure watcher for deploy dependencies in dev loop\n - DEVINIT_REGISTER_CONFIG_DEP: Failed to configure watcher for Skaffold configuration file.\n - DEVINIT_UNSUPPORTED_V1_MANIFEST: Failed to configure watcher for build dependencies for a base image with\nv1 manifest.\n - DEVINIT_REGISTER_RENDER_DEPS: Failed to configure watcher for render dependencies in dev loop\n - STATUSCHECK_USER_CANCELLED: User cancelled the skaffold dev run\n - STATUSCHECK_DEADLINE_EXCEEDED: Deadline for status check exceeded\n - BUILD_CANCELLED: Build Cancelled\n - DEPLOY_CANCELLED: Deploy cancelled due to user cancellation or one or more deployers\nfailed.\n - BUILD_DOCKER_CANCELLED: Docker build cancelled.\n - BUILD_DOCKER_DEADLINE: Build error due to docker deadline was reached before the docker action\ncompleted\n - BUILD_GCB_BUILD_CANCELLED: GCB Build cancelled.\n - INIT_CREATE_TAGGER_ERROR: Skaffold was unable to create the configured tagger\n - INIT_MINIKUBE_PAUSED_ERROR: Skaffold was unable to start as Minikube appears to be paused\n - INIT_MINIKUBE_NOT_RUNNING_ERROR: Skaffold was unable to start as Minikube appears to be stopped\n - INIT_CREATE_BUILDER_ERROR: Skaffold was unable to create a configured image builder\n - INIT_CREATE_DEPLOYER_ERROR: Skaffold was unable to create a configured deployer\n - INIT_CREATE_TEST_DEP_ERROR: Skaffold was unable to create a configured test\n - INIT_CACHE_ERROR: Skaffold encountered an error validating the artifact cache\n - INIT_CREATE_WATCH_TRIGGER_ERROR: Skaffold encountered an error when configuring file watching\n - INIT_CREATE_ARTIFACT_DEP_ERROR: Skaffold encountered an error when evaluating artifact dependencies\n - INIT_CLOUD_RUN_LOCATION_ERROR: No Location was specified for Cloud Run\n - DEPLOY_CLUSTER_CONNECTION_ERR: Unable to connect to cluster\n - DEPLOY_DEBUG_HELPER_RETRIEVE_ERR: Could not retrieve debug helpers.\n - DEPLOY_CLEANUP_ERR: Deploy clean up error\n - DEPLOY_HELM_APPLY_LABELS: Unable to apply helm labels.\n - DEPLOY_HELM_USER_ERR: Deploy error due to user deploy config for helm deployer\n - DEPLOY_NO_MATCHING_BUILD: An image was referenced with no matching build result\n - DEPLOY_HELM_VERSION_ERR: Unable to get helm client version\n - DEPLOY_HELM_MIN_VERSION_ERR: Helm version not supported.\n - DEPLOY_KUBECTL_VERSION_ERR: Unable to retrieve kubectl version\n - DEPLOY_KUBECTL_OFFLINE_MODE_ERR: User specified offline mode for rendering but remote manifests presents.\n - DEPLOY_ERR_WAITING_FOR_DELETION: Error waiting for previous version deletion before next version is\nactive.\n - DEPLOY_READ_MANIFEST_ERR: Error reading manifests\n - DEPLOY_READ_REMOTE_MANIFEST_ERR: Error reading remote manifests\n - DEPLOY_LIST_MANIFEST_ERR: Errors listing manifests\n - DEPLOY_KUBECTL_USER_ERR: Deploy error due to user deploy config for kubectl deployer\n - DEPLOY_KUSTOMIZE_USER_ERR: Deploy error due to user deploy config for kustomize deployer\n - DEPLOY_REPLACE_IMAGE_ERR: Error replacing a built artifact in the manifests\n - DEPLOY_TRANSFORM_MANIFEST_ERR: Error transforming a manifest during skaffold debug\n - DEPLOY_SET_LABEL_ERR: Error setting user specified additional labels.\n - DEPLOY_MANIFEST_WRITE_ERR: Error writing hydrated kubernetes manifests.\n - DEPLOY_PARSE_MANIFEST_IMAGES_ERR: Error getting images from a kubernetes manifest.\n - DEPLOY_HELM_CREATE_NS_NOT_AVAILABLE: Helm config `createNamespace` not available\n - DEPLOY_CLUSTER_INTERNAL_SYSTEM_ERR: Kubernetes cluster reported an internal system error\n - DEPLOY_KPTFILE_INIT_ERR: The Kptfile cannot be created via `kpt live init`.\n - DEPLOY_KPT_SOURCE_ERR: The `kpt fn source` cannot read the given manifests.\n - DEPLOY_KPTFILE_INVALID_YAML_ERR: The Kptfile exists but cannot be opened or parsed.\n - DEPLOY_KPT_APPLY_ERR: kpt fails to live apply the manifests to the cluster.\n - DEPLOY_GET_CLOUD_RUN_CLIENT_ERR: The Cloud Run Client could not be created\n - DEPLOY_CLOUD_RUN_GET_SERVICE_ERR: The Cloud Run Client could not get details about the service.\n - DEPLOY_CLOUD_RUN_UPDATE_SERVICE_ERR: The Cloud Run Client was unable to update the service.\n - DEPLOY_CLOUD_RUN_DELETE_SERVICE_ERR: The Cloud Run Client was unable to delete the service.\n - TEST_USER_CONFIG_ERR: Error expanding paths\n - TEST_CST_USER_ERR: Error running container-structure-test\n - TEST_IMG_PULL_ERR: Unable to docker pull image\n - TEST_CUSTOM_CMD_PARSE_ERR: Unable to parse test command\n - TEST_CUSTOM_CMD_RUN_NON_ZERO_EXIT_ERR: Command returned non-zero exit code\n - TEST_CUSTOM_CMD_RUN_TIMEDOUT_ERR: command cancelled or timed out\n - TEST_CUSTOM_CMD_RUN_CANCELLED_ERR: command cancelled or timed out\n - TEST_CUSTOM_CMD_RUN_EXECUTION_ERR: command context error\n - TEST_CUSTOM_CMD_RUN_EXITED_ERR: command exited\n - TEST_CUSTOM_CMD_RUN_ERR: error running cmd\n - TEST_CUSTOM_DEPENDENCIES_CMD_ERR: Error getting dependencies from command\n - TEST_CUSTOM_DEPENDENCIES_UNMARSHALL_ERR: Unmarshalling dependency output error\n - TEST_CUSTOM_CMD_RETRIEVE_ERR: Error retrieving the command\n - RENDER_KPTFILE_INIT_ERR: Render errors\nThe Kptfile cannot be created via `kpt pkg init`.\n - RENDER_KPTFILE_INVALID_YAML_ERR: The Kptfile is not a valid yaml file\n - RENDER_KPTFILE_INVALID_SCHEMA_ERR: The Kptfile is not a valid API schema\n - RENDER_SET_NAMESPACE_ERR: Error setting namespace.\n - RENDER_NAMESPACE_ALREADY_SET_ERR: Namespace is already set.\n - RENDER_REPLACE_IMAGE_ERR: Error replacing a built artifact in the manifests\n - RENDER_TRANSFORM_MANIFEST_ERR: Error transforming a manifest during skaffold debug\n - RENDER_SET_LABEL_ERR: Error setting user specified additional labels.\n - RENDER_MANIFEST_WRITE_ERR: Error writing hydrated kubernetes manifests.\n - RENDER_PARSE_MANIFEST_IMAGES_ERR: Error getting images from a kubernetes manifest.\n - CONFIG_FILE_PARSING_ERR: Catch-all configuration file parsing error\n - CONFIG_FILE_NOT_FOUND_ERR: Main configuration file not found\n - CONFIG_DEPENDENCY_NOT_FOUND_ERR: Dependency configuration file not found\n - CONFIG_DUPLICATE_NAMES_SAME_FILE_ERR: Duplicate config names in the same configuration file\n - CONFIG_DUPLICATE_NAMES_ACROSS_FILES_ERR: Duplicate config names in two configuration files\n - CONFIG_BAD_FILTER_ERR: No configs matching configs filter\n - CONFIG_ZERO_FOUND_ERR: No configs parsed from current file\n - CONFIG_APPLY_PROFILES_ERR: Failed to apply profiles to config\n - CONFIG_DEFAULT_VALUES_ERR: Failed to set default config values\n - CONFIG_FILE_PATHS_SUBSTITUTION_ERR: Failed to substitute absolute file paths in config\n - CONFIG_MULTI_IMPORT_PROFILE_CONFLICT_ERR: Same config imported at least twice with different set of profiles\n - CONFIG_PROFILES_NOT_FOUND_ERR: Profile selection did not match known profile names\n - CONFIG_UNKNOWN_API_VERSION_ERR: Config API version not found\n - CONFIG_UNKNOWN_VALIDATOR: The validator is not allowed in skaffold-managed mode.\n - CONFIG_UNKNOWN_TRANSFORMER: The transformer is not allowed in skaffold-managed mode.\n - CONFIG_MISSING_MANIFEST_FILE_ERR: Manifest file not found\n - CONFIG_REMOTE_REPO_CACHE_NOT_FOUND_ERR: Remote config repository cache not found and sync disabled\n - CONFIG_UPGRADE_ERR: Skaffold config version mismatch\n - INSPECT_UNKNOWN_ERR: Catch-all `skaffold inspect` command error\n - INSPECT_BUILD_ENV_ALREADY_EXISTS_ERR: Trying to add new build environment that already exists\n - INSPECT_BUILD_ENV_INCORRECT_TYPE_ERR: Trying to modify build environment that doesn't exist\n - INSPECT_PROFILE_NOT_FOUND_ERR: Trying to modify a profile that doesn't exist"
    },
    "enumsSuggestionCode": {
      "type": "string",
      "enum": [
        "NIL",
        "ADD_DEFAULT_REPO",
        "CHECK_DEFAULT_REPO",
        "CHECK_DEFAULT_REPO_GLOBAL_CONFIG",
        "GCLOUD_DOCKER_AUTH_CONFIGURE",
        "DOCKER_AUTH_CONFIGURE",
        "CHECK_GCLOUD_PROJECT",
        "CHECK_DOCKER_RUNNING",
        "FIX_USER_BUILD_ERR",
        "DOCKER_BUILD_RETRY",
        "FIX_CACHE_FROM_ARTIFACT_CONFIG",
        "FIX_SKAFFOLD_CONFIG_DOCKERFILE",
        "FIX_JIB_PLUGIN_CONFIGURATION",
        "FIX_DOCKER_NETWORK_CONTAINER_NAME",
        "CHECK_DOCKER_NETWORK_CONTAINER_RUNNING",
        "FIX_DOCKER_NETWORK_MODE_WHEN_EXTRACTING_CONTAINER_NAME",
        "RUN_DOCKER_PRUNE",
        "SET_CLEANUP_FLAG",
        "BUILD_FIX_UNKNOWN_PLATFORM_FLAG",
        "BUILD_INSTALL_PLATFORM_EMULATORS",
        "SET_PUSH_AND_CONTAINER_REGISTRY",
        "CHECK_CLUSTER_CONNECTION",
        "CHECK_MINIKUBE_STATUS",
        "INSTALL_HELM",
        "UPGRADE_HELM",
        "FIX_SKAFFOLD_CONFIG_HELM_ARTIFACT_OVERRIDES",
        "UPGRADE_HELM32",
        "FIX_SKAFFOLD_CONFIG_HELM_CREATE_NAMESPACE",
        "INVALID_KPT_MANIFESTS",
        "ALIGN_KPT_INVENTORY",
        "INSTALL_KUBECTL",
        "SPECIFY_CLOUD_RUN_LOCATION",
        "CHECK_CONTAINER_LOGS",
        "CHECK_READINESS_PROBE",
        "CHECK_CONTAINER_IMAGE",
        "ADDRESS_NODE_MEMORY_PRESSURE",
        "ADDRESS_NODE_DISK_PRESSURE",
        "ADDRESS_NODE_NETWORK_UNAVAILABLE",
        "ADDRESS_NODE_PID_PRESSURE",
        "ADDRESS_NODE_UNSCHEDULABLE",
        "ADDRESS_NODE_UNREACHABLE",
        "ADDRESS_NODE_NOT_READY",
        "ADDRESS_FAILED_SCHEDULING",
        "CHECK_HOST_CONNECTION",
        "START_MINIKUBE",
        "UNPAUSE_MINIKUBE",
        "RUN_DOCKER_PULL",
        "SET_RENDER_FLAG_OFFLINE_FALSE",
        "KPTFILE_MANUAL_INIT",
        "KPTFILE_CHECK_YAML",
        "REMOVE_NAMESPACE_FROM_MANIFESTS",
        "CONFIG_CHECK_FILE_PATH",
        "CONFIG_CHECK_DEPENDENCY_DEFINITION",
        "CONFIG_CHANGE_NAMES",
        "CONFIG_CHECK_FILTER",
        "CONFIG_CHECK_PROFILE_DEFINITION",
        "CONFIG_CHECK_DEPENDENCY_PROFILES_SELECTION",
        "CONFIG_CHECK_PROFILE_SELECTION",
        "CONFIG_FIX_API_VERSION",
        "CONFIG_ALLOWLIST_VALIDATORS",
        "CONFIG_ALLOWLIST_transformers",
        "CONFIG_FIX_MISSING_MANIFEST_FILE",
        "CONFIG_ENABLE_REMOTE_REPO_SYNC",
        "CONFIG_FIX_SKAFFOLD_CONFIG_VERSION",
        "INSPECT_USE_MODIFY_OR_NEW_PROFILE",
        "INSPECT_USE_ADD_BUILD_ENV",
        "INSPECT_CHECK_INPUT_PROFILE",
        "OPEN_ISSUE",
        "CHECK_CUSTOM_COMMAND",
        "FIX_CUSTOM_COMMAND_TIMEOUT",
        "CHECK_CUSTOM_COMMAND_DEPENDENCIES_CMD",
        "CHECK_CUSTOM_COMMAND_DEPENDENCIES_PATHS",
        "CHECK_TEST_COMMAND_AND_IMAGE_NAME"
      ],
      "default": "NIL",
      "description": "Enum for Suggestion codes\n- NIL: default nil suggestion.\nThis is usually set when no error happens.\n - ADD_DEFAULT_REPO: Add Default Repo\n - CHECK_DEFAULT_REPO: Verify Default Repo\n - CHECK_DEFAULT_REPO_GLOBAL_CONFIG: Verify default repo in the global config\n - GCLOUD_DOCKER_AUTH_CONFIGURE: run gcloud docker auth configure\n - DOCKER_AUTH_CONFIGURE: Run docker auth configure\n - CHECK_GCLOUD_PROJECT: Verify Gcloud Project\n - CHECK_DOCKER_RUNNING: Check if docker is running\n - FIX_USER_BUILD_ERR: Fix User Build Error\n - DOCKER_BUILD_RETRY: Docker build internal error, try again\n - FIX_CACHE_FROM_ARTIFACT_CONFIG: Fix `cacheFrom` config for given artifact and try again\n - FIX_SKAFFOLD_CONFIG_DOCKERFILE: Fix `dockerfile` config for a given artifact and try again.\n - FIX_JIB_PLUGIN_CONFIGURATION: Use a supported Jib plugin type\n - FIX_DOCKER_NETWORK_CONTAINER_NAME: Docker build network invalid docker container name (or id).\n - CHECK_DOCKER_NETWORK_CONTAINER_RUNNING: Docker build network container not existing in the current context.\n - FIX_DOCKER_NETWORK_MODE_WHEN_EXTRACTING_CONTAINER_NAME: Executing extractContainerNameFromNetworkMode with a non valid mode (only\ncontainer mode allowed)\n - RUN_DOCKER_PRUNE: Prune Docker image\n - SET_CLEANUP_FLAG: Set Cleanup flag for skaffold command.\n - BUILD_FIX_UNKNOWN_PLATFORM_FLAG: Check value provided to the `--platform` flag\n - BUILD_INSTALL_PLATFORM_EMULATORS: Check if QEMU platform emulators are installed\n - SET_PUSH_AND_CONTAINER_REGISTRY: Set --push and container registry to run a multi-platform build\n - CHECK_CLUSTER_CONNECTION: Check cluster connection\n - CHECK_MINIKUBE_STATUS: Check minikube status\n - INSTALL_HELM: Install helm tool\n - UPGRADE_HELM: Upgrade helm tool\n - FIX_SKAFFOLD_CONFIG_HELM_ARTIFACT_OVERRIDES: Fix helm `releases.artifactOverrides` config to match with\n`build.artifacts` (no longer used in Skaffold v2)\n - UPGRADE_HELM32: Upgrade helm version to v3.2.0 and higher.\n - FIX_SKAFFOLD_CONFIG_HELM_CREATE_NAMESPACE: Set `releases.createNamespace` to false.\n - INVALID_KPT_MANIFESTS: check the Kptfile validation.\n - ALIGN_KPT_INVENTORY: align the inventory info in kpt live apply.\n - INSTALL_KUBECTL: Install kubectl tool\n - SPECIFY_CLOUD_RUN_LOCATION: Specify Cloud Run Location\n - CHECK_CONTAINER_LOGS: Container run error\n - CHECK_READINESS_PROBE: Pod Health check error\n - CHECK_CONTAINER_IMAGE: Check Container image\n - ADDRESS_NODE_MEMORY_PRESSURE: Node pressure error\n - ADDRESS_NODE_DISK_PRESSURE: Node disk pressure error\n - ADDRESS_NODE_NETWORK_UNAVAILABLE: Node network unavailable error\n - ADDRESS_NODE_PID_PRESSURE: Node PID pressure error\n - ADDRESS_NODE_UNSCHEDULABLE: Node unschedulable error\n - ADDRESS_NODE_UNREACHABLE: Node unreachable error\n - ADDRESS_NODE_NOT_READY: Node not ready error\n - ADDRESS_FAILED_SCHEDULING: Scheduler failure error\n - CHECK_HOST_CONNECTION: Cluster Connectivity error\n - START_MINIKUBE: Minikube is stopped: use `minikube start`\n - UNPAUSE_MINIKUBE: Minikube is paused: use `minikube unpause`\n - RUN_DOCKER_PULL: Run Docker pull for the image with v1 manifest and try again.\n - SET_RENDER_FLAG_OFFLINE_FALSE: Rerun with correct offline flag value.\n - KPTFILE_MANUAL_INIT: Manually run `kpt pkg init` or `kpt live init`\n - KPTFILE_CHECK_YAML: Check if the Kptfile is correct.\n - REMOVE_NAMESPACE_FROM_MANIFESTS: Remove namespace from manifests\n - CONFIG_CHECK_FILE_PATH: Check configuration file path\n - CONFIG_CHECK_DEPENDENCY_DEFINITION: Check dependency config definition\n - CONFIG_CHANGE_NAMES: Change config name to avoid duplicates\n - CONFIG_CHECK_FILTER: Check config filter\n - CONFIG_CHECK_PROFILE_DEFINITION: Check profile definition in current config\n - CONFIG_CHECK_DEPENDENCY_PROFILES_SELECTION: Check active profile selection for dependency config\n - CONFIG_CHECK_PROFILE_SELECTION: Check profile selection flag\n - CONFIG_FIX_API_VERSION: Fix config API version or upgrade the skaffold binary\n - CONFIG_ALLOWLIST_VALIDATORS: Only the allow listed validators are acceptable in skaffold-managed mode.\n - CONFIG_ALLOWLIST_transformers: Only the allow listed transformers are acceptable in skaffold-managed\nmode.\n - CONFIG_FIX_MISSING_MANIFEST_FILE: Check mising manifest file section of config and fix as needed.\n - CONFIG_ENABLE_REMOTE_REPO_SYNC: Enable remote repo sync, or clone manually\n - CONFIG_FIX_SKAFFOLD_CONFIG_VERSION: Upgrade skaffold config version to latest\n - INSPECT_USE_MODIFY_OR_NEW_PROFILE: Create new build env in a profile instead, or use the 'modify' command\n - INSPECT_USE_ADD_BUILD_ENV: Check profile selection, or use the 'add' command instead\n - INSPECT_CHECK_INPUT_PROFILE: Check profile flag value\n - OPEN_ISSUE: Open an issue so this situation can be diagnosed\n - CHECK_CUSTOM_COMMAND: Test error suggestion codes"
    },
    "enumsTesterType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TEST_TYPE",
        "UNIT",
        "CONTAINER_STRUCTURE_TEST"
      ],
      "default": "UNKNOWN_TEST_TYPE",
      "description": "Enum indicating test tools used\n- UNKNOWN_TEST_TYPE: Could not determine Test Type\n - UNIT: Unit tests\n - CONTAINER_STRUCTURE_TEST: Container Structure tests"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v2ActionableErr": {
      "type": "object",
      "properties": {
        "errCode": {
          "$ref": "#/definitions/enumsStatusCode"
        },
        "message": {
          "type": "string"
        },
        "suggestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2Suggestion"
          }
        }
      },
      "description": "`ActionableErr` defines an error that occurred along with an optional list of suggestions"
    },
    "v2ApplicationLogEvent": {
      "type": "object",
      "properties": {
        "containerName": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "richFormattedMessage": {
          "type": "string"
        }
      },
      "description": "`ApplicationLogEvent` represents a log that comes from one of the pods running in the user's application."
    },
    "v2BuildMetadata": {
      "type": "object",
      "properties": {
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildMetadataArtifact"
          }
        },
        "type": {
          "$ref": "#/definitions/enumsBuildType"
        },
        "additional": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional key value pairs to describe the build pipeline"
        }
      }
    },
    "v2BuildState": {
      "type": "object",
      "properties": {
        "artifacts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of `artifact name -> build-state`.\nArtifact name is defined in the `skaffold.yaml`.\nThe `build-state` can be: <br>\n- `\"NotStarted\"`: not yet started <br>\n- `\"InProgress\"`: build started <br>\n- `\"Complete\"`: build succeeded <br>\n- `\"Failed\"`: build failed"
        },
        "autoTrigger": {
          "type": "boolean",
          "format": "boolean"
        },
        "statusCode": {
          "$ref": "#/definitions/enumsStatusCode"
        }
      },
      "description": "`BuildState` maps Skaffold artifacts to their current build states"
    },
    "v2BuildSubtaskEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "artifact": {
          "type": "string"
        },
        "step": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        },
        "hostPlatform": {
          "type": "string"
        },
        "targetPlatforms": {
          "type": "string"
        }
      },
      "description": "`BuildSubtaskvent` describes the build status per artifact, and will be emitted by Skaffold anytime a build starts or finishes, successfully or not.\nIf the build fails, an error will be attached to the event."
    },
    "v2CloudRunReadyEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "ready_revision": {
          "type": "string"
        }
      },
      "description": "A Resource StatusCheck Event for a Cloud Run Service.\nIndicates that a Cloud Run Service has deployed successfully and is serving\non the specified URL"
    },
    "v2DebuggingContainerEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "artifact": {
          "type": "string"
        },
        "runtime": {
          "type": "string"
        },
        "workingDir": {
          "type": "string"
        },
        "debugPorts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "description": "DebuggingContainerEvent is raised when a debugging container is started or terminated"
    },
    "v2DeployMetadata": {
      "type": "object",
      "properties": {
        "deployers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployMetadataDeployer"
          }
        },
        "cluster": {
          "$ref": "#/definitions/enumsClusterType"
        }
      }
    },
    "v2DeployState": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "autoTrigger": {
          "type": "boolean",
          "format": "boolean"
        },
        "statusCode": {
          "$ref": "#/definitions/enumsStatusCode"
        }
      },
      "description": "`DeployState` describes the status of the current deploy"
    },
    "v2DeploySubtaskEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "`DeploySubtaskEvent` represents the status of a deployment, and is emitted by Skaffold\nanytime a deployment starts or completes, successfully or not."
    },
    "v2Event": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "metaEvent": {
          "$ref": "#/definitions/v2MetaEvent"
        },
        "skaffoldLogEvent": {
          "$ref": "#/definitions/v2SkaffoldLogEvent"
        },
        "applicationLogEvent": {
          "$ref": "#/definitions/v2ApplicationLogEvent"
        },
        "taskEvent": {
          "$ref": "#/definitions/v2TaskEvent"
        },
        "buildSubtaskEvent": {
          "$ref": "#/definitions/v2BuildSubtaskEvent"
        },
        "deploySubtaskEvent": {
          "$ref": "#/definitions/v2DeploySubtaskEvent"
        },
        "portEvent": {
          "$ref": "#/definitions/v2PortForwardEvent"
        },
        "statusCheckSubtaskEvent": {
          "$ref": "#/definitions/v2StatusCheckSubtaskEvent"
        },
        "fileSyncEvent": {
          "$ref": "#/definitions/v2FileSyncEvent"
        },
        "debuggingContainerEvent": {
          "$ref": "#/definitions/v2DebuggingContainerEvent"
        },
        "terminationEvent": {
          "$ref": "#/definitions/v2TerminationEvent"
        },
        "testEvent": {
          "$ref": "#/definitions/v2TestSubtaskEvent"
        },
        "renderEvent": {
          "$ref": "#/definitions/v2RenderSubtaskEvent"
        },
        "verifyEvent": {
          "$ref": "#/definitions/v2VerifySubtaskEvent"
        },
        "cloudRunReadyEvent": {
          "$ref": "#/definitions/v2CloudRunReadyEvent"
        }
      },
      "description": "`Event` describes an event in the Skaffold process.\nIt is one of MetaEvent, BuildEvent, TestEvent, DeployEvent, PortEvent, StatusCheckEvent, ResourceStatusCheckEvent, FileSyncEvent, or DebuggingContainerEvent."
    },
    "v2FileSyncEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "fileCount": {
          "type": "integer",
          "format": "int32"
        },
        "image": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "FileSyncEvent describes the sync status."
    },
    "v2FileSyncState": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "autoTrigger": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "`FileSyncState` contains the status of the current file sync"
    },
    "v2IntOrString": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "intVal": {
          "type": "integer",
          "format": "int32"
        },
        "strVal": {
          "type": "string"
        }
      },
      "description": "IntOrString is a type that can hold an int32 or a string."
    },
    "v2Intent": {
      "type": "object",
      "properties": {
        "build": {
          "type": "boolean",
          "format": "boolean"
        },
        "sync": {
          "type": "boolean",
          "format": "boolean"
        },
        "deploy": {
          "type": "boolean",
          "format": "boolean"
        },
        "devloop": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "Intent represents user intents for a given phase."
    },
    "v2MetaEvent": {
      "type": "object",
      "properties": {
        "entry": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v2Metadata"
        }
      },
      "description": "`MetaEvent` provides general information regarding Skaffold"
    },
    "v2Metadata": {
      "type": "object",
      "properties": {
        "build": {
          "$ref": "#/definitions/v2BuildMetadata"
        },
        "deploy": {
          "$ref": "#/definitions/v2DeployMetadata"
        },
        "test": {
          "$ref": "#/definitions/v2TestMetadata"
        },
        "runID": {
          "type": "string"
        },
        "render": {
          "$ref": "#/definitions/v2RenderMetadata"
        },
        "additional": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional key value pairs to describe the build pipeline"
        }
      }
    },
    "v2PortForwardEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "localPort": {
          "type": "integer",
          "format": "int32"
        },
        "podName": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "portName": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/v2IntOrString"
        }
      },
      "description": "PortForwardEvent Event describes each port forwarding event."
    },
    "v2RenderMetadata": {
      "type": "object",
      "properties": {
        "Renderers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RenderMetadataRenderer"
          }
        }
      },
      "description": "RenderMetadata describes the render pipeline"
    },
    "v2RenderState": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of the current render"
        },
        "statusCode": {
          "$ref": "#/definitions/enumsStatusCode",
          "description": "Renderstate status code"
        }
      },
      "description": "`RenderState` describes the current state of the render"
    },
    "v2RenderSubtaskEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "`RenderSubtaskEvent` represents the status of a render, and is emitted by Skaffold\nanytime a render starts or completes, successfully or not."
    },
    "v2SkaffoldLogEvent": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string"
        },
        "subtask_id": {
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/enumsLogLevel",
          "description": "string origin = 3; // REMOVED: which tool the output came from ex: skaffold, docker"
        },
        "message": {
          "type": "string"
        }
      },
      "description": "`SkaffoldLogEvent` represents a piece of output that comes from a skaffold run, for example: \"Generating tags...\", \"Step 1/3 : FROM gcr.io/distroless/base\""
    },
    "v2State": {
      "type": "object",
      "properties": {
        "buildState": {
          "$ref": "#/definitions/v2BuildState"
        },
        "deployState": {
          "$ref": "#/definitions/v2DeployState"
        },
        "forwardedPorts": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v2PortForwardEvent"
          }
        },
        "statusCheckState": {
          "$ref": "#/definitions/v2StatusCheckState"
        },
        "fileSyncState": {
          "$ref": "#/definitions/v2FileSyncState"
        },
        "debuggingContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2DebuggingContainerEvent"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v2Metadata"
        },
        "testState": {
          "$ref": "#/definitions/v2TestState"
        },
        "renderState": {
          "$ref": "#/definitions/v2RenderState"
        },
        "verifyState": {
          "$ref": "#/definitions/v2VerifyState"
        }
      },
      "description": "`State` represents the current state of the Skaffold components"
    },
    "v2StatusCheckState": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "resources": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of `resource name -> status-check-state`. Where `resource-name` is the kubernetes resource name.\nThe `status-check-state` can be <br>\n- `\"NotStarted\"`: indicates that `status-check` has just started. <br>\n- `\"InProgress\"`: InProgress is sent after every resource check is complete. <br>\n- `\"Succeeded\"`:\n- `\"Failed\"`:"
        },
        "statusCode": {
          "$ref": "#/definitions/enumsStatusCode",
          "description": "StatusCheck statusCode"
        }
      },
      "description": "`StatusCheckState` describes the state of status check of current deployed resources."
    },
    "v2StatusCheckSubtaskEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "statusCode": {
          "$ref": "#/definitions/enumsStatusCode"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "A Resource StatusCheck Event, indicates progress for each kubernetes deployment.\nFor every resource, there will be exactly one event with `status` *Succeeded* or *Failed* event.\nThere can be multiple events with `status` *Pending*.\nSkaffold polls for resource status every 0.5 second. If the resource status changes, an event with `status` “Pending”, “Complete” and “Failed”\nwill be sent with the new status."
    },
    "v2Suggestion": {
      "type": "object",
      "properties": {
        "suggestionCode": {
          "$ref": "#/definitions/enumsSuggestionCode"
        },
        "action": {
          "type": "string"
        }
      },
      "description": "Suggestion defines the action a user needs to recover from an error."
    },
    "v2TaskEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "iteration": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "`TaskEvent` represent the different larger phases of a skaffold session, for example Build, Deploy, etc.\nIf a phase fails, an actionable error will be attached"
    },
    "v2TerminationEvent": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "err": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "`TerminationEvent` marks the end of the skaffold session"
    },
    "v2TestMetadata": {
      "type": "object",
      "properties": {
        "Testers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestMetadataTester"
          }
        }
      },
      "description": "TestMetadata describes the test pipeline"
    },
    "v2TestState": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of the current test"
        },
        "statusCode": {
          "$ref": "#/definitions/enumsStatusCode",
          "description": "Teststate status code"
        }
      },
      "description": "`TestState` describes the current state of the test"
    },
    "v2TestSubtaskEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "`TestSubtaskEvent` represents the status of a test, and is emitted by Skaffold\nanytime a test starts or completes, successfully or not."
    },
    "v2TriggerState": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "description": "TriggerState represents trigger state for a given phase."
    },
    "v2VerifyState": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of the current render"
        },
        "statusCode": {
          "$ref": "#/definitions/enumsStatusCode",
          "description": "Verifystate status code"
        }
      },
      "description": "`VerifyState` describes the current state of the render"
    },
    "v2VerifySubtaskEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "task_id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "actionableErr": {
          "$ref": "#/definitions/v2ActionableErr"
        }
      },
      "description": "`VerifyEvent` represents the status of a render, and is emitted by Skaffold\nanytime a render starts or completes, successfully or not."
    }
  },
  "x-stream-definitions": {
    "v2Event": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v2Event"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "description": "Stream result of v2Event"
    }
  }
}
